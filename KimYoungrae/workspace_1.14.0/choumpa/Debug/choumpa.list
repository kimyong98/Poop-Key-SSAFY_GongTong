
choumpa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080030fc  080030fc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030fc  080030fc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000006c  08003170  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003170  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000734a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c1  00000000  00000000  00027422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000545  00000000  00000000  000292f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b55  00000000  00000000  00029835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009125  00000000  00000000  0004138a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083bc0  00000000  00000000  0004a4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002324  00000000  00000000  000ce070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d0394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003074 	.word	0x08003074

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08003074 	.word	0x08003074

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_GPIO_Init+0x114>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MX_GPIO_Init+0x114>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <MX_GPIO_Init+0x114>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <MX_GPIO_Init+0x114>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_GPIO_Init+0x114>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <MX_GPIO_Init+0x114>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x118>)
 80009a8:	f000 fe09 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009b4:	f000 fe03 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_GPIO_Init+0x120>)
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x124>)
 80009ce:	f000 fc5b 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80009d2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x118>)
 80009ec:	f000 fc4c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000a0a:	f000 fc3d 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_GPIO_Init+0x118>)
 8000a24:	f000 fc30 	bl	8001288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f000 fbf4 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f000 fc0d 	bl	8001252 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40011000 	.word	0x40011000

08000a54 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a5c:	1d39      	adds	r1, r7, #4
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	2201      	movs	r2, #1
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <__io_putchar+0x20>)
 8000a66:	f001 fa45 	bl	8001ef4 <HAL_UART_Transmit>
  return ch;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000008c 	.word	0x2000008c

08000a78 <micros>:
/* USER CODE BEGIN 0 */
#define SYS_CLOCK    8
#define SYSTICK_LOAD 7999
uint32_t millis_cnt=1;

uint32_t micros(){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return (millis_cnt&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <micros+0x2c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	fb03 f202 	mul.w	r2, r3, r2
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <micros+0x30>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f5c3 53f9 	rsb	r3, r3, #7968	; 0x1f20
 8000a94:	331f      	adds	r3, #31
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	4413      	add	r3, r2
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	e000e010 	.word	0xe000e010
 8000aac:	00000000 	.word	0x00000000

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fa53 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f86f 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f7ff ff35 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 f9bf 	bl	8000e44 <MX_USART2_UART_Init>


	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
	  // HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000acc:	4830      	ldr	r0, [pc, #192]	; (8000b90 <main+0xe0>)
 8000ace:	f000 fd76 	bl	80015be <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000ad2:	2005      	movs	r0, #5
 8000ad4:	f000 faa6 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	482c      	ldr	r0, [pc, #176]	; (8000b90 <main+0xe0>)
 8000ae0:	f000 fd6d 	bl	80015be <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f000 fa9d 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4827      	ldr	r0, [pc, #156]	; (8000b90 <main+0xe0>)
 8000af2:	f000 fd64 	bl	80015be <HAL_GPIO_WritePin>
	  //printf("right after : %lu\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
	  st = HAL_GetTick();
 8000af6:	f000 fa8b 	bl	8001010 <HAL_GetTick>
 8000afa:	60f8      	str	r0, [r7, #12]
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_RESET);
 8000afc:	bf00      	nop
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	4823      	ldr	r0, [pc, #140]	; (8000b90 <main+0xe0>)
 8000b04:	f000 fd44 	bl	8001590 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f7      	beq.n	8000afe <main+0x4e>
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET);
 8000b0e:	bf00      	nop
 8000b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b14:	481e      	ldr	r0, [pc, #120]	; (8000b90 <main+0xe0>)
 8000b16:	f000 fd3b 	bl	8001590 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d0f7      	beq.n	8000b10 <main+0x60>
	  ed = HAL_GetTick();
 8000b20:	f000 fa76 	bl	8001010 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]

	  diff = ed -st;
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	607b      	str	r3, [r7, #4]
	  distance = diff * 0.034 / 2;
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fc50 	bl	80003d4 <__aeabi_ui2d>
 8000b34:	a314      	add	r3, pc, #80	; (adr r3, 8000b88 <main+0xd8>)
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	f7ff fcc5 	bl	80004c8 <__aeabi_dmul>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b4e:	f7ff fde5 	bl	800071c <__aeabi_ddiv>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f7ff fec7 	bl	80008ec <__aeabi_d2uiz>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	603b      	str	r3, [r7, #0]
	  printf("%lu\r\n", diff);
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <main+0xe4>)
 8000b66:	f001 fc07 	bl	8002378 <iprintf>

	  printf("%lu \r\n", micros());
 8000b6a:	f7ff ff85 	bl	8000a78 <micros>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <main+0xe8>)
 8000b74:	f001 fc00 	bl	8002378 <iprintf>
	  HAL_Delay(500);
 8000b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7c:	f000 fa52 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000b80:	e7a1      	b.n	8000ac6 <main+0x16>
 8000b82:	bf00      	nop
 8000b84:	f3af 8000 	nop.w
 8000b88:	b020c49c 	.word	0xb020c49c
 8000b8c:	3fa16872 	.word	0x3fa16872
 8000b90:	40010800 	.word	0x40010800
 8000b94:	0800308c 	.word	0x0800308c
 8000b98:	08003094 	.word	0x08003094

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b090      	sub	sp, #64	; 0x40
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2228      	movs	r2, #40	; 0x28
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fc39 	bl	8002422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fd2e 	bl	8001634 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bde:	f000 f818 	bl	8000c12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 ff9c 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c06:	f000 f804 	bl	8000c12 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3740      	adds	r7, #64	; 0x40
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c16:	b672      	cpsid	i
}
 8000c18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <Error_Handler+0x8>

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x6c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2005      	movs	r0, #5
 8000c58:	f000 fadf 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c5c:	2005      	movs	r0, #5
 8000c5e:	f000 faf8 	bl	8001252 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x70>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_MspInit+0x70>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f989 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf2:	f000 fc7d 	bl	80015f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e00a      	b.n	8000d22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d0c:	f3af 8000 	nop.w
 8000d10:	4601      	mov	r1, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbf0      	blt.n	8000d0c <_read+0x12>
  }

  return len;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e009      	b.n	8000d5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe80 	bl	8000a54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dbf1      	blt.n	8000d46 <_write+0x12>
  }
  return len;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_close>:

int _close(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
  return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <_isatty>:

int _isatty(int file)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f001 fb60 	bl	80024c0 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20005000 	.word	0x20005000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000088 	.word	0x20000088
 8000e34:	20000228 	.word	0x20000228

08000e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART2_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f000 ffea 	bl	8001e54 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f7ff fec4 	bl	8000c12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	40004400 	.word	0x40004400

08000e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0x70>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d123      	bne.n	8000f00 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	61d3      	str	r3, [r2, #28]
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_UART_MspInit+0x74>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_UART_MspInit+0x78>)
 8000efc:	f000 f9c4 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ff90 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f1a:	490c      	ldr	r1, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f30:	4c09      	ldr	r4, [pc, #36]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f001 fac5 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff fdb5 	bl	8000ab0 <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f50:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8000f54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f58:	20000224 	.word	0x20000224

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x28>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x28>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f947 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe4e 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f95f 	bl	800126e <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f927 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	2000000c 	.word	0x2000000c
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x20>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x20>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	2000000c 	.word	0x2000000c
 800100c:	200000d4 	.word	0x200000d4

08001010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	200000d4 	.word	0x200000d4

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffe0 	bl	8001010 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000000c 	.word	0x2000000c

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff90 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff2d 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff42 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff90 	bl	800115c <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff35 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e169      	b.n	8001570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8158 	bne.w	800156a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a9a      	ldr	r2, [pc, #616]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d05e      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012c4:	4a98      	ldr	r2, [pc, #608]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d875      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ca:	4a98      	ldr	r2, [pc, #608]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d058      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012d0:	4a96      	ldr	r2, [pc, #600]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d86f      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012d6:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d052      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012dc:	4a94      	ldr	r2, [pc, #592]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d869      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012e2:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04c      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012e8:	4a92      	ldr	r2, [pc, #584]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d863      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ee:	4a92      	ldr	r2, [pc, #584]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d046      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012f4:	4a90      	ldr	r2, [pc, #576]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d85d      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d82a      	bhi.n	8001354 <HAL_GPIO_Init+0xcc>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d859      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_GPIO_Init+0x80>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001383 	.word	0x08001383
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
 8001314:	080013b1 	.word	0x080013b1
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013b7 	.word	0x080013b7
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013b7 	.word	0x080013b7
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013b7 	.word	0x080013b7
 800133c:	080013b7 	.word	0x080013b7
 8001340:	080013b7 	.word	0x080013b7
 8001344:	080013b7 	.word	0x080013b7
 8001348:	080013b7 	.word	0x080013b7
 800134c:	08001365 	.word	0x08001365
 8001350:	08001379 	.word	0x08001379
 8001354:	4a79      	ldr	r2, [pc, #484]	; (800153c <HAL_GPIO_Init+0x2b4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135a:	e02c      	b.n	80013b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e029      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	3304      	adds	r3, #4
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e024      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e01f      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	330c      	adds	r3, #12
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e01a      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138a:	2304      	movs	r3, #4
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e013      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	611a      	str	r2, [r3, #16]
          break;
 80013a2:	e009      	b.n	80013b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	615a      	str	r2, [r3, #20]
          break;
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          break;
 80013b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d801      	bhi.n	80013c2 <HAL_GPIO_Init+0x13a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_Init+0x13e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d802      	bhi.n	80013d4 <HAL_GPIO_Init+0x14c>
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x152>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	3b08      	subs	r3, #8
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	210f      	movs	r1, #15
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b1 	beq.w	800156a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <HAL_GPIO_Init+0x2c0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_GPIO_Init+0x2c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <HAL_GPIO_Init+0x2c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x2cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001464:	2303      	movs	r3, #3
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001468:	2304      	movs	r3, #4
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001474:	2300      	movs	r3, #0
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001486:	492f      	ldr	r1, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	492c      	ldr	r1, [pc, #176]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4928      	ldr	r1, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	491e      	ldr	r1, [pc, #120]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4918      	ldr	r1, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4914      	ldr	r1, [pc, #80]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e021      	b.n	800156a <HAL_GPIO_Init+0x2e2>
 8001526:	bf00      	nop
 8001528:	10320000 	.word	0x10320000
 800152c:	10310000 	.word	0x10310000
 8001530:	10220000 	.word	0x10220000
 8001534:	10210000 	.word	0x10210000
 8001538:	10120000 	.word	0x10120000
 800153c:	10110000 	.word	0x10110000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011000 	.word	0x40011000
 8001554:	40011400 	.word	0x40011400
 8001558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_GPIO_Init+0x304>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4909      	ldr	r1, [pc, #36]	; (800158c <HAL_GPIO_Init+0x304>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f ae8e 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	; 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ce:	787b      	ldrb	r3, [r7, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f806 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e272      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8087 	beq.w	8001762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00c      	beq.n	800167a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001660:	4b8f      	ldr	r3, [pc, #572]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d112      	bne.n	8001692 <HAL_RCC_OscConfig+0x5e>
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d06c      	beq.n	8001760 <HAL_RCC_OscConfig+0x12c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d168      	bne.n	8001760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e24c      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x76>
 800169c:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a7f      	ldr	r2, [pc, #508]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e02e      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0xbc>
 80016d6:	4b72      	ldr	r3, [pc, #456]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a71      	ldr	r2, [pc, #452]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016f0:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6a      	ldr	r2, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fc7e 	bl	8001010 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fc7a 	bl	8001010 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e200      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xe4>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fc6a 	bl	8001010 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc66 	bl	8001010 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1ec      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x10c>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x18c>
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x176>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1c0      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4939      	ldr	r1, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e03a      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fc1f 	bl	8001010 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc1b 	bl	8001010 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1a1      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fbfe 	bl	8001010 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fbfa 	bl	8001010 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e180      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03a      	beq.n	80018b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fbde 	bl	8001010 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fbda 	bl	8001010 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e160      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 face 	bl	8001e18 <RCC_Delay>
 800187c:	e01c      	b.n	80018b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fbc4 	bl	8001010 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188a:	e00f      	b.n	80018ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fbc0 	bl	8001010 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d908      	bls.n	80018ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e146      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	42420000 	.word	0x42420000
 80018a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e9      	bne.n	800188c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a6 	beq.w	8001a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b82      	ldr	r3, [pc, #520]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7e      	ldr	r2, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190a:	f7ff fb81 	bl	8001010 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff fb7d 	bl	8001010 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e103      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x312>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	e02d      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x334>
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a69      	ldr	r2, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a66      	ldr	r2, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x356>
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb31 	bl	8001010 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb2d 	bl	8001010 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0b1      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x37e>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb1b 	bl	8001010 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fb17 	bl	8001010 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e09b      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d061      	beq.n	8001aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d146      	bne.n	8001abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff faeb 	bl	8001010 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fae7 	bl	8001010 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e06d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4921      	ldr	r1, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a19      	ldr	r1, [r3, #32]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	491b      	ldr	r1, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fabb 	bl	8001010 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fab7 	bl	8001010 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46a>
 8001abc:	e035      	b.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff faa4 	bl	8001010 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff faa0 	bl	8001010 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e026      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x498>
 8001aea:	e01e      	b.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e019      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40007000 	.word	0x40007000
 8001b00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x500>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0d0      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d910      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4965      	ldr	r1, [pc, #404]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d040      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d115      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e073      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06b      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4936      	ldr	r1, [pc, #216]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7ff f9f2 	bl	8001010 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f9ee 	bl	8001010 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e053      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d210      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f821 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	490a      	ldr	r1, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f950 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800309c 	.word	0x0800309c
 8001d04:	20000004 	.word	0x20000004
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x30>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x36>
 8001d3a:	e027      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3e:	613b      	str	r3, [r7, #16]
      break;
 8001d40:	e027      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d010      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0c5b      	lsrs	r3, r3, #17
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e004      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	693b      	ldr	r3, [r7, #16]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	080030b4 	.word	0x080030b4
 8001dac:	080030c4 	.word	0x080030c4
 8001db0:	003d0900 	.word	0x003d0900

08001db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	080030ac 	.word	0x080030ac

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	080030ac 	.word	0x080030ac

08001e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <RCC_Delay+0x34>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <RCC_Delay+0x38>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a5b      	lsrs	r3, r3, #9
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e34:	bf00      	nop
  }
  while (Delay --);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	60fa      	str	r2, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f9      	bne.n	8001e34 <RCC_Delay+0x1c>
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e042      	b.n	8001eec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f80c 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f91d 	bl	80020d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d16d      	bne.n	8001ff0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_UART_Transmit+0x2c>
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e066      	b.n	8001ff2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f32:	f7ff f86d 	bl	8001010 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d108      	bne.n	8001f60 <HAL_UART_Transmit+0x6c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e003      	b.n	8001f68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f68:	e02a      	b.n	8001fc0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f840 	bl	8001ffa <UART_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e036      	b.n	8001ff2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	e007      	b.n	8001fb2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1cf      	bne.n	8001f6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f810 	bl	8001ffa <UART_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b090      	sub	sp, #64	; 0x40
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800200a:	e050      	b.n	80020ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d04c      	beq.n	80020ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <UART_WaitOnFlagUntilTimeout+0x30>
 800201a:	f7fe fff9 	bl	8001010 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002026:	429a      	cmp	r2, r3
 8002028:	d241      	bcs.n	80020ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204a:	637a      	str	r2, [r7, #52]	; 0x34
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002052:	e841 2300 	strex	r3, r2, [r1]
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e5      	bne.n	800202a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3314      	adds	r3, #20
 8002064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	e853 3f00 	ldrex	r3, [r3]
 800206c:	613b      	str	r3, [r7, #16]
   return(result);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3314      	adds	r3, #20
 800207c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800207e:	623a      	str	r2, [r7, #32]
 8002080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002082:	69f9      	ldr	r1, [r7, #28]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	e841 2300 	strex	r3, r2, [r1]
 800208a:	61bb      	str	r3, [r7, #24]
   return(result);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e5      	bne.n	800205e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e00f      	b.n	80020ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4013      	ands	r3, r2
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d09f      	beq.n	800200c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3740      	adds	r7, #64	; 0x40
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002112:	f023 030c 	bic.w	r3, r3, #12
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <UART_SetConfig+0x114>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002140:	f7ff fe56 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	e002      	b.n	800214e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002148:	f7ff fe3e 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 800214c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <UART_SetConfig+0x118>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	0119      	lsls	r1, r3, #4
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <UART_SetConfig+0x118>)
 8002186:	fba3 0302 	umull	r0, r3, r3, r2
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2064      	movs	r0, #100	; 0x64
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	3332      	adds	r3, #50	; 0x32
 8002198:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <UART_SetConfig+0x118>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	4419      	add	r1, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <UART_SetConfig+0x118>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	3332      	adds	r3, #50	; 0x32
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <UART_SetConfig+0x118>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	440a      	add	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013800 	.word	0x40013800
 80021f0:	51eb851f 	.word	0x51eb851f

080021f4 <std>:
 80021f4:	2300      	movs	r3, #0
 80021f6:	b510      	push	{r4, lr}
 80021f8:	4604      	mov	r4, r0
 80021fa:	e9c0 3300 	strd	r3, r3, [r0]
 80021fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002202:	6083      	str	r3, [r0, #8]
 8002204:	8181      	strh	r1, [r0, #12]
 8002206:	6643      	str	r3, [r0, #100]	; 0x64
 8002208:	81c2      	strh	r2, [r0, #14]
 800220a:	6183      	str	r3, [r0, #24]
 800220c:	4619      	mov	r1, r3
 800220e:	2208      	movs	r2, #8
 8002210:	305c      	adds	r0, #92	; 0x5c
 8002212:	f000 f906 	bl	8002422 <memset>
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <std+0x58>)
 8002218:	6224      	str	r4, [r4, #32]
 800221a:	6263      	str	r3, [r4, #36]	; 0x24
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <std+0x5c>)
 800221e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <std+0x60>)
 8002222:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <std+0x64>)
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <std+0x68>)
 800222a:	429c      	cmp	r4, r3
 800222c:	d006      	beq.n	800223c <std+0x48>
 800222e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002232:	4294      	cmp	r4, r2
 8002234:	d002      	beq.n	800223c <std+0x48>
 8002236:	33d0      	adds	r3, #208	; 0xd0
 8002238:	429c      	cmp	r4, r3
 800223a:	d105      	bne.n	8002248 <std+0x54>
 800223c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002244:	f000 b966 	b.w	8002514 <__retarget_lock_init_recursive>
 8002248:	bd10      	pop	{r4, pc}
 800224a:	bf00      	nop
 800224c:	0800239d 	.word	0x0800239d
 8002250:	080023bf 	.word	0x080023bf
 8002254:	080023f7 	.word	0x080023f7
 8002258:	0800241b 	.word	0x0800241b
 800225c:	200000d8 	.word	0x200000d8

08002260 <stdio_exit_handler>:
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <stdio_exit_handler+0xc>)
 8002262:	4903      	ldr	r1, [pc, #12]	; (8002270 <stdio_exit_handler+0x10>)
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <stdio_exit_handler+0x14>)
 8002266:	f000 b869 	b.w	800233c <_fwalk_sglue>
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010
 8002270:	08002db5 	.word	0x08002db5
 8002274:	2000001c 	.word	0x2000001c

08002278 <cleanup_stdio>:
 8002278:	6841      	ldr	r1, [r0, #4]
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <cleanup_stdio+0x34>)
 800227c:	b510      	push	{r4, lr}
 800227e:	4299      	cmp	r1, r3
 8002280:	4604      	mov	r4, r0
 8002282:	d001      	beq.n	8002288 <cleanup_stdio+0x10>
 8002284:	f000 fd96 	bl	8002db4 <_fflush_r>
 8002288:	68a1      	ldr	r1, [r4, #8]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <cleanup_stdio+0x38>)
 800228c:	4299      	cmp	r1, r3
 800228e:	d002      	beq.n	8002296 <cleanup_stdio+0x1e>
 8002290:	4620      	mov	r0, r4
 8002292:	f000 fd8f 	bl	8002db4 <_fflush_r>
 8002296:	68e1      	ldr	r1, [r4, #12]
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <cleanup_stdio+0x3c>)
 800229a:	4299      	cmp	r1, r3
 800229c:	d004      	beq.n	80022a8 <cleanup_stdio+0x30>
 800229e:	4620      	mov	r0, r4
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a4:	f000 bd86 	b.w	8002db4 <_fflush_r>
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	bf00      	nop
 80022ac:	200000d8 	.word	0x200000d8
 80022b0:	20000140 	.word	0x20000140
 80022b4:	200001a8 	.word	0x200001a8

080022b8 <global_stdio_init.part.0>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <global_stdio_init.part.0+0x30>)
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <global_stdio_init.part.0+0x34>)
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <global_stdio_init.part.0+0x38>)
 80022c0:	4620      	mov	r0, r4
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	2104      	movs	r1, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	f7ff ff94 	bl	80021f4 <std>
 80022cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80022d0:	2201      	movs	r2, #1
 80022d2:	2109      	movs	r1, #9
 80022d4:	f7ff ff8e 	bl	80021f4 <std>
 80022d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80022dc:	2202      	movs	r2, #2
 80022de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022e2:	2112      	movs	r1, #18
 80022e4:	f7ff bf86 	b.w	80021f4 <std>
 80022e8:	20000210 	.word	0x20000210
 80022ec:	200000d8 	.word	0x200000d8
 80022f0:	08002261 	.word	0x08002261

080022f4 <__sfp_lock_acquire>:
 80022f4:	4801      	ldr	r0, [pc, #4]	; (80022fc <__sfp_lock_acquire+0x8>)
 80022f6:	f000 b90e 	b.w	8002516 <__retarget_lock_acquire_recursive>
 80022fa:	bf00      	nop
 80022fc:	20000219 	.word	0x20000219

08002300 <__sfp_lock_release>:
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <__sfp_lock_release+0x8>)
 8002302:	f000 b909 	b.w	8002518 <__retarget_lock_release_recursive>
 8002306:	bf00      	nop
 8002308:	20000219 	.word	0x20000219

0800230c <__sinit>:
 800230c:	b510      	push	{r4, lr}
 800230e:	4604      	mov	r4, r0
 8002310:	f7ff fff0 	bl	80022f4 <__sfp_lock_acquire>
 8002314:	6a23      	ldr	r3, [r4, #32]
 8002316:	b11b      	cbz	r3, 8002320 <__sinit+0x14>
 8002318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800231c:	f7ff bff0 	b.w	8002300 <__sfp_lock_release>
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__sinit+0x28>)
 8002322:	6223      	str	r3, [r4, #32]
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__sinit+0x2c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f5      	bne.n	8002318 <__sinit+0xc>
 800232c:	f7ff ffc4 	bl	80022b8 <global_stdio_init.part.0>
 8002330:	e7f2      	b.n	8002318 <__sinit+0xc>
 8002332:	bf00      	nop
 8002334:	08002279 	.word	0x08002279
 8002338:	20000210 	.word	0x20000210

0800233c <_fwalk_sglue>:
 800233c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002340:	4607      	mov	r7, r0
 8002342:	4688      	mov	r8, r1
 8002344:	4614      	mov	r4, r2
 8002346:	2600      	movs	r6, #0
 8002348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800234c:	f1b9 0901 	subs.w	r9, r9, #1
 8002350:	d505      	bpl.n	800235e <_fwalk_sglue+0x22>
 8002352:	6824      	ldr	r4, [r4, #0]
 8002354:	2c00      	cmp	r4, #0
 8002356:	d1f7      	bne.n	8002348 <_fwalk_sglue+0xc>
 8002358:	4630      	mov	r0, r6
 800235a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800235e:	89ab      	ldrh	r3, [r5, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d907      	bls.n	8002374 <_fwalk_sglue+0x38>
 8002364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002368:	3301      	adds	r3, #1
 800236a:	d003      	beq.n	8002374 <_fwalk_sglue+0x38>
 800236c:	4629      	mov	r1, r5
 800236e:	4638      	mov	r0, r7
 8002370:	47c0      	blx	r8
 8002372:	4306      	orrs	r6, r0
 8002374:	3568      	adds	r5, #104	; 0x68
 8002376:	e7e9      	b.n	800234c <_fwalk_sglue+0x10>

08002378 <iprintf>:
 8002378:	b40f      	push	{r0, r1, r2, r3}
 800237a:	b507      	push	{r0, r1, r2, lr}
 800237c:	4906      	ldr	r1, [pc, #24]	; (8002398 <iprintf+0x20>)
 800237e:	ab04      	add	r3, sp, #16
 8002380:	6808      	ldr	r0, [r1, #0]
 8002382:	f853 2b04 	ldr.w	r2, [r3], #4
 8002386:	6881      	ldr	r1, [r0, #8]
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f000 f9e3 	bl	8002754 <_vfiprintf_r>
 800238e:	b003      	add	sp, #12
 8002390:	f85d eb04 	ldr.w	lr, [sp], #4
 8002394:	b004      	add	sp, #16
 8002396:	4770      	bx	lr
 8002398:	20000068 	.word	0x20000068

0800239c <__sread>:
 800239c:	b510      	push	{r4, lr}
 800239e:	460c      	mov	r4, r1
 80023a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a4:	f000 f868 	bl	8002478 <_read_r>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	bfab      	itete	ge
 80023ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023ae:	89a3      	ldrhlt	r3, [r4, #12]
 80023b0:	181b      	addge	r3, r3, r0
 80023b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023b6:	bfac      	ite	ge
 80023b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80023ba:	81a3      	strhlt	r3, [r4, #12]
 80023bc:	bd10      	pop	{r4, pc}

080023be <__swrite>:
 80023be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023c2:	461f      	mov	r7, r3
 80023c4:	898b      	ldrh	r3, [r1, #12]
 80023c6:	4605      	mov	r5, r0
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	460c      	mov	r4, r1
 80023cc:	4616      	mov	r6, r2
 80023ce:	d505      	bpl.n	80023dc <__swrite+0x1e>
 80023d0:	2302      	movs	r3, #2
 80023d2:	2200      	movs	r2, #0
 80023d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d8:	f000 f83c 	bl	8002454 <_lseek_r>
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	4632      	mov	r2, r6
 80023e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	4628      	mov	r0, r5
 80023e8:	463b      	mov	r3, r7
 80023ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023f2:	f000 b853 	b.w	800249c <_write_r>

080023f6 <__sseek>:
 80023f6:	b510      	push	{r4, lr}
 80023f8:	460c      	mov	r4, r1
 80023fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023fe:	f000 f829 	bl	8002454 <_lseek_r>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	89a3      	ldrh	r3, [r4, #12]
 8002406:	bf15      	itete	ne
 8002408:	6560      	strne	r0, [r4, #84]	; 0x54
 800240a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800240e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002412:	81a3      	strheq	r3, [r4, #12]
 8002414:	bf18      	it	ne
 8002416:	81a3      	strhne	r3, [r4, #12]
 8002418:	bd10      	pop	{r4, pc}

0800241a <__sclose>:
 800241a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800241e:	f000 b809 	b.w	8002434 <_close_r>

08002422 <memset>:
 8002422:	4603      	mov	r3, r0
 8002424:	4402      	add	r2, r0
 8002426:	4293      	cmp	r3, r2
 8002428:	d100      	bne.n	800242c <memset+0xa>
 800242a:	4770      	bx	lr
 800242c:	f803 1b01 	strb.w	r1, [r3], #1
 8002430:	e7f9      	b.n	8002426 <memset+0x4>
	...

08002434 <_close_r>:
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	2300      	movs	r3, #0
 8002438:	4d05      	ldr	r5, [pc, #20]	; (8002450 <_close_r+0x1c>)
 800243a:	4604      	mov	r4, r0
 800243c:	4608      	mov	r0, r1
 800243e:	602b      	str	r3, [r5, #0]
 8002440:	f7fe fc94 	bl	8000d6c <_close>
 8002444:	1c43      	adds	r3, r0, #1
 8002446:	d102      	bne.n	800244e <_close_r+0x1a>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	b103      	cbz	r3, 800244e <_close_r+0x1a>
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	bd38      	pop	{r3, r4, r5, pc}
 8002450:	20000214 	.word	0x20000214

08002454 <_lseek_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4604      	mov	r4, r0
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	2200      	movs	r2, #0
 800245e:	4d05      	ldr	r5, [pc, #20]	; (8002474 <_lseek_r+0x20>)
 8002460:	602a      	str	r2, [r5, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f7fe fca6 	bl	8000db4 <_lseek>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_lseek_r+0x1e>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_lseek_r+0x1e>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	20000214 	.word	0x20000214

08002478 <_read_r>:
 8002478:	b538      	push	{r3, r4, r5, lr}
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	2200      	movs	r2, #0
 8002482:	4d05      	ldr	r5, [pc, #20]	; (8002498 <_read_r+0x20>)
 8002484:	602a      	str	r2, [r5, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	f7fe fc37 	bl	8000cfa <_read>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	d102      	bne.n	8002496 <_read_r+0x1e>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	b103      	cbz	r3, 8002496 <_read_r+0x1e>
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	20000214 	.word	0x20000214

0800249c <_write_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	2200      	movs	r2, #0
 80024a6:	4d05      	ldr	r5, [pc, #20]	; (80024bc <_write_r+0x20>)
 80024a8:	602a      	str	r2, [r5, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7fe fc42 	bl	8000d34 <_write>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_write_r+0x1e>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_write_r+0x1e>
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	20000214 	.word	0x20000214

080024c0 <__errno>:
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <__errno+0x8>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000068 	.word	0x20000068

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	2600      	movs	r6, #0
 80024d0:	4d0c      	ldr	r5, [pc, #48]	; (8002504 <__libc_init_array+0x38>)
 80024d2:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	f000 fdca 	bl	8003074 <_init>
 80024e0:	2600      	movs	r6, #0
 80024e2:	4d0a      	ldr	r5, [pc, #40]	; (800250c <__libc_init_array+0x40>)
 80024e4:	4c0a      	ldr	r4, [pc, #40]	; (8002510 <__libc_init_array+0x44>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	080030fc 	.word	0x080030fc
 8002508:	080030fc 	.word	0x080030fc
 800250c:	080030fc 	.word	0x080030fc
 8002510:	08003100 	.word	0x08003100

08002514 <__retarget_lock_init_recursive>:
 8002514:	4770      	bx	lr

08002516 <__retarget_lock_acquire_recursive>:
 8002516:	4770      	bx	lr

08002518 <__retarget_lock_release_recursive>:
 8002518:	4770      	bx	lr
	...

0800251c <_free_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4605      	mov	r5, r0
 8002520:	2900      	cmp	r1, #0
 8002522:	d040      	beq.n	80025a6 <_free_r+0x8a>
 8002524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002528:	1f0c      	subs	r4, r1, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	bfb8      	it	lt
 800252e:	18e4      	addlt	r4, r4, r3
 8002530:	f000 f8dc 	bl	80026ec <__malloc_lock>
 8002534:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <_free_r+0x8c>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	b933      	cbnz	r3, 8002548 <_free_r+0x2c>
 800253a:	6063      	str	r3, [r4, #4]
 800253c:	6014      	str	r4, [r2, #0]
 800253e:	4628      	mov	r0, r5
 8002540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002544:	f000 b8d8 	b.w	80026f8 <__malloc_unlock>
 8002548:	42a3      	cmp	r3, r4
 800254a:	d908      	bls.n	800255e <_free_r+0x42>
 800254c:	6820      	ldr	r0, [r4, #0]
 800254e:	1821      	adds	r1, r4, r0
 8002550:	428b      	cmp	r3, r1
 8002552:	bf01      	itttt	eq
 8002554:	6819      	ldreq	r1, [r3, #0]
 8002556:	685b      	ldreq	r3, [r3, #4]
 8002558:	1809      	addeq	r1, r1, r0
 800255a:	6021      	streq	r1, [r4, #0]
 800255c:	e7ed      	b.n	800253a <_free_r+0x1e>
 800255e:	461a      	mov	r2, r3
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	b10b      	cbz	r3, 8002568 <_free_r+0x4c>
 8002564:	42a3      	cmp	r3, r4
 8002566:	d9fa      	bls.n	800255e <_free_r+0x42>
 8002568:	6811      	ldr	r1, [r2, #0]
 800256a:	1850      	adds	r0, r2, r1
 800256c:	42a0      	cmp	r0, r4
 800256e:	d10b      	bne.n	8002588 <_free_r+0x6c>
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	4401      	add	r1, r0
 8002574:	1850      	adds	r0, r2, r1
 8002576:	4283      	cmp	r3, r0
 8002578:	6011      	str	r1, [r2, #0]
 800257a:	d1e0      	bne.n	800253e <_free_r+0x22>
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4408      	add	r0, r1
 8002582:	6010      	str	r0, [r2, #0]
 8002584:	6053      	str	r3, [r2, #4]
 8002586:	e7da      	b.n	800253e <_free_r+0x22>
 8002588:	d902      	bls.n	8002590 <_free_r+0x74>
 800258a:	230c      	movs	r3, #12
 800258c:	602b      	str	r3, [r5, #0]
 800258e:	e7d6      	b.n	800253e <_free_r+0x22>
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	1821      	adds	r1, r4, r0
 8002594:	428b      	cmp	r3, r1
 8002596:	bf01      	itttt	eq
 8002598:	6819      	ldreq	r1, [r3, #0]
 800259a:	685b      	ldreq	r3, [r3, #4]
 800259c:	1809      	addeq	r1, r1, r0
 800259e:	6021      	streq	r1, [r4, #0]
 80025a0:	6063      	str	r3, [r4, #4]
 80025a2:	6054      	str	r4, [r2, #4]
 80025a4:	e7cb      	b.n	800253e <_free_r+0x22>
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	2000021c 	.word	0x2000021c

080025ac <sbrk_aligned>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	4e0e      	ldr	r6, [pc, #56]	; (80025e8 <sbrk_aligned+0x3c>)
 80025b0:	460c      	mov	r4, r1
 80025b2:	6831      	ldr	r1, [r6, #0]
 80025b4:	4605      	mov	r5, r0
 80025b6:	b911      	cbnz	r1, 80025be <sbrk_aligned+0x12>
 80025b8:	f000 fcba 	bl	8002f30 <_sbrk_r>
 80025bc:	6030      	str	r0, [r6, #0]
 80025be:	4621      	mov	r1, r4
 80025c0:	4628      	mov	r0, r5
 80025c2:	f000 fcb5 	bl	8002f30 <_sbrk_r>
 80025c6:	1c43      	adds	r3, r0, #1
 80025c8:	d00a      	beq.n	80025e0 <sbrk_aligned+0x34>
 80025ca:	1cc4      	adds	r4, r0, #3
 80025cc:	f024 0403 	bic.w	r4, r4, #3
 80025d0:	42a0      	cmp	r0, r4
 80025d2:	d007      	beq.n	80025e4 <sbrk_aligned+0x38>
 80025d4:	1a21      	subs	r1, r4, r0
 80025d6:	4628      	mov	r0, r5
 80025d8:	f000 fcaa 	bl	8002f30 <_sbrk_r>
 80025dc:	3001      	adds	r0, #1
 80025de:	d101      	bne.n	80025e4 <sbrk_aligned+0x38>
 80025e0:	f04f 34ff 	mov.w	r4, #4294967295
 80025e4:	4620      	mov	r0, r4
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	20000220 	.word	0x20000220

080025ec <_malloc_r>:
 80025ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025f0:	1ccd      	adds	r5, r1, #3
 80025f2:	f025 0503 	bic.w	r5, r5, #3
 80025f6:	3508      	adds	r5, #8
 80025f8:	2d0c      	cmp	r5, #12
 80025fa:	bf38      	it	cc
 80025fc:	250c      	movcc	r5, #12
 80025fe:	2d00      	cmp	r5, #0
 8002600:	4607      	mov	r7, r0
 8002602:	db01      	blt.n	8002608 <_malloc_r+0x1c>
 8002604:	42a9      	cmp	r1, r5
 8002606:	d905      	bls.n	8002614 <_malloc_r+0x28>
 8002608:	230c      	movs	r3, #12
 800260a:	2600      	movs	r6, #0
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4630      	mov	r0, r6
 8002610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026e8 <_malloc_r+0xfc>
 8002618:	f000 f868 	bl	80026ec <__malloc_lock>
 800261c:	f8d8 3000 	ldr.w	r3, [r8]
 8002620:	461c      	mov	r4, r3
 8002622:	bb5c      	cbnz	r4, 800267c <_malloc_r+0x90>
 8002624:	4629      	mov	r1, r5
 8002626:	4638      	mov	r0, r7
 8002628:	f7ff ffc0 	bl	80025ac <sbrk_aligned>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	4604      	mov	r4, r0
 8002630:	d155      	bne.n	80026de <_malloc_r+0xf2>
 8002632:	f8d8 4000 	ldr.w	r4, [r8]
 8002636:	4626      	mov	r6, r4
 8002638:	2e00      	cmp	r6, #0
 800263a:	d145      	bne.n	80026c8 <_malloc_r+0xdc>
 800263c:	2c00      	cmp	r4, #0
 800263e:	d048      	beq.n	80026d2 <_malloc_r+0xe6>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	4631      	mov	r1, r6
 8002644:	4638      	mov	r0, r7
 8002646:	eb04 0903 	add.w	r9, r4, r3
 800264a:	f000 fc71 	bl	8002f30 <_sbrk_r>
 800264e:	4581      	cmp	r9, r0
 8002650:	d13f      	bne.n	80026d2 <_malloc_r+0xe6>
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	4638      	mov	r0, r7
 8002656:	1a6d      	subs	r5, r5, r1
 8002658:	4629      	mov	r1, r5
 800265a:	f7ff ffa7 	bl	80025ac <sbrk_aligned>
 800265e:	3001      	adds	r0, #1
 8002660:	d037      	beq.n	80026d2 <_malloc_r+0xe6>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	442b      	add	r3, r5
 8002666:	6023      	str	r3, [r4, #0]
 8002668:	f8d8 3000 	ldr.w	r3, [r8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d038      	beq.n	80026e2 <_malloc_r+0xf6>
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	42a2      	cmp	r2, r4
 8002674:	d12b      	bne.n	80026ce <_malloc_r+0xe2>
 8002676:	2200      	movs	r2, #0
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e00f      	b.n	800269c <_malloc_r+0xb0>
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	1b52      	subs	r2, r2, r5
 8002680:	d41f      	bmi.n	80026c2 <_malloc_r+0xd6>
 8002682:	2a0b      	cmp	r2, #11
 8002684:	d917      	bls.n	80026b6 <_malloc_r+0xca>
 8002686:	1961      	adds	r1, r4, r5
 8002688:	42a3      	cmp	r3, r4
 800268a:	6025      	str	r5, [r4, #0]
 800268c:	bf18      	it	ne
 800268e:	6059      	strne	r1, [r3, #4]
 8002690:	6863      	ldr	r3, [r4, #4]
 8002692:	bf08      	it	eq
 8002694:	f8c8 1000 	streq.w	r1, [r8]
 8002698:	5162      	str	r2, [r4, r5]
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	4638      	mov	r0, r7
 800269e:	f104 060b 	add.w	r6, r4, #11
 80026a2:	f000 f829 	bl	80026f8 <__malloc_unlock>
 80026a6:	f026 0607 	bic.w	r6, r6, #7
 80026aa:	1d23      	adds	r3, r4, #4
 80026ac:	1af2      	subs	r2, r6, r3
 80026ae:	d0ae      	beq.n	800260e <_malloc_r+0x22>
 80026b0:	1b9b      	subs	r3, r3, r6
 80026b2:	50a3      	str	r3, [r4, r2]
 80026b4:	e7ab      	b.n	800260e <_malloc_r+0x22>
 80026b6:	42a3      	cmp	r3, r4
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	d1dd      	bne.n	8002678 <_malloc_r+0x8c>
 80026bc:	f8c8 2000 	str.w	r2, [r8]
 80026c0:	e7ec      	b.n	800269c <_malloc_r+0xb0>
 80026c2:	4623      	mov	r3, r4
 80026c4:	6864      	ldr	r4, [r4, #4]
 80026c6:	e7ac      	b.n	8002622 <_malloc_r+0x36>
 80026c8:	4634      	mov	r4, r6
 80026ca:	6876      	ldr	r6, [r6, #4]
 80026cc:	e7b4      	b.n	8002638 <_malloc_r+0x4c>
 80026ce:	4613      	mov	r3, r2
 80026d0:	e7cc      	b.n	800266c <_malloc_r+0x80>
 80026d2:	230c      	movs	r3, #12
 80026d4:	4638      	mov	r0, r7
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	f000 f80e 	bl	80026f8 <__malloc_unlock>
 80026dc:	e797      	b.n	800260e <_malloc_r+0x22>
 80026de:	6025      	str	r5, [r4, #0]
 80026e0:	e7dc      	b.n	800269c <_malloc_r+0xb0>
 80026e2:	605b      	str	r3, [r3, #4]
 80026e4:	deff      	udf	#255	; 0xff
 80026e6:	bf00      	nop
 80026e8:	2000021c 	.word	0x2000021c

080026ec <__malloc_lock>:
 80026ec:	4801      	ldr	r0, [pc, #4]	; (80026f4 <__malloc_lock+0x8>)
 80026ee:	f7ff bf12 	b.w	8002516 <__retarget_lock_acquire_recursive>
 80026f2:	bf00      	nop
 80026f4:	20000218 	.word	0x20000218

080026f8 <__malloc_unlock>:
 80026f8:	4801      	ldr	r0, [pc, #4]	; (8002700 <__malloc_unlock+0x8>)
 80026fa:	f7ff bf0d 	b.w	8002518 <__retarget_lock_release_recursive>
 80026fe:	bf00      	nop
 8002700:	20000218 	.word	0x20000218

08002704 <__sfputc_r>:
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	b410      	push	{r4}
 8002708:	3b01      	subs	r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	6093      	str	r3, [r2, #8]
 800270e:	da07      	bge.n	8002720 <__sfputc_r+0x1c>
 8002710:	6994      	ldr	r4, [r2, #24]
 8002712:	42a3      	cmp	r3, r4
 8002714:	db01      	blt.n	800271a <__sfputc_r+0x16>
 8002716:	290a      	cmp	r1, #10
 8002718:	d102      	bne.n	8002720 <__sfputc_r+0x1c>
 800271a:	bc10      	pop	{r4}
 800271c:	f000 bb72 	b.w	8002e04 <__swbuf_r>
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	1c58      	adds	r0, r3, #1
 8002724:	6010      	str	r0, [r2, #0]
 8002726:	7019      	strb	r1, [r3, #0]
 8002728:	4608      	mov	r0, r1
 800272a:	bc10      	pop	{r4}
 800272c:	4770      	bx	lr

0800272e <__sfputs_r>:
 800272e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002730:	4606      	mov	r6, r0
 8002732:	460f      	mov	r7, r1
 8002734:	4614      	mov	r4, r2
 8002736:	18d5      	adds	r5, r2, r3
 8002738:	42ac      	cmp	r4, r5
 800273a:	d101      	bne.n	8002740 <__sfputs_r+0x12>
 800273c:	2000      	movs	r0, #0
 800273e:	e007      	b.n	8002750 <__sfputs_r+0x22>
 8002740:	463a      	mov	r2, r7
 8002742:	4630      	mov	r0, r6
 8002744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002748:	f7ff ffdc 	bl	8002704 <__sfputc_r>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d1f3      	bne.n	8002738 <__sfputs_r+0xa>
 8002750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002754 <_vfiprintf_r>:
 8002754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002758:	460d      	mov	r5, r1
 800275a:	4614      	mov	r4, r2
 800275c:	4698      	mov	r8, r3
 800275e:	4606      	mov	r6, r0
 8002760:	b09d      	sub	sp, #116	; 0x74
 8002762:	b118      	cbz	r0, 800276c <_vfiprintf_r+0x18>
 8002764:	6a03      	ldr	r3, [r0, #32]
 8002766:	b90b      	cbnz	r3, 800276c <_vfiprintf_r+0x18>
 8002768:	f7ff fdd0 	bl	800230c <__sinit>
 800276c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800276e:	07d9      	lsls	r1, r3, #31
 8002770:	d405      	bmi.n	800277e <_vfiprintf_r+0x2a>
 8002772:	89ab      	ldrh	r3, [r5, #12]
 8002774:	059a      	lsls	r2, r3, #22
 8002776:	d402      	bmi.n	800277e <_vfiprintf_r+0x2a>
 8002778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800277a:	f7ff fecc 	bl	8002516 <__retarget_lock_acquire_recursive>
 800277e:	89ab      	ldrh	r3, [r5, #12]
 8002780:	071b      	lsls	r3, r3, #28
 8002782:	d501      	bpl.n	8002788 <_vfiprintf_r+0x34>
 8002784:	692b      	ldr	r3, [r5, #16]
 8002786:	b99b      	cbnz	r3, 80027b0 <_vfiprintf_r+0x5c>
 8002788:	4629      	mov	r1, r5
 800278a:	4630      	mov	r0, r6
 800278c:	f000 fb78 	bl	8002e80 <__swsetup_r>
 8002790:	b170      	cbz	r0, 80027b0 <_vfiprintf_r+0x5c>
 8002792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002794:	07dc      	lsls	r4, r3, #31
 8002796:	d504      	bpl.n	80027a2 <_vfiprintf_r+0x4e>
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	b01d      	add	sp, #116	; 0x74
 800279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a2:	89ab      	ldrh	r3, [r5, #12]
 80027a4:	0598      	lsls	r0, r3, #22
 80027a6:	d4f7      	bmi.n	8002798 <_vfiprintf_r+0x44>
 80027a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027aa:	f7ff feb5 	bl	8002518 <__retarget_lock_release_recursive>
 80027ae:	e7f3      	b.n	8002798 <_vfiprintf_r+0x44>
 80027b0:	2300      	movs	r3, #0
 80027b2:	9309      	str	r3, [sp, #36]	; 0x24
 80027b4:	2320      	movs	r3, #32
 80027b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ba:	2330      	movs	r3, #48	; 0x30
 80027bc:	f04f 0901 	mov.w	r9, #1
 80027c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80027c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002974 <_vfiprintf_r+0x220>
 80027c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027cc:	4623      	mov	r3, r4
 80027ce:	469a      	mov	sl, r3
 80027d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027d4:	b10a      	cbz	r2, 80027da <_vfiprintf_r+0x86>
 80027d6:	2a25      	cmp	r2, #37	; 0x25
 80027d8:	d1f9      	bne.n	80027ce <_vfiprintf_r+0x7a>
 80027da:	ebba 0b04 	subs.w	fp, sl, r4
 80027de:	d00b      	beq.n	80027f8 <_vfiprintf_r+0xa4>
 80027e0:	465b      	mov	r3, fp
 80027e2:	4622      	mov	r2, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	4630      	mov	r0, r6
 80027e8:	f7ff ffa1 	bl	800272e <__sfputs_r>
 80027ec:	3001      	adds	r0, #1
 80027ee:	f000 80a9 	beq.w	8002944 <_vfiprintf_r+0x1f0>
 80027f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027f4:	445a      	add	r2, fp
 80027f6:	9209      	str	r2, [sp, #36]	; 0x24
 80027f8:	f89a 3000 	ldrb.w	r3, [sl]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a1 	beq.w	8002944 <_vfiprintf_r+0x1f0>
 8002802:	2300      	movs	r3, #0
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800280c:	f10a 0a01 	add.w	sl, sl, #1
 8002810:	9304      	str	r3, [sp, #16]
 8002812:	9307      	str	r3, [sp, #28]
 8002814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002818:	931a      	str	r3, [sp, #104]	; 0x68
 800281a:	4654      	mov	r4, sl
 800281c:	2205      	movs	r2, #5
 800281e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002822:	4854      	ldr	r0, [pc, #336]	; (8002974 <_vfiprintf_r+0x220>)
 8002824:	f000 fb94 	bl	8002f50 <memchr>
 8002828:	9a04      	ldr	r2, [sp, #16]
 800282a:	b9d8      	cbnz	r0, 8002864 <_vfiprintf_r+0x110>
 800282c:	06d1      	lsls	r1, r2, #27
 800282e:	bf44      	itt	mi
 8002830:	2320      	movmi	r3, #32
 8002832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002836:	0713      	lsls	r3, r2, #28
 8002838:	bf44      	itt	mi
 800283a:	232b      	movmi	r3, #43	; 0x2b
 800283c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002840:	f89a 3000 	ldrb.w	r3, [sl]
 8002844:	2b2a      	cmp	r3, #42	; 0x2a
 8002846:	d015      	beq.n	8002874 <_vfiprintf_r+0x120>
 8002848:	4654      	mov	r4, sl
 800284a:	2000      	movs	r0, #0
 800284c:	f04f 0c0a 	mov.w	ip, #10
 8002850:	9a07      	ldr	r2, [sp, #28]
 8002852:	4621      	mov	r1, r4
 8002854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002858:	3b30      	subs	r3, #48	; 0x30
 800285a:	2b09      	cmp	r3, #9
 800285c:	d94d      	bls.n	80028fa <_vfiprintf_r+0x1a6>
 800285e:	b1b0      	cbz	r0, 800288e <_vfiprintf_r+0x13a>
 8002860:	9207      	str	r2, [sp, #28]
 8002862:	e014      	b.n	800288e <_vfiprintf_r+0x13a>
 8002864:	eba0 0308 	sub.w	r3, r0, r8
 8002868:	fa09 f303 	lsl.w	r3, r9, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	46a2      	mov	sl, r4
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	e7d2      	b.n	800281a <_vfiprintf_r+0xc6>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	1d19      	adds	r1, r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	9103      	str	r1, [sp, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bfbb      	ittet	lt
 8002880:	425b      	neglt	r3, r3
 8002882:	f042 0202 	orrlt.w	r2, r2, #2
 8002886:	9307      	strge	r3, [sp, #28]
 8002888:	9307      	strlt	r3, [sp, #28]
 800288a:	bfb8      	it	lt
 800288c:	9204      	strlt	r2, [sp, #16]
 800288e:	7823      	ldrb	r3, [r4, #0]
 8002890:	2b2e      	cmp	r3, #46	; 0x2e
 8002892:	d10c      	bne.n	80028ae <_vfiprintf_r+0x15a>
 8002894:	7863      	ldrb	r3, [r4, #1]
 8002896:	2b2a      	cmp	r3, #42	; 0x2a
 8002898:	d134      	bne.n	8002904 <_vfiprintf_r+0x1b0>
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	3402      	adds	r4, #2
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	9203      	str	r2, [sp, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bfb8      	it	lt
 80028a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ac:	9305      	str	r3, [sp, #20]
 80028ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002978 <_vfiprintf_r+0x224>
 80028b2:	2203      	movs	r2, #3
 80028b4:	4650      	mov	r0, sl
 80028b6:	7821      	ldrb	r1, [r4, #0]
 80028b8:	f000 fb4a 	bl	8002f50 <memchr>
 80028bc:	b138      	cbz	r0, 80028ce <_vfiprintf_r+0x17a>
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	9b04      	ldr	r3, [sp, #16]
 80028c2:	eba0 000a 	sub.w	r0, r0, sl
 80028c6:	4082      	lsls	r2, r0
 80028c8:	4313      	orrs	r3, r2
 80028ca:	3401      	adds	r4, #1
 80028cc:	9304      	str	r3, [sp, #16]
 80028ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d2:	2206      	movs	r2, #6
 80028d4:	4829      	ldr	r0, [pc, #164]	; (800297c <_vfiprintf_r+0x228>)
 80028d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028da:	f000 fb39 	bl	8002f50 <memchr>
 80028de:	2800      	cmp	r0, #0
 80028e0:	d03f      	beq.n	8002962 <_vfiprintf_r+0x20e>
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <_vfiprintf_r+0x22c>)
 80028e4:	bb1b      	cbnz	r3, 800292e <_vfiprintf_r+0x1da>
 80028e6:	9b03      	ldr	r3, [sp, #12]
 80028e8:	3307      	adds	r3, #7
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	3308      	adds	r3, #8
 80028f0:	9303      	str	r3, [sp, #12]
 80028f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f4:	443b      	add	r3, r7
 80028f6:	9309      	str	r3, [sp, #36]	; 0x24
 80028f8:	e768      	b.n	80027cc <_vfiprintf_r+0x78>
 80028fa:	460c      	mov	r4, r1
 80028fc:	2001      	movs	r0, #1
 80028fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002902:	e7a6      	b.n	8002852 <_vfiprintf_r+0xfe>
 8002904:	2300      	movs	r3, #0
 8002906:	f04f 0c0a 	mov.w	ip, #10
 800290a:	4619      	mov	r1, r3
 800290c:	3401      	adds	r4, #1
 800290e:	9305      	str	r3, [sp, #20]
 8002910:	4620      	mov	r0, r4
 8002912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002916:	3a30      	subs	r2, #48	; 0x30
 8002918:	2a09      	cmp	r2, #9
 800291a:	d903      	bls.n	8002924 <_vfiprintf_r+0x1d0>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0c6      	beq.n	80028ae <_vfiprintf_r+0x15a>
 8002920:	9105      	str	r1, [sp, #20]
 8002922:	e7c4      	b.n	80028ae <_vfiprintf_r+0x15a>
 8002924:	4604      	mov	r4, r0
 8002926:	2301      	movs	r3, #1
 8002928:	fb0c 2101 	mla	r1, ip, r1, r2
 800292c:	e7f0      	b.n	8002910 <_vfiprintf_r+0x1bc>
 800292e:	ab03      	add	r3, sp, #12
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	462a      	mov	r2, r5
 8002934:	4630      	mov	r0, r6
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <_vfiprintf_r+0x230>)
 8002938:	a904      	add	r1, sp, #16
 800293a:	f3af 8000 	nop.w
 800293e:	4607      	mov	r7, r0
 8002940:	1c78      	adds	r0, r7, #1
 8002942:	d1d6      	bne.n	80028f2 <_vfiprintf_r+0x19e>
 8002944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002946:	07d9      	lsls	r1, r3, #31
 8002948:	d405      	bmi.n	8002956 <_vfiprintf_r+0x202>
 800294a:	89ab      	ldrh	r3, [r5, #12]
 800294c:	059a      	lsls	r2, r3, #22
 800294e:	d402      	bmi.n	8002956 <_vfiprintf_r+0x202>
 8002950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002952:	f7ff fde1 	bl	8002518 <__retarget_lock_release_recursive>
 8002956:	89ab      	ldrh	r3, [r5, #12]
 8002958:	065b      	lsls	r3, r3, #25
 800295a:	f53f af1d 	bmi.w	8002798 <_vfiprintf_r+0x44>
 800295e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002960:	e71c      	b.n	800279c <_vfiprintf_r+0x48>
 8002962:	ab03      	add	r3, sp, #12
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	462a      	mov	r2, r5
 8002968:	4630      	mov	r0, r6
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <_vfiprintf_r+0x230>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	f000 f87d 	bl	8002a6c <_printf_i>
 8002972:	e7e4      	b.n	800293e <_vfiprintf_r+0x1ea>
 8002974:	080030c6 	.word	0x080030c6
 8002978:	080030cc 	.word	0x080030cc
 800297c:	080030d0 	.word	0x080030d0
 8002980:	00000000 	.word	0x00000000
 8002984:	0800272f 	.word	0x0800272f

08002988 <_printf_common>:
 8002988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	4616      	mov	r6, r2
 800298e:	4699      	mov	r9, r3
 8002990:	688a      	ldr	r2, [r1, #8]
 8002992:	690b      	ldr	r3, [r1, #16]
 8002994:	4607      	mov	r7, r0
 8002996:	4293      	cmp	r3, r2
 8002998:	bfb8      	it	lt
 800299a:	4613      	movlt	r3, r2
 800299c:	6033      	str	r3, [r6, #0]
 800299e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029a2:	460c      	mov	r4, r1
 80029a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029a8:	b10a      	cbz	r2, 80029ae <_printf_common+0x26>
 80029aa:	3301      	adds	r3, #1
 80029ac:	6033      	str	r3, [r6, #0]
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	0699      	lsls	r1, r3, #26
 80029b2:	bf42      	ittt	mi
 80029b4:	6833      	ldrmi	r3, [r6, #0]
 80029b6:	3302      	addmi	r3, #2
 80029b8:	6033      	strmi	r3, [r6, #0]
 80029ba:	6825      	ldr	r5, [r4, #0]
 80029bc:	f015 0506 	ands.w	r5, r5, #6
 80029c0:	d106      	bne.n	80029d0 <_printf_common+0x48>
 80029c2:	f104 0a19 	add.w	sl, r4, #25
 80029c6:	68e3      	ldr	r3, [r4, #12]
 80029c8:	6832      	ldr	r2, [r6, #0]
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	42ab      	cmp	r3, r5
 80029ce:	dc2b      	bgt.n	8002a28 <_printf_common+0xa0>
 80029d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029d4:	1e13      	subs	r3, r2, #0
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	bf18      	it	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	0692      	lsls	r2, r2, #26
 80029de:	d430      	bmi.n	8002a42 <_printf_common+0xba>
 80029e0:	4649      	mov	r1, r9
 80029e2:	4638      	mov	r0, r7
 80029e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029e8:	47c0      	blx	r8
 80029ea:	3001      	adds	r0, #1
 80029ec:	d023      	beq.n	8002a36 <_printf_common+0xae>
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	6922      	ldr	r2, [r4, #16]
 80029f2:	f003 0306 	and.w	r3, r3, #6
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf14      	ite	ne
 80029fa:	2500      	movne	r5, #0
 80029fc:	6833      	ldreq	r3, [r6, #0]
 80029fe:	f04f 0600 	mov.w	r6, #0
 8002a02:	bf08      	it	eq
 8002a04:	68e5      	ldreq	r5, [r4, #12]
 8002a06:	f104 041a 	add.w	r4, r4, #26
 8002a0a:	bf08      	it	eq
 8002a0c:	1aed      	subeq	r5, r5, r3
 8002a0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a12:	bf08      	it	eq
 8002a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bfc4      	itt	gt
 8002a1c:	1a9b      	subgt	r3, r3, r2
 8002a1e:	18ed      	addgt	r5, r5, r3
 8002a20:	42b5      	cmp	r5, r6
 8002a22:	d11a      	bne.n	8002a5a <_printf_common+0xd2>
 8002a24:	2000      	movs	r0, #0
 8002a26:	e008      	b.n	8002a3a <_printf_common+0xb2>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	4652      	mov	r2, sl
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	4638      	mov	r0, r7
 8002a30:	47c0      	blx	r8
 8002a32:	3001      	adds	r0, #1
 8002a34:	d103      	bne.n	8002a3e <_printf_common+0xb6>
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3e:	3501      	adds	r5, #1
 8002a40:	e7c1      	b.n	80029c6 <_printf_common+0x3e>
 8002a42:	2030      	movs	r0, #48	; 0x30
 8002a44:	18e1      	adds	r1, r4, r3
 8002a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a50:	4422      	add	r2, r4
 8002a52:	3302      	adds	r3, #2
 8002a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a58:	e7c2      	b.n	80029e0 <_printf_common+0x58>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	4649      	mov	r1, r9
 8002a60:	4638      	mov	r0, r7
 8002a62:	47c0      	blx	r8
 8002a64:	3001      	adds	r0, #1
 8002a66:	d0e6      	beq.n	8002a36 <_printf_common+0xae>
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7d9      	b.n	8002a20 <_printf_common+0x98>

08002a6c <_printf_i>:
 8002a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a70:	7e0f      	ldrb	r7, [r1, #24]
 8002a72:	4691      	mov	r9, r2
 8002a74:	2f78      	cmp	r7, #120	; 0x78
 8002a76:	4680      	mov	r8, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a82:	d807      	bhi.n	8002a94 <_printf_i+0x28>
 8002a84:	2f62      	cmp	r7, #98	; 0x62
 8002a86:	d80a      	bhi.n	8002a9e <_printf_i+0x32>
 8002a88:	2f00      	cmp	r7, #0
 8002a8a:	f000 80d5 	beq.w	8002c38 <_printf_i+0x1cc>
 8002a8e:	2f58      	cmp	r7, #88	; 0x58
 8002a90:	f000 80c1 	beq.w	8002c16 <_printf_i+0x1aa>
 8002a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a9c:	e03a      	b.n	8002b14 <_printf_i+0xa8>
 8002a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aa2:	2b15      	cmp	r3, #21
 8002aa4:	d8f6      	bhi.n	8002a94 <_printf_i+0x28>
 8002aa6:	a101      	add	r1, pc, #4	; (adr r1, 8002aac <_printf_i+0x40>)
 8002aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aac:	08002b05 	.word	0x08002b05
 8002ab0:	08002b19 	.word	0x08002b19
 8002ab4:	08002a95 	.word	0x08002a95
 8002ab8:	08002a95 	.word	0x08002a95
 8002abc:	08002a95 	.word	0x08002a95
 8002ac0:	08002a95 	.word	0x08002a95
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002a95 	.word	0x08002a95
 8002acc:	08002a95 	.word	0x08002a95
 8002ad0:	08002a95 	.word	0x08002a95
 8002ad4:	08002a95 	.word	0x08002a95
 8002ad8:	08002c1f 	.word	0x08002c1f
 8002adc:	08002b45 	.word	0x08002b45
 8002ae0:	08002bd9 	.word	0x08002bd9
 8002ae4:	08002a95 	.word	0x08002a95
 8002ae8:	08002a95 	.word	0x08002a95
 8002aec:	08002c41 	.word	0x08002c41
 8002af0:	08002a95 	.word	0x08002a95
 8002af4:	08002b45 	.word	0x08002b45
 8002af8:	08002a95 	.word	0x08002a95
 8002afc:	08002a95 	.word	0x08002a95
 8002b00:	08002be1 	.word	0x08002be1
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	1d1a      	adds	r2, r3, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	602a      	str	r2, [r5, #0]
 8002b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0a0      	b.n	8002c5a <_printf_i+0x1ee>
 8002b18:	6820      	ldr	r0, [r4, #0]
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	0607      	lsls	r7, r0, #24
 8002b1e:	f103 0104 	add.w	r1, r3, #4
 8002b22:	6029      	str	r1, [r5, #0]
 8002b24:	d501      	bpl.n	8002b2a <_printf_i+0xbe>
 8002b26:	681e      	ldr	r6, [r3, #0]
 8002b28:	e003      	b.n	8002b32 <_printf_i+0xc6>
 8002b2a:	0646      	lsls	r6, r0, #25
 8002b2c:	d5fb      	bpl.n	8002b26 <_printf_i+0xba>
 8002b2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	da03      	bge.n	8002b3e <_printf_i+0xd2>
 8002b36:	232d      	movs	r3, #45	; 0x2d
 8002b38:	4276      	negs	r6, r6
 8002b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b3e:	230a      	movs	r3, #10
 8002b40:	4859      	ldr	r0, [pc, #356]	; (8002ca8 <_printf_i+0x23c>)
 8002b42:	e012      	b.n	8002b6a <_printf_i+0xfe>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	1d19      	adds	r1, r3, #4
 8002b4a:	6029      	str	r1, [r5, #0]
 8002b4c:	0605      	lsls	r5, r0, #24
 8002b4e:	d501      	bpl.n	8002b54 <_printf_i+0xe8>
 8002b50:	681e      	ldr	r6, [r3, #0]
 8002b52:	e002      	b.n	8002b5a <_printf_i+0xee>
 8002b54:	0641      	lsls	r1, r0, #25
 8002b56:	d5fb      	bpl.n	8002b50 <_printf_i+0xe4>
 8002b58:	881e      	ldrh	r6, [r3, #0]
 8002b5a:	2f6f      	cmp	r7, #111	; 0x6f
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2308      	moveq	r3, #8
 8002b60:	230a      	movne	r3, #10
 8002b62:	4851      	ldr	r0, [pc, #324]	; (8002ca8 <_printf_i+0x23c>)
 8002b64:	2100      	movs	r1, #0
 8002b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b6a:	6865      	ldr	r5, [r4, #4]
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	bfa8      	it	ge
 8002b70:	6821      	ldrge	r1, [r4, #0]
 8002b72:	60a5      	str	r5, [r4, #8]
 8002b74:	bfa4      	itt	ge
 8002b76:	f021 0104 	bicge.w	r1, r1, #4
 8002b7a:	6021      	strge	r1, [r4, #0]
 8002b7c:	b90e      	cbnz	r6, 8002b82 <_printf_i+0x116>
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	d04b      	beq.n	8002c1a <_printf_i+0x1ae>
 8002b82:	4615      	mov	r5, r2
 8002b84:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b88:	fb03 6711 	mls	r7, r3, r1, r6
 8002b8c:	5dc7      	ldrb	r7, [r0, r7]
 8002b8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b92:	4637      	mov	r7, r6
 8002b94:	42bb      	cmp	r3, r7
 8002b96:	460e      	mov	r6, r1
 8002b98:	d9f4      	bls.n	8002b84 <_printf_i+0x118>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d10b      	bne.n	8002bb6 <_printf_i+0x14a>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	07de      	lsls	r6, r3, #31
 8002ba2:	d508      	bpl.n	8002bb6 <_printf_i+0x14a>
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	6861      	ldr	r1, [r4, #4]
 8002ba8:	4299      	cmp	r1, r3
 8002baa:	bfde      	ittt	le
 8002bac:	2330      	movle	r3, #48	; 0x30
 8002bae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bb6:	1b52      	subs	r2, r2, r5
 8002bb8:	6122      	str	r2, [r4, #16]
 8002bba:	464b      	mov	r3, r9
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	f8cd a000 	str.w	sl, [sp]
 8002bc4:	aa03      	add	r2, sp, #12
 8002bc6:	f7ff fedf 	bl	8002988 <_printf_common>
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d14a      	bne.n	8002c64 <_printf_i+0x1f8>
 8002bce:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd2:	b004      	add	sp, #16
 8002bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f043 0320 	orr.w	r3, r3, #32
 8002bde:	6023      	str	r3, [r4, #0]
 8002be0:	2778      	movs	r7, #120	; 0x78
 8002be2:	4832      	ldr	r0, [pc, #200]	; (8002cac <_printf_i+0x240>)
 8002be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	6829      	ldr	r1, [r5, #0]
 8002bec:	061f      	lsls	r7, r3, #24
 8002bee:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bf2:	d402      	bmi.n	8002bfa <_printf_i+0x18e>
 8002bf4:	065f      	lsls	r7, r3, #25
 8002bf6:	bf48      	it	mi
 8002bf8:	b2b6      	uxthmi	r6, r6
 8002bfa:	07df      	lsls	r7, r3, #31
 8002bfc:	bf48      	it	mi
 8002bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8002c02:	6029      	str	r1, [r5, #0]
 8002c04:	bf48      	it	mi
 8002c06:	6023      	strmi	r3, [r4, #0]
 8002c08:	b91e      	cbnz	r6, 8002c12 <_printf_i+0x1a6>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	f023 0320 	bic.w	r3, r3, #32
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	2310      	movs	r3, #16
 8002c14:	e7a6      	b.n	8002b64 <_printf_i+0xf8>
 8002c16:	4824      	ldr	r0, [pc, #144]	; (8002ca8 <_printf_i+0x23c>)
 8002c18:	e7e4      	b.n	8002be4 <_printf_i+0x178>
 8002c1a:	4615      	mov	r5, r2
 8002c1c:	e7bd      	b.n	8002b9a <_printf_i+0x12e>
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	6826      	ldr	r6, [r4, #0]
 8002c22:	1d18      	adds	r0, r3, #4
 8002c24:	6961      	ldr	r1, [r4, #20]
 8002c26:	6028      	str	r0, [r5, #0]
 8002c28:	0635      	lsls	r5, r6, #24
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	d501      	bpl.n	8002c32 <_printf_i+0x1c6>
 8002c2e:	6019      	str	r1, [r3, #0]
 8002c30:	e002      	b.n	8002c38 <_printf_i+0x1cc>
 8002c32:	0670      	lsls	r0, r6, #25
 8002c34:	d5fb      	bpl.n	8002c2e <_printf_i+0x1c2>
 8002c36:	8019      	strh	r1, [r3, #0]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4615      	mov	r5, r2
 8002c3c:	6123      	str	r3, [r4, #16]
 8002c3e:	e7bc      	b.n	8002bba <_printf_i+0x14e>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	2100      	movs	r1, #0
 8002c44:	1d1a      	adds	r2, r3, #4
 8002c46:	602a      	str	r2, [r5, #0]
 8002c48:	681d      	ldr	r5, [r3, #0]
 8002c4a:	6862      	ldr	r2, [r4, #4]
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 f97f 	bl	8002f50 <memchr>
 8002c52:	b108      	cbz	r0, 8002c58 <_printf_i+0x1ec>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	6060      	str	r0, [r4, #4]
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	6123      	str	r3, [r4, #16]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c62:	e7aa      	b.n	8002bba <_printf_i+0x14e>
 8002c64:	462a      	mov	r2, r5
 8002c66:	4649      	mov	r1, r9
 8002c68:	4640      	mov	r0, r8
 8002c6a:	6923      	ldr	r3, [r4, #16]
 8002c6c:	47d0      	blx	sl
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d0ad      	beq.n	8002bce <_printf_i+0x162>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	079b      	lsls	r3, r3, #30
 8002c76:	d413      	bmi.n	8002ca0 <_printf_i+0x234>
 8002c78:	68e0      	ldr	r0, [r4, #12]
 8002c7a:	9b03      	ldr	r3, [sp, #12]
 8002c7c:	4298      	cmp	r0, r3
 8002c7e:	bfb8      	it	lt
 8002c80:	4618      	movlt	r0, r3
 8002c82:	e7a6      	b.n	8002bd2 <_printf_i+0x166>
 8002c84:	2301      	movs	r3, #1
 8002c86:	4632      	mov	r2, r6
 8002c88:	4649      	mov	r1, r9
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	47d0      	blx	sl
 8002c8e:	3001      	adds	r0, #1
 8002c90:	d09d      	beq.n	8002bce <_printf_i+0x162>
 8002c92:	3501      	adds	r5, #1
 8002c94:	68e3      	ldr	r3, [r4, #12]
 8002c96:	9903      	ldr	r1, [sp, #12]
 8002c98:	1a5b      	subs	r3, r3, r1
 8002c9a:	42ab      	cmp	r3, r5
 8002c9c:	dcf2      	bgt.n	8002c84 <_printf_i+0x218>
 8002c9e:	e7eb      	b.n	8002c78 <_printf_i+0x20c>
 8002ca0:	2500      	movs	r5, #0
 8002ca2:	f104 0619 	add.w	r6, r4, #25
 8002ca6:	e7f5      	b.n	8002c94 <_printf_i+0x228>
 8002ca8:	080030d7 	.word	0x080030d7
 8002cac:	080030e8 	.word	0x080030e8

08002cb0 <__sflush_r>:
 8002cb0:	898a      	ldrh	r2, [r1, #12]
 8002cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	0710      	lsls	r0, r2, #28
 8002cb8:	460c      	mov	r4, r1
 8002cba:	d457      	bmi.n	8002d6c <__sflush_r+0xbc>
 8002cbc:	684b      	ldr	r3, [r1, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	dc04      	bgt.n	8002ccc <__sflush_r+0x1c>
 8002cc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dc01      	bgt.n	8002ccc <__sflush_r+0x1c>
 8002cc8:	2000      	movs	r0, #0
 8002cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cce:	2e00      	cmp	r6, #0
 8002cd0:	d0fa      	beq.n	8002cc8 <__sflush_r+0x18>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cd8:	682f      	ldr	r7, [r5, #0]
 8002cda:	6a21      	ldr	r1, [r4, #32]
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	d032      	beq.n	8002d46 <__sflush_r+0x96>
 8002ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	075a      	lsls	r2, r3, #29
 8002ce6:	d505      	bpl.n	8002cf4 <__sflush_r+0x44>
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	1ac0      	subs	r0, r0, r3
 8002cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cee:	b10b      	cbz	r3, 8002cf4 <__sflush_r+0x44>
 8002cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cf2:	1ac0      	subs	r0, r0, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	6a21      	ldr	r1, [r4, #32]
 8002cfe:	47b0      	blx	r6
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	d106      	bne.n	8002d14 <__sflush_r+0x64>
 8002d06:	6829      	ldr	r1, [r5, #0]
 8002d08:	291d      	cmp	r1, #29
 8002d0a:	d82b      	bhi.n	8002d64 <__sflush_r+0xb4>
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <__sflush_r+0x100>)
 8002d0e:	410a      	asrs	r2, r1
 8002d10:	07d6      	lsls	r6, r2, #31
 8002d12:	d427      	bmi.n	8002d64 <__sflush_r+0xb4>
 8002d14:	2200      	movs	r2, #0
 8002d16:	6062      	str	r2, [r4, #4]
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	04d9      	lsls	r1, r3, #19
 8002d1c:	6022      	str	r2, [r4, #0]
 8002d1e:	d504      	bpl.n	8002d2a <__sflush_r+0x7a>
 8002d20:	1c42      	adds	r2, r0, #1
 8002d22:	d101      	bne.n	8002d28 <__sflush_r+0x78>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b903      	cbnz	r3, 8002d2a <__sflush_r+0x7a>
 8002d28:	6560      	str	r0, [r4, #84]	; 0x54
 8002d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d2c:	602f      	str	r7, [r5, #0]
 8002d2e:	2900      	cmp	r1, #0
 8002d30:	d0ca      	beq.n	8002cc8 <__sflush_r+0x18>
 8002d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d36:	4299      	cmp	r1, r3
 8002d38:	d002      	beq.n	8002d40 <__sflush_r+0x90>
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7ff fbee 	bl	800251c <_free_r>
 8002d40:	2000      	movs	r0, #0
 8002d42:	6360      	str	r0, [r4, #52]	; 0x34
 8002d44:	e7c1      	b.n	8002cca <__sflush_r+0x1a>
 8002d46:	2301      	movs	r3, #1
 8002d48:	4628      	mov	r0, r5
 8002d4a:	47b0      	blx	r6
 8002d4c:	1c41      	adds	r1, r0, #1
 8002d4e:	d1c8      	bne.n	8002ce2 <__sflush_r+0x32>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0c5      	beq.n	8002ce2 <__sflush_r+0x32>
 8002d56:	2b1d      	cmp	r3, #29
 8002d58:	d001      	beq.n	8002d5e <__sflush_r+0xae>
 8002d5a:	2b16      	cmp	r3, #22
 8002d5c:	d101      	bne.n	8002d62 <__sflush_r+0xb2>
 8002d5e:	602f      	str	r7, [r5, #0]
 8002d60:	e7b2      	b.n	8002cc8 <__sflush_r+0x18>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	e7ae      	b.n	8002cca <__sflush_r+0x1a>
 8002d6c:	690f      	ldr	r7, [r1, #16]
 8002d6e:	2f00      	cmp	r7, #0
 8002d70:	d0aa      	beq.n	8002cc8 <__sflush_r+0x18>
 8002d72:	0793      	lsls	r3, r2, #30
 8002d74:	bf18      	it	ne
 8002d76:	2300      	movne	r3, #0
 8002d78:	680e      	ldr	r6, [r1, #0]
 8002d7a:	bf08      	it	eq
 8002d7c:	694b      	ldreq	r3, [r1, #20]
 8002d7e:	1bf6      	subs	r6, r6, r7
 8002d80:	600f      	str	r7, [r1, #0]
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	dd9f      	ble.n	8002cc8 <__sflush_r+0x18>
 8002d88:	4633      	mov	r3, r6
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	6a21      	ldr	r1, [r4, #32]
 8002d90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002d94:	47e0      	blx	ip
 8002d96:	2800      	cmp	r0, #0
 8002d98:	dc06      	bgt.n	8002da8 <__sflush_r+0xf8>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	e790      	b.n	8002cca <__sflush_r+0x1a>
 8002da8:	4407      	add	r7, r0
 8002daa:	1a36      	subs	r6, r6, r0
 8002dac:	e7ea      	b.n	8002d84 <__sflush_r+0xd4>
 8002dae:	bf00      	nop
 8002db0:	dfbffffe 	.word	0xdfbffffe

08002db4 <_fflush_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	4605      	mov	r5, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_fflush_r+0x10>
 8002dbe:	2500      	movs	r5, #0
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	b118      	cbz	r0, 8002dce <_fflush_r+0x1a>
 8002dc6:	6a03      	ldr	r3, [r0, #32]
 8002dc8:	b90b      	cbnz	r3, 8002dce <_fflush_r+0x1a>
 8002dca:	f7ff fa9f 	bl	800230c <__sinit>
 8002dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f3      	beq.n	8002dbe <_fflush_r+0xa>
 8002dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002dd8:	07d0      	lsls	r0, r2, #31
 8002dda:	d404      	bmi.n	8002de6 <_fflush_r+0x32>
 8002ddc:	0599      	lsls	r1, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_fflush_r+0x32>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f7ff fb98 	bl	8002516 <__retarget_lock_acquire_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7ff ff61 	bl	8002cb0 <__sflush_r>
 8002dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002df0:	4605      	mov	r5, r0
 8002df2:	07da      	lsls	r2, r3, #31
 8002df4:	d4e4      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	059b      	lsls	r3, r3, #22
 8002dfa:	d4e1      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dfe:	f7ff fb8b 	bl	8002518 <__retarget_lock_release_recursive>
 8002e02:	e7dd      	b.n	8002dc0 <_fflush_r+0xc>

08002e04 <__swbuf_r>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	460e      	mov	r6, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	b118      	cbz	r0, 8002e16 <__swbuf_r+0x12>
 8002e0e:	6a03      	ldr	r3, [r0, #32]
 8002e10:	b90b      	cbnz	r3, 8002e16 <__swbuf_r+0x12>
 8002e12:	f7ff fa7b 	bl	800230c <__sinit>
 8002e16:	69a3      	ldr	r3, [r4, #24]
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	071a      	lsls	r2, r3, #28
 8002e1e:	d525      	bpl.n	8002e6c <__swbuf_r+0x68>
 8002e20:	6923      	ldr	r3, [r4, #16]
 8002e22:	b31b      	cbz	r3, 8002e6c <__swbuf_r+0x68>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	6922      	ldr	r2, [r4, #16]
 8002e28:	b2f6      	uxtb	r6, r6
 8002e2a:	1a98      	subs	r0, r3, r2
 8002e2c:	6963      	ldr	r3, [r4, #20]
 8002e2e:	4637      	mov	r7, r6
 8002e30:	4283      	cmp	r3, r0
 8002e32:	dc04      	bgt.n	8002e3e <__swbuf_r+0x3a>
 8002e34:	4621      	mov	r1, r4
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7ff ffbc 	bl	8002db4 <_fflush_r>
 8002e3c:	b9e0      	cbnz	r0, 8002e78 <__swbuf_r+0x74>
 8002e3e:	68a3      	ldr	r3, [r4, #8]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	60a3      	str	r3, [r4, #8]
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	6022      	str	r2, [r4, #0]
 8002e4a:	701e      	strb	r6, [r3, #0]
 8002e4c:	6962      	ldr	r2, [r4, #20]
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d004      	beq.n	8002e5e <__swbuf_r+0x5a>
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	07db      	lsls	r3, r3, #31
 8002e58:	d506      	bpl.n	8002e68 <__swbuf_r+0x64>
 8002e5a:	2e0a      	cmp	r6, #10
 8002e5c:	d104      	bne.n	8002e68 <__swbuf_r+0x64>
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f7ff ffa7 	bl	8002db4 <_fflush_r>
 8002e66:	b938      	cbnz	r0, 8002e78 <__swbuf_r+0x74>
 8002e68:	4638      	mov	r0, r7
 8002e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f000 f806 	bl	8002e80 <__swsetup_r>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d0d5      	beq.n	8002e24 <__swbuf_r+0x20>
 8002e78:	f04f 37ff 	mov.w	r7, #4294967295
 8002e7c:	e7f4      	b.n	8002e68 <__swbuf_r+0x64>
	...

08002e80 <__swsetup_r>:
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <__swsetup_r+0xac>)
 8002e84:	4605      	mov	r5, r0
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	460c      	mov	r4, r1
 8002e8a:	b118      	cbz	r0, 8002e94 <__swsetup_r+0x14>
 8002e8c:	6a03      	ldr	r3, [r0, #32]
 8002e8e:	b90b      	cbnz	r3, 8002e94 <__swsetup_r+0x14>
 8002e90:	f7ff fa3c 	bl	800230c <__sinit>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e9a:	0718      	lsls	r0, r3, #28
 8002e9c:	d422      	bmi.n	8002ee4 <__swsetup_r+0x64>
 8002e9e:	06d9      	lsls	r1, r3, #27
 8002ea0:	d407      	bmi.n	8002eb2 <__swsetup_r+0x32>
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	e034      	b.n	8002f1c <__swsetup_r+0x9c>
 8002eb2:	0758      	lsls	r0, r3, #29
 8002eb4:	d512      	bpl.n	8002edc <__swsetup_r+0x5c>
 8002eb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eb8:	b141      	cbz	r1, 8002ecc <__swsetup_r+0x4c>
 8002eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ebe:	4299      	cmp	r1, r3
 8002ec0:	d002      	beq.n	8002ec8 <__swsetup_r+0x48>
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7ff fb2a 	bl	800251c <_free_r>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6363      	str	r3, [r4, #52]	; 0x34
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6063      	str	r3, [r4, #4]
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	89a3      	ldrh	r3, [r4, #12]
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	b94b      	cbnz	r3, 8002efc <__swsetup_r+0x7c>
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef2:	d003      	beq.n	8002efc <__swsetup_r+0x7c>
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f000 f85d 	bl	8002fb6 <__smakebuf_r>
 8002efc:	89a0      	ldrh	r0, [r4, #12]
 8002efe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f02:	f010 0301 	ands.w	r3, r0, #1
 8002f06:	d00a      	beq.n	8002f1e <__swsetup_r+0x9e>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60a3      	str	r3, [r4, #8]
 8002f0c:	6963      	ldr	r3, [r4, #20]
 8002f0e:	425b      	negs	r3, r3
 8002f10:	61a3      	str	r3, [r4, #24]
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	b943      	cbnz	r3, 8002f28 <__swsetup_r+0xa8>
 8002f16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f1a:	d1c4      	bne.n	8002ea6 <__swsetup_r+0x26>
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
 8002f1e:	0781      	lsls	r1, r0, #30
 8002f20:	bf58      	it	pl
 8002f22:	6963      	ldrpl	r3, [r4, #20]
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	e7f4      	b.n	8002f12 <__swsetup_r+0x92>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e7f7      	b.n	8002f1c <__swsetup_r+0x9c>
 8002f2c:	20000068 	.word	0x20000068

08002f30 <_sbrk_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d05      	ldr	r5, [pc, #20]	; (8002f4c <_sbrk_r+0x1c>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	f7fd ff46 	bl	8000dcc <_sbrk>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_sbrk_r+0x1a>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_sbrk_r+0x1a>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000214 	.word	0x20000214

08002f50 <memchr>:
 8002f50:	4603      	mov	r3, r0
 8002f52:	b510      	push	{r4, lr}
 8002f54:	b2c9      	uxtb	r1, r1
 8002f56:	4402      	add	r2, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	d101      	bne.n	8002f62 <memchr+0x12>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e003      	b.n	8002f6a <memchr+0x1a>
 8002f62:	7804      	ldrb	r4, [r0, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	428c      	cmp	r4, r1
 8002f68:	d1f6      	bne.n	8002f58 <memchr+0x8>
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <__swhatbuf_r>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	460c      	mov	r4, r1
 8002f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f74:	4615      	mov	r5, r2
 8002f76:	2900      	cmp	r1, #0
 8002f78:	461e      	mov	r6, r3
 8002f7a:	b096      	sub	sp, #88	; 0x58
 8002f7c:	da0c      	bge.n	8002f98 <__swhatbuf_r+0x2c>
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	2100      	movs	r1, #0
 8002f82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f86:	bf0c      	ite	eq
 8002f88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f8c:	2340      	movne	r3, #64	; 0x40
 8002f8e:	2000      	movs	r0, #0
 8002f90:	6031      	str	r1, [r6, #0]
 8002f92:	602b      	str	r3, [r5, #0]
 8002f94:	b016      	add	sp, #88	; 0x58
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	466a      	mov	r2, sp
 8002f9a:	f000 f849 	bl	8003030 <_fstat_r>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	dbed      	blt.n	8002f7e <__swhatbuf_r+0x12>
 8002fa2:	9901      	ldr	r1, [sp, #4]
 8002fa4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002fa8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002fac:	4259      	negs	r1, r3
 8002fae:	4159      	adcs	r1, r3
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	e7eb      	b.n	8002f8e <__swhatbuf_r+0x22>

08002fb6 <__smakebuf_r>:
 8002fb6:	898b      	ldrh	r3, [r1, #12]
 8002fb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fba:	079d      	lsls	r5, r3, #30
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	d507      	bpl.n	8002fd2 <__smakebuf_r+0x1c>
 8002fc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	6123      	str	r3, [r4, #16]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	6163      	str	r3, [r4, #20]
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	466a      	mov	r2, sp
 8002fd4:	ab01      	add	r3, sp, #4
 8002fd6:	f7ff ffc9 	bl	8002f6c <__swhatbuf_r>
 8002fda:	9900      	ldr	r1, [sp, #0]
 8002fdc:	4605      	mov	r5, r0
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f7ff fb04 	bl	80025ec <_malloc_r>
 8002fe4:	b948      	cbnz	r0, 8002ffa <__smakebuf_r+0x44>
 8002fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fea:	059a      	lsls	r2, r3, #22
 8002fec:	d4ef      	bmi.n	8002fce <__smakebuf_r+0x18>
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	81a3      	strh	r3, [r4, #12]
 8002ff8:	e7e3      	b.n	8002fc2 <__smakebuf_r+0xc>
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	6020      	str	r0, [r4, #0]
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	81a3      	strh	r3, [r4, #12]
 8003004:	9b00      	ldr	r3, [sp, #0]
 8003006:	6120      	str	r0, [r4, #16]
 8003008:	6163      	str	r3, [r4, #20]
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	b15b      	cbz	r3, 8003026 <__smakebuf_r+0x70>
 800300e:	4630      	mov	r0, r6
 8003010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003014:	f000 f81e 	bl	8003054 <_isatty_r>
 8003018:	b128      	cbz	r0, 8003026 <__smakebuf_r+0x70>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f023 0303 	bic.w	r3, r3, #3
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	431d      	orrs	r5, r3
 800302a:	81a5      	strh	r5, [r4, #12]
 800302c:	e7cf      	b.n	8002fce <__smakebuf_r+0x18>
	...

08003030 <_fstat_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	2300      	movs	r3, #0
 8003034:	4d06      	ldr	r5, [pc, #24]	; (8003050 <_fstat_r+0x20>)
 8003036:	4604      	mov	r4, r0
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	f7fd fea0 	bl	8000d82 <_fstat>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	d102      	bne.n	800304c <_fstat_r+0x1c>
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	b103      	cbz	r3, 800304c <_fstat_r+0x1c>
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	20000214 	.word	0x20000214

08003054 <_isatty_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	2300      	movs	r3, #0
 8003058:	4d05      	ldr	r5, [pc, #20]	; (8003070 <_isatty_r+0x1c>)
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	f7fd fe9e 	bl	8000da0 <_isatty>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_isatty_r+0x1a>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_isatty_r+0x1a>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20000214 	.word	0x20000214

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
