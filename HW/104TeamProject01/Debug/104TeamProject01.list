
104TeamProject01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800b068  0800b068  0001b068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b750  0800b750  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b750  0800b750  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b750  0800b750  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b750  0800b750  0001b750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b754  0800b754  0001b754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  200001d8  0800b930  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d00  0800b930  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131f9  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6b  00000000  00000000  0003343d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000363a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7f  00000000  00000000  000374e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dfd  00000000  00000000  00038267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dc2  00000000  00000000  00052064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f75e  00000000  00000000  00067e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f64  00000000  00000000  000f7584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000fd4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b04c 	.word	0x0800b04c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b04c 	.word	0x0800b04c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b56      	ldr	r3, [pc, #344]	; (8001330 <MX_GPIO_Init+0x170>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a55      	ldr	r2, [pc, #340]	; (8001330 <MX_GPIO_Init+0x170>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <MX_GPIO_Init+0x170>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <MX_GPIO_Init+0x170>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <MX_GPIO_Init+0x170>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <MX_GPIO_Init+0x170>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <MX_GPIO_Init+0x170>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a49      	ldr	r2, [pc, #292]	; (8001330 <MX_GPIO_Init+0x170>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <MX_GPIO_Init+0x170>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b44      	ldr	r3, [pc, #272]	; (8001330 <MX_GPIO_Init+0x170>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a43      	ldr	r2, [pc, #268]	; (8001330 <MX_GPIO_Init+0x170>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <MX_GPIO_Init+0x170>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Sonar_Water_Tissue_Trig_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800123a:	483e      	ldr	r0, [pc, #248]	; (8001334 <MX_GPIO_Init+0x174>)
 800123c:	f001 f969 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Green_Pin|LED_Yellow_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001246:	483c      	ldr	r0, [pc, #240]	; (8001338 <MX_GPIO_Init+0x178>)
 8001248:	f001 f963 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Sonar_Tissue_Trig_Pin|Sonar_Cover_Trig_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f640 0102 	movw	r1, #2050	; 0x802
 8001252:	483a      	ldr	r0, [pc, #232]	; (800133c <MX_GPIO_Init+0x17c>)
 8001254:	f001 f95d 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_GPIO_Init+0x180>)
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	4832      	ldr	r0, [pc, #200]	; (8001338 <MX_GPIO_Init+0x178>)
 800126e:	f000 ffb5 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Sonar_Water_Tissue_Trig_Pin;
 8001272:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2302      	movs	r3, #2
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	482a      	ldr	r0, [pc, #168]	; (8001334 <MX_GPIO_Init+0x174>)
 800128c:	f000 ffa6 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Yellow_Pin|LED_RED_Pin;
 8001290:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2302      	movs	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4823      	ldr	r0, [pc, #140]	; (8001338 <MX_GPIO_Init+0x178>)
 80012aa:	f000 ff97 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Sonar_Tissue_Trig_Pin|Sonar_Cover_Trig_Pin;
 80012ae:	f640 0302 	movw	r3, #2050	; 0x802
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	481d      	ldr	r0, [pc, #116]	; (800133c <MX_GPIO_Init+0x17c>)
 80012c8:	f000 ff88 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Sonar_Tissue_Echo_Pin|Sonar_Cover_Echo_Pin|Magnetic_Pin;
 80012cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4816      	ldr	r0, [pc, #88]	; (800133c <MX_GPIO_Init+0x17c>)
 80012e2:	f000 ff7b 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sonar_Water_Tissue_Echo_Pin;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sonar_Water_Tissue_Echo_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_GPIO_Init+0x174>)
 80012fc:	f000 ff6e 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tilt_Pin;
 8001300:	2320      	movs	r3, #32
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Tilt_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <MX_GPIO_Init+0x17c>)
 8001314:	f000 ff62 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2028      	movs	r0, #40	; 0x28
 800131e:	f000 fe74 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001322:	2028      	movs	r0, #40	; 0x28
 8001324:	f000 fe8d 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	40010800 	.word	0x40010800
 8001338:	40011000 	.word	0x40011000
 800133c:	40010c00 	.word	0x40010c00
 8001340:	10110000 	.word	0x10110000

08001344 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C1_Init+0x50>)
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_I2C1_Init+0x54>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C1_Init+0x50>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_I2C1_Init+0x58>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_I2C1_Init+0x50>)
 8001362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_I2C1_Init+0x50>)
 8001382:	f001 f901 	bl	8002588 <HAL_I2C_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800138c:	f000 f957 	bl	800163e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001f4 	.word	0x200001f4
 8001398:	40005400 	.word	0x40005400
 800139c:	000186a0 	.word	0x000186a0

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_I2C_MspInit+0x90>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d132      	bne.n	8001426 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_I2C_MspInit+0x94>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_I2C_MspInit+0x94>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_I2C_MspInit+0x94>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IR_SCL_Pin|IR_SDA_Pin;
 80013d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013de:	2312      	movs	r3, #18
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <HAL_I2C_MspInit+0x98>)
 80013ee:	f000 fef5 	bl	80021dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_I2C_MspInit+0x9c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_I2C_MspInit+0x9c>)
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_I2C_MspInit+0x94>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_I2C_MspInit+0x94>)
 8001414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_I2C_MspInit+0x94>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40005400 	.word	0x40005400
 8001434:	40021000 	.word	0x40021000
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40010000 	.word	0x40010000

08001440 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char *ptr, int len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	b29a      	uxth	r2, r3
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <_write+0x28>)
 8001458:	f003 fade 	bl	8004a18 <HAL_UART_Transmit>
	return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000328 	.word	0x20000328

0800146c <_read>:

int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	b29a      	uxth	r2, r3
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <_read+0x28>)
 8001484:	f003 fb4b 	bl	8004b1e <HAL_UART_Receive>
	return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000328 	.word	0x20000328

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0e8      	sub	sp, #416	; 0x1a0
 800149c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 800149e:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <main+0x118>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6858      	ldr	r0, [r3, #4]
 80014a4:	2300      	movs	r3, #0
 80014a6:	2202      	movs	r2, #2
 80014a8:	2100      	movs	r1, #0
 80014aa:	f006 f851 	bl	8007550 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <main+0x118>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6898      	ldr	r0, [r3, #8]
 80014b4:	2300      	movs	r3, #0
 80014b6:	2202      	movs	r2, #2
 80014b8:	2100      	movs	r1, #0
 80014ba:	f006 f849 	bl	8007550 <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014be:	f000 fc47 	bl	8001d50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014c2:	f000 f881 	bl	80015c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014c6:	f7ff fe7b 	bl	80011c0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80014ca:	f000 fb71 	bl	8001bb0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80014ce:	f000 f9c9 	bl	8001864 <MX_TIM1_Init>
	MX_TIM2_Init();
 80014d2:	f000 fa17 	bl	8001904 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80014d6:	f000 fb41 	bl	8001b5c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 80014da:	f7ff ff33 	bl	8001344 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	TS stall;
	initStalls(&stall);
 80014de:	463b      	mov	r3, r7
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 ff41 	bl	8006368 <initStalls>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Init(&htim1);         // ?��?��?��?��?�� ?��?��
 80014e6:	4833      	ldr	r0, [pc, #204]	; (80015b4 <main+0x11c>)
 80014e8:	f002 fae0 	bl	8003aac <HAL_TIM_Base_Init>
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // ?��?��?��?��?�� ?��?��
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <main+0x11c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim1);     // ?��?��?��?��?�� ?��?��
 80014f4:	482f      	ldr	r0, [pc, #188]	; (80015b4 <main+0x11c>)
 80014f6:	f002 fb29 	bl	8003b4c <HAL_TIM_Base_Start_IT>


	printf("start STM32F103Rb\r\n");
 80014fa:	482f      	ldr	r0, [pc, #188]	; (80015b8 <main+0x120>)
 80014fc:	f006 f820 	bl	8007540 <puts>

  // Wait for Interrupt
	setInterrupt();
 8001500:	f004 fab0 	bl	8005a64 <setInterrupt>

	SendAT();
 8001504:	f004 f9fe 	bl	8005904 <SendAT>
	HAL_Delay(100);
 8001508:	2064      	movs	r0, #100	; 0x64
 800150a:	f000 fc83 	bl	8001e14 <HAL_Delay>

	WifiAccess();
 800150e:	f004 fa11 	bl	8005934 <WifiAccess>
	HAL_Delay(5000);
 8001512:	f241 3088 	movw	r0, #5000	; 0x1388
 8001516:	f000 fc7d 	bl	8001e14 <HAL_Delay>


	RaspiTCPSocketAccess();
 800151a:	f004 fa23 	bl	8005964 <RaspiTCPSocketAccess>
	HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f000 fc78 	bl	8001e14 <HAL_Delay>

	HAL_Delay(15000);
 8001524:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001528:	f000 fc74 	bl	8001e14 <HAL_Delay>

	while(1){
		uint8_t data = ReadBuffer();
 800152c:	f004 f964 	bl	80057f8 <ReadBuffer>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if(data == 0) break;
 8001536:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <main+0xa8>
 800153e:	e008      	b.n	8001552 <main+0xba>
		printf("%c", data);
 8001540:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001544:	4618      	mov	r0, r3
 8001546:	f005 ff9f 	bl	8007488 <putchar>
		HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f000 fc62 	bl	8001e14 <HAL_Delay>
	while(1){
 8001550:	e7ec      	b.n	800152c <main+0x94>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Time: %lu, ", HAL_GetTick() / 1000);
 8001552:	f000 fc55 	bl	8001e00 <HAL_GetTick>
 8001556:	4603      	mov	r3, r0
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <main+0x124>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	099b      	lsrs	r3, r3, #6
 8001560:	4619      	mov	r1, r3
 8001562:	4817      	ldr	r0, [pc, #92]	; (80015c0 <main+0x128>)
 8001564:	f005 ff7e 	bl	8007464 <iprintf>
	  checkMagnetic(&stall);
 8001568:	463b      	mov	r3, r7
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fbfa 	bl	8005d64 <checkMagnetic>
	  checkTissueAmount(&stall);
 8001570:	463b      	mov	r3, r7
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fc80 	bl	8005e78 <checkTissueAmount>
	  checkWaterTissue(&stall);
 8001578:	463b      	mov	r3, r7
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fd04 	bl	8005f88 <checkWaterTissue>
	  untactIR(&stall);
 8001580:	463b      	mov	r3, r7
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fd52 	bl	800602c <untactIR>
	  flushToilet(&stall);
 8001588:	463b      	mov	r3, r7
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fdc2 	bl	8006114 <flushToilet>
	  checkBroken(&stall);
 8001590:	463b      	mov	r3, r7
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fe00 	bl	8006198 <checkBroken>
	  checkCongest(&stall);
 8001598:	463b      	mov	r3, r7
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fe94 	bl	80062c8 <checkCongest>

	  // receive congestion include outside
	  // 0 is no stand
	  // 1 is yes stand
//	  res_from_raspi =  EspResponseCheck();
	  res_from_raspi = 1;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <main+0x12c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
//	  }
//	  else if(res_from_raspi == 2){
//		  // POHWA
////		  SendData(strlen((char *)"POHWA\r\n"), 0, 0, "POHWA\r\n");
//	  }
  	  HAL_Delay(100);
 80015a6:	2064      	movs	r0, #100	; 0x64
 80015a8:	f000 fc34 	bl	8001e14 <HAL_Delay>
  {
 80015ac:	e7d1      	b.n	8001552 <main+0xba>
 80015ae:	bf00      	nop
 80015b0:	20000068 	.word	0x20000068
 80015b4:	20000250 	.word	0x20000250
 80015b8:	0800b068 	.word	0x0800b068
 80015bc:	10624dd3 	.word	0x10624dd3
 80015c0:	0800b07c 	.word	0x0800b07c
 80015c4:	20000248 	.word	0x20000248

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b090      	sub	sp, #64	; 0x40
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	2228      	movs	r2, #40	; 0x28
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 f960 	bl	800789c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f2:	2310      	movs	r3, #16
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fe44 	bl	800328c <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800160a:	f000 f818 	bl	800163e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f8b2 	bl	8003790 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001632:	f000 f804 	bl	800163e <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3740      	adds	r7, #64	; 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001642:	b672      	cpsid	i
}
 8001644:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001646:	e7fe      	b.n	8001646 <Error_Handler+0x8>

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <HAL_MspInit+0x5c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6193      	str	r3, [r2, #24]
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_MspInit+0x5c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_MspInit+0x5c>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_MspInit+0x5c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_MspInit+0x60>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_MspInit+0x60>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 fb73 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM1_UP_IRQHandler+0x10>)
 8001702:	f002 fb6f 	bl	8003de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000250 	.word	0x20000250

08001710 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM1_CC_IRQHandler+0x10>)
 8001716:	f002 fb65 	bl	8003de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000250 	.word	0x20000250

08001724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART1_IRQHandler+0x10>)
 800172a:	f003 faaf 	bl	8004c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002e0 	.word	0x200002e0

08001738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800173c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001740:	f000 ff00 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <_kill>:

int _kill(int pid, int sig)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001760:	f006 f916 	bl	8007990 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	2216      	movs	r2, #22
 8001768:	601a      	str	r2, [r3, #0]
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_exit>:

void _exit (int status)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800177e:	f04f 31ff 	mov.w	r1, #4294967295
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffe7 	bl	8001756 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001788:	e7fe      	b.n	8001788 <_exit+0x12>

0800178a <_close>:
  }
  return len;
}

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b0:	605a      	str	r2, [r3, #4]
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <_isatty>:

int _isatty(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f006 f8b8 	bl	8007990 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20005000 	.word	0x20005000
 800184c:	00000400 	.word	0x00000400
 8001850:	2000024c 	.word	0x2000024c
 8001854:	20000d00 	.word	0x20000d00

08001858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_TIM1_Init+0x98>)
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <MX_TIM1_Init+0x9c>)
 8001884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM1_Init+0x98>)
 8001888:	2207      	movs	r2, #7
 800188a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM1_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_TIM1_Init+0x98>)
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_TIM1_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_TIM1_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM1_Init+0x98>)
 80018ae:	f002 f8fd 	bl	8003aac <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018b8:	f7ff fec1 	bl	800163e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM1_Init+0x98>)
 80018ca:	f002 fc55 	bl	8004178 <HAL_TIM_ConfigClockSource>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018d4:	f7ff feb3 	bl	800163e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_TIM1_Init+0x98>)
 80018e6:	f002 ffd7 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018f0:	f7ff fea5 	bl	800163e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000250 	.word	0x20000250
 8001900:	40012c00 	.word	0x40012c00

08001904 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <MX_TIM2_Init+0x114>)
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_TIM2_Init+0x114>)
 800193e:	220f      	movs	r2, #15
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <MX_TIM2_Init+0x114>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <MX_TIM2_Init+0x114>)
 800194a:	f242 720f 	movw	r2, #9999	; 0x270f
 800194e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_TIM2_Init+0x114>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <MX_TIM2_Init+0x114>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195c:	482e      	ldr	r0, [pc, #184]	; (8001a18 <MX_TIM2_Init+0x114>)
 800195e:	f002 f8a5 	bl	8003aac <HAL_TIM_Base_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001968:	f7ff fe69 	bl	800163e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	4619      	mov	r1, r3
 8001978:	4827      	ldr	r0, [pc, #156]	; (8001a18 <MX_TIM2_Init+0x114>)
 800197a:	f002 fbfd 	bl	8004178 <HAL_TIM_ConfigClockSource>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001984:	f7ff fe5b 	bl	800163e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <MX_TIM2_Init+0x114>)
 800198a:	f002 f931 	bl	8003bf0 <HAL_TIM_PWM_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001994:	f7ff fe53 	bl	800163e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4619      	mov	r1, r3
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <MX_TIM2_Init+0x114>)
 80019a8:	f002 ff76 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019b2:	f7ff fe44 	bl	800163e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <MX_TIM2_Init+0x114>)
 80019ce:	f002 fb11 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019d8:	f7ff fe31 	bl	800163e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_TIM2_Init+0x114>)
 80019e4:	f002 fb06 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019ee:	f7ff fe26 	bl	800163e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2208      	movs	r2, #8
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM2_Init+0x114>)
 80019fa:	f002 fafb 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001a04:	f7ff fe1b 	bl	800163e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM2_Init+0x114>)
 8001a0a:	f000 f847 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	; 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000298 	.word	0x20000298

08001a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_TIM_Base_MspInit+0x78>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d11c      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2019      	movs	r0, #25
 8001a4c:	f000 fadd 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a50:	2019      	movs	r0, #25
 8001a52:	f000 faf6 	bl	8002042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201b      	movs	r0, #27
 8001a5c:	f000 fad5 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a60:	201b      	movs	r0, #27
 8001a62:	f000 faee 	bl	8002042 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a66:	e010      	b.n	8001a8a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	d10b      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_TIM_Base_MspInit+0x7c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aba:	d142      	bne.n	8001b42 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_TIM_MspPostInit+0xb0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Cover_Pin|Servo_Water_Tissue_Pin;
 8001aec:	2303      	movs	r3, #3
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2302      	movs	r3, #2
 8001af6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <HAL_TIM_MspPostInit+0xb4>)
 8001b00:	f000 fb6c 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Servo_Sonar_Cover_Pin;
 8001b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Servo_Sonar_Cover_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <HAL_TIM_MspPostInit+0xb8>)
 8001b1a:	f000 fb5f 	bl	80021dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_TIM_MspPostInit+0xbc>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_TIM_MspPostInit+0xbc>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	40010000 	.word	0x40010000

08001b5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART1_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f002 fef0 	bl	8004978 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f7ff fd4e 	bl	800163e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002e0 	.word	0x200002e0
 8001bac:	40013800 	.word	0x40013800

08001bb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <MX_USART2_UART_Init+0x50>)
 8001bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001be8:	f002 fec6 	bl	8004978 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bf2:	f7ff fd24 	bl	800163e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000328 	.word	0x20000328
 8001c00:	40004400 	.word	0x40004400

08001c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a35      	ldr	r2, [pc, #212]	; (8001cf4 <HAL_UART_MspInit+0xf0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d13a      	bne.n	8001c9a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a33      	ldr	r2, [pc, #204]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4824      	ldr	r0, [pc, #144]	; (8001cfc <HAL_UART_MspInit+0xf8>)
 8001c6a:	f000 fab7 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4619      	mov	r1, r3
 8001c82:	481e      	ldr	r0, [pc, #120]	; (8001cfc <HAL_UART_MspInit+0xf8>)
 8001c84:	f000 faaa 	bl	80021dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2025      	movs	r0, #37	; 0x25
 8001c8e:	f000 f9bc 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c92:	2025      	movs	r0, #37	; 0x25
 8001c94:	f000 f9d5 	bl	8002042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c98:	e028      	b.n	8001cec <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0xfc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d123      	bne.n	8001cec <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cae:	61d3      	str	r3, [r2, #28]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_UART_MspInit+0xf4>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COM_TX_Pin|COM_RX_Pin;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_UART_MspInit+0xf8>)
 8001ce8:	f000 fa78 	bl	80021dc <HAL_GPIO_Init>
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40004400 	.word	0x40004400

08001d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff fda8 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d0a:	490c      	ldr	r1, [pc, #48]	; (8001d3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d20:	4c09      	ldr	r4, [pc, #36]	; (8001d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f005 fe35 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d32:	f7ff fbb1 	bl	8001498 <main>
  bx lr
 8001d36:	4770      	bx	lr
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d40:	0800b758 	.word	0x0800b758
  ldr r2, =_sbss
 8001d44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d48:	20000d00 	.word	0x20000d00

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_Init+0x28>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_Init+0x28>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f947 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fc6c 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f95f 	bl	800205e <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f927 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000008 	.word	0x20000008

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x1c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x20>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_IncTick+0x20>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000370 	.word	0x20000370

08001e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_GetTick+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000370 	.word	0x20000370

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffe0 	bl	8001e00 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db0b      	blt.n	8001eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <__NVIC_EnableIRQ+0x34>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff90 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff2d 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff42 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff90 	bl	8001f4c <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5f 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff35 	bl	8001ec0 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d008      	beq.n	80020a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2204      	movs	r2, #4
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e020      	b.n	80020e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 020e 	bic.w	r2, r2, #14
 80020ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d005      	beq.n	8002110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2204      	movs	r2, #4
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e051      	b.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 020e 	bic.w	r2, r2, #14
 800211e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_DMA_Abort_IT+0xd4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d029      	beq.n	800218e <HAL_DMA_Abort_IT+0xa2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_DMA_Abort_IT+0xd8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_Abort_IT+0x9e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_DMA_Abort_IT+0xdc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_Abort_IT+0x98>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_DMA_Abort_IT+0xe0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d012      	beq.n	800217e <HAL_DMA_Abort_IT+0x92>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_DMA_Abort_IT+0xe4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00a      	beq.n	8002178 <HAL_DMA_Abort_IT+0x8c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_DMA_Abort_IT+0xe8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d102      	bne.n	8002172 <HAL_DMA_Abort_IT+0x86>
 800216c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002170:	e00e      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002176:	e00b      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	e008      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	e005      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002188:	e002      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800218a:	2310      	movs	r3, #16
 800218c:	e000      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800218e:	2301      	movs	r3, #1
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_DMA_Abort_IT+0xec>)
 8002192:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
    } 
  }
  return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40020008 	.word	0x40020008
 80021c4:	4002001c 	.word	0x4002001c
 80021c8:	40020030 	.word	0x40020030
 80021cc:	40020044 	.word	0x40020044
 80021d0:	40020058 	.word	0x40020058
 80021d4:	4002006c 	.word	0x4002006c
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e169      	b.n	80024c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f0:	2201      	movs	r2, #1
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8158 	bne.w	80024be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a9a      	ldr	r2, [pc, #616]	; (800247c <HAL_GPIO_Init+0x2a0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002218:	4a98      	ldr	r2, [pc, #608]	; (800247c <HAL_GPIO_Init+0x2a0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d875      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800221e:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d058      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002224:	4a96      	ldr	r2, [pc, #600]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d86f      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800222a:	4a96      	ldr	r2, [pc, #600]	; (8002484 <HAL_GPIO_Init+0x2a8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d052      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002230:	4a94      	ldr	r2, [pc, #592]	; (8002484 <HAL_GPIO_Init+0x2a8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d869      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002236:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_GPIO_Init+0x2ac>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d04c      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 800223c:	4a92      	ldr	r2, [pc, #584]	; (8002488 <HAL_GPIO_Init+0x2ac>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d863      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002242:	4a92      	ldr	r2, [pc, #584]	; (800248c <HAL_GPIO_Init+0x2b0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d046      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002248:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_GPIO_Init+0x2b0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d85d      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d82a      	bhi.n	80022a8 <HAL_GPIO_Init+0xcc>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d859      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_GPIO_Init+0x80>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022b1 	.word	0x080022b1
 8002264:	080022c3 	.word	0x080022c3
 8002268:	08002305 	.word	0x08002305
 800226c:	0800230b 	.word	0x0800230b
 8002270:	0800230b 	.word	0x0800230b
 8002274:	0800230b 	.word	0x0800230b
 8002278:	0800230b 	.word	0x0800230b
 800227c:	0800230b 	.word	0x0800230b
 8002280:	0800230b 	.word	0x0800230b
 8002284:	0800230b 	.word	0x0800230b
 8002288:	0800230b 	.word	0x0800230b
 800228c:	0800230b 	.word	0x0800230b
 8002290:	0800230b 	.word	0x0800230b
 8002294:	0800230b 	.word	0x0800230b
 8002298:	0800230b 	.word	0x0800230b
 800229c:	0800230b 	.word	0x0800230b
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	4a79      	ldr	r2, [pc, #484]	; (8002490 <HAL_GPIO_Init+0x2b4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ae:	e02c      	b.n	800230a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e029      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	3304      	adds	r3, #4
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e024      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	3308      	adds	r3, #8
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e01f      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	330c      	adds	r3, #12
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e01a      	b.n	800230c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022de:	2304      	movs	r3, #4
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e013      	b.n	800230c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ec:	2308      	movs	r3, #8
 80022ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	611a      	str	r2, [r3, #16]
          break;
 80022f6:	e009      	b.n	800230c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	615a      	str	r2, [r3, #20]
          break;
 8002302:	e003      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x130>
          break;
 800230a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d801      	bhi.n	8002316 <HAL_GPIO_Init+0x13a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e001      	b.n	800231a <HAL_GPIO_Init+0x13e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d802      	bhi.n	8002328 <HAL_GPIO_Init+0x14c>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x152>
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3b08      	subs	r3, #8
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	210f      	movs	r1, #15
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80b1 	beq.w	80024be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800235c:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_GPIO_Init+0x2c0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_GPIO_Init+0x1ec>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <HAL_GPIO_Init+0x2c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <HAL_GPIO_Init+0x1e8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_GPIO_Init+0x1e0>
 80023b8:	2303      	movs	r3, #3
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023bc:	2304      	movs	r3, #4
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c8:	2300      	movs	r3, #0
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023da:	492f      	ldr	r1, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	492c      	ldr	r1, [pc, #176]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4928      	ldr	r1, [pc, #160]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800240c:	4013      	ands	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4922      	ldr	r1, [pc, #136]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	491e      	ldr	r1, [pc, #120]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4918      	ldr	r1, [pc, #96]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4914      	ldr	r1, [pc, #80]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d021      	beq.n	80024b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e021      	b.n	80024be <HAL_GPIO_Init+0x2e2>
 800247a:	bf00      	nop
 800247c:	10320000 	.word	0x10320000
 8002480:	10310000 	.word	0x10310000
 8002484:	10220000 	.word	0x10220000
 8002488:	10210000 	.word	0x10210000
 800248c:	10120000 	.word	0x10120000
 8002490:	10110000 	.word	0x10110000
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40011400 	.word	0x40011400
 80024ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f47f ae8e 	bne.w	80021f0 <HAL_GPIO_Init+0x14>
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	372c      	adds	r7, #44	; 0x2c
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	40010400 	.word	0x40010400

080024e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e001      	b.n	8002506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002522:	787b      	ldrb	r3, [r7, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800252e:	e003      	b.n	8002538 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	041a      	lsls	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f806 	bl	8002574 <HAL_GPIO_EXTI_Callback>
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40010400 	.word	0x40010400

08002574 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e12b      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fef6 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ec:	f001 fa18 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80025f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a81      	ldr	r2, [pc, #516]	; (80027fc <HAL_I2C_Init+0x274>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d807      	bhi.n	800260c <HAL_I2C_Init+0x84>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a80      	ldr	r2, [pc, #512]	; (8002800 <HAL_I2C_Init+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e006      	b.n	800261a <HAL_I2C_Init+0x92>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_I2C_Init+0x27c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0e7      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a78      	ldr	r2, [pc, #480]	; (8002808 <HAL_I2C_Init+0x280>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a6a      	ldr	r2, [pc, #424]	; (80027fc <HAL_I2C_Init+0x274>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d802      	bhi.n	800265c <HAL_I2C_Init+0xd4>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	e009      	b.n	8002670 <HAL_I2C_Init+0xe8>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_I2C_Init+0x284>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	3301      	adds	r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	495c      	ldr	r1, [pc, #368]	; (80027fc <HAL_I2C_Init+0x274>)
 800268c:	428b      	cmp	r3, r1
 800268e:	d819      	bhi.n	80026c4 <HAL_I2C_Init+0x13c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e59      	subs	r1, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fbb1 f3f3 	udiv	r3, r1, r3
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026a4:	400b      	ands	r3, r1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_I2C_Init+0x138>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e59      	subs	r1, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	e051      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e04f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_I2C_Init+0x168>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e012      	b.n	8002716 <HAL_I2C_Init+0x18e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	0099      	lsls	r1, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Init+0x196>
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <HAL_I2C_Init+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e58      	subs	r0, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	440b      	add	r3, r1
 8002734:	fbb0 f3f3 	udiv	r3, r0, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	e00f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6911      	ldr	r1, [r2, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	000186a0 	.word	0x000186a0
 8002800:	001e847f 	.word	0x001e847f
 8002804:	003d08ff 	.word	0x003d08ff
 8002808:	431bde83 	.word	0x431bde83
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282e:	f7ff fae7 	bl	8001e00 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	f040 8244 	bne.w	8002cca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2319      	movs	r3, #25
 8002848:	2201      	movs	r2, #1
 800284a:	4982      	ldr	r1, [pc, #520]	; (8002a54 <HAL_I2C_Mem_Read+0x244>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fb2f 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
 800285a:	e237      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2C_Mem_Read+0x5a>
 8002866:	2302      	movs	r3, #2
 8002868:	e230      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d007      	beq.n	8002890 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2222      	movs	r2, #34	; 0x22
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <HAL_I2C_Mem_Read+0x248>)
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d2:	88f8      	ldrh	r0, [r7, #6]
 80028d4:	893a      	ldrh	r2, [r7, #8]
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4603      	mov	r3, r0
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f9fc 	bl	8002ce0 <I2C_RequestMemoryRead>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1ec      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d113      	bne.n	8002922 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e1c0      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	2b01      	cmp	r3, #1
 8002928:	d11e      	bne.n	8002968 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800293a:	b672      	cpsid	i
}
 800293c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002964:	b662      	cpsie	i
}
 8002966:	e035      	b.n	80029d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11e      	bne.n	80029ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	e012      	b.n	80029d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029d4:	e166      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	2b03      	cmp	r3, #3
 80029dc:	f200 811f 	bhi.w	8002c1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d123      	bne.n	8002a30 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fbc1 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e167      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a2e:	e139      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d152      	bne.n	8002ade <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <HAL_I2C_Mem_Read+0x24c>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa34 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e13c      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa6:	b662      	cpsie	i
}
 8002aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002adc:	e0e2      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	497b      	ldr	r1, [pc, #492]	; (8002cd4 <HAL_I2C_Mem_Read+0x4c4>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f9e1 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0e9      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b3e:	4b66      	ldr	r3, [pc, #408]	; (8002cd8 <HAL_I2C_Mem_Read+0x4c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_I2C_Mem_Read+0x4cc>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a1a      	lsrs	r2, r3, #8
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00da      	lsls	r2, r3, #3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d118      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
}
 8002b88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e09a      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d1d9      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be6:	b662      	cpsie	i
}
 8002be8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1c:	e042      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 faa6 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e04c      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d118      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f47f ae94 	bne.w	80029d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	00010004 	.word	0x00010004
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	14f8b589 	.word	0x14f8b589

08002ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	813b      	strh	r3, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f8c2 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d40:	d103      	bne.n	8002d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0aa      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	4952      	ldr	r1, [pc, #328]	; (8002eac <I2C_RequestMemoryRead+0x1cc>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f91d 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e097      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f9a8 	bl	80030e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d107      	bne.n	8002db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e076      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e021      	b.n	8002e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f982 	bl	80030e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e050      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	6a39      	ldr	r1, [r7, #32]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f967 	bl	80030e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d107      	bne.n	8002e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e035      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f82b 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6e:	d103      	bne.n	8002e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e013      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	4906      	ldr	r1, [pc, #24]	; (8002eac <I2C_RequestMemoryRead+0x1cc>)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f886 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	e048      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d044      	beq.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe ff99 	bl	8001e00 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d139      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10d      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	e00c      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e023      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10d      	bne.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	e00c      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d093      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb2:	e071      	b.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d123      	bne.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e067      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d041      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fe fef4 	bl	8001e00 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d136      	bne.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10c      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e00b      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e021      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e00b      	b.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f af6d 	bne.w	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f0:	e034      	b.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f89b 	bl	800322e <I2C_IsAcknowledgeFailed>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e034      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d028      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe fe79 	bl	8001e00 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d016      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d1c3      	bne.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003180:	e049      	b.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d119      	bne.n	80031c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e030      	b.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe fe1c 	bl	8001e00 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11d      	bne.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d016      	beq.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d1ae      	bne.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d11b      	bne.n	800327e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0204 	orr.w	r2, r3, #4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
	...

0800328c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e272      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8087 	beq.w	80033ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ac:	4b92      	ldr	r3, [pc, #584]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d00c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b8:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
 80032c4:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d10b      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d2:	4b89      	ldr	r3, [pc, #548]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d06c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x12c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d168      	bne.n	80033b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e24c      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x76>
 80032f4:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7f      	ldr	r2, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e02e      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b7b      	ldr	r3, [pc, #492]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b78      	ldr	r3, [pc, #480]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a77      	ldr	r2, [pc, #476]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e01d      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0xbc>
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a71      	ldr	r2, [pc, #452]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6e      	ldr	r2, [pc, #440]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003348:	4b6b      	ldr	r3, [pc, #428]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fd4a 	bl	8001e00 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fd46 	bl	8001e00 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e200      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0xe4>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fd36 	bl	8001e00 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe fd32 	bl	8001e00 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1ec      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x10c>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c6:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11c      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1c0      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4939      	ldr	r1, [pc, #228]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	e03a      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x270>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fceb 	bl	8001e00 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe fce7 	bl	8001e00 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1a1      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4927      	ldr	r1, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_OscConfig+0x270>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fcca 	bl	8001e00 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fcc6 	bl	8001e00 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e180      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03a      	beq.n	8003510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fe fcaa 	bl	8001e00 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fe fca6 	bl	8001e00 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e160      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f000 face 	bl	8003a70 <RCC_Delay>
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fe fc90 	bl	8001e00 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e2:	e00f      	b.n	8003504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe fc8c 	bl	8001e00 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d908      	bls.n	8003504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e146      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	42420000 	.word	0x42420000
 8003500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e9      	bne.n	80034e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a6 	beq.w	800366a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4a87      	ldr	r2, [pc, #540]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	61d3      	str	r3, [r2, #28]
 800353a:	4b85      	ldr	r3, [pc, #532]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b7f      	ldr	r3, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x4c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fc4d 	bl	8001e00 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fc49 	bl	8001e00 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e103      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x312>
 8003590:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e02d      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035a6:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a69      	ldr	r2, [pc, #420]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a66      	ldr	r2, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	e01c      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x356>
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4a60      	ldr	r2, [pc, #384]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	4b5e      	ldr	r3, [pc, #376]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b58      	ldr	r3, [pc, #352]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a57      	ldr	r2, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003602:	f7fe fbfd 	bl	8001e00 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe fbf9 	bl	8001e00 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0b1      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ee      	beq.n	800360a <HAL_RCC_OscConfig+0x37e>
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe fbe7 	bl	8001e00 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fbe3 	bl	8001e00 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e09b      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d061      	beq.n	8003744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d146      	bne.n	8003716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fbb7 	bl	8001e00 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fbb3 	bl	8001e00 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e06d      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4921      	ldr	r1, [pc, #132]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a19      	ldr	r1, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	430b      	orrs	r3, r1
 80036e2:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x4cc>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fb87 	bl	8001e00 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe fb83 	bl	8001e00 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03d      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x46a>
 8003714:	e035      	b.n	8003782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fb70 	bl	8001e00 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fb6c 	bl	8001e00 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e026      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x498>
 8003742:	e01e      	b.n	8003782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e019      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_OscConfig+0x500>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	429a      	cmp	r2, r3
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d0      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d910      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b67      	ldr	r3, [pc, #412]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4965      	ldr	r1, [pc, #404]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a52      	ldr	r2, [pc, #328]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800380e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d040      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d115      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e073      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06b      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4936      	ldr	r1, [pc, #216]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fabe 	bl	8001e00 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe faba 	bl	8001e00 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e053      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2d      	ldr	r3, [pc, #180]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d210      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4922      	ldr	r1, [pc, #136]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f821 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490a      	ldr	r1, [pc, #40]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1cc>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1d0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fa1c 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40022000 	.word	0x40022000
 8003954:	40021000 	.word	0x40021000
 8003958:	0800b2fc 	.word	0x0800b2fc
 800395c:	20000004 	.word	0x20000004
 8003960:	20000008 	.word	0x20000008

08003964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b04      	cmp	r3, #4
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x30>
 800398e:	2b08      	cmp	r3, #8
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x36>
 8003992:	e027      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003996:	613b      	str	r3, [r7, #16]
      break;
 8003998:	e027      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0c9b      	lsrs	r3, r3, #18
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0c5b      	lsrs	r3, r3, #17
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 80039c6:	fb03 f202 	mul.w	r2, r3, r2
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e004      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	613b      	str	r3, [r7, #16]
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 80039e6:	613b      	str	r3, [r7, #16]
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	693b      	ldr	r3, [r7, #16]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	0800b314 	.word	0x0800b314
 8003a04:	0800b324 	.word	0x0800b324
 8003a08:	003d0900 	.word	0x003d0900

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	20000004 	.word	0x20000004

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff2 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800b30c 	.word	0x0800b30c

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0adb      	lsrs	r3, r3, #11
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800b30c 	.word	0x0800b30c

08003a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <RCC_Delay+0x34>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <RCC_Delay+0x38>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a5b      	lsrs	r3, r3, #9
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a8c:	bf00      	nop
  }
  while (Delay --);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	60fa      	str	r2, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f9      	bne.n	8003a8c <RCC_Delay+0x1c>
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	10624dd3 	.word	0x10624dd3

08003aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd ffa2 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fc30 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e03a      	b.n	8003bda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d009      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	; (8003bec <HAL_TIM_Base_Start_IT+0xa0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d111      	bne.n	8003bc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d010      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	e007      	b.n	8003bd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800

08003bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f839 	bl	8003c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 fb8e 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x24>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e022      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d109      	bne.n	8003cde <HAL_TIM_PWM_Start+0x3e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e015      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x58>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e008      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e05e      	b.n	8003dd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x82>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	e013      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x92>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	e00b      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xa2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d40:	e003      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fd7c 	bl	8004850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <HAL_TIM_PWM_Start+0x138>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_TIM_PWM_Start+0x138>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <HAL_TIM_PWM_Start+0x13c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <HAL_TIM_PWM_Start+0x140>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d010      	beq.n	8003dce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	e007      	b.n	8003dce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800

08003de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0202 	mvn.w	r2, #2
 8003e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa76 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa69 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa78 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0204 	mvn.w	r2, #4
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa4c 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa3f 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa4e 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0208 	mvn.w	r2, #8
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa22 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa15 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa24 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0210 	mvn.w	r2, #16
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2208      	movs	r2, #8
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9f8 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9eb 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f9fa 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0201 	mvn.w	r2, #1
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f001 fd8c 	bl	8005a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b80      	cmp	r3, #128	; 0x80
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b80      	cmp	r3, #128	; 0x80
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fce9 	bl	8004966 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9be 	bl	800433c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0220 	mvn.w	r2, #32
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fcb4 	bl	8004954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e0ae      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f200 809f 	bhi.w	8004160 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800405d 	.word	0x0800405d
 800402c:	08004161 	.word	0x08004161
 8004030:	08004161 	.word	0x08004161
 8004034:	08004161 	.word	0x08004161
 8004038:	0800409d 	.word	0x0800409d
 800403c:	08004161 	.word	0x08004161
 8004040:	08004161 	.word	0x08004161
 8004044:	08004161 	.word	0x08004161
 8004048:	080040df 	.word	0x080040df
 800404c:	08004161 	.word	0x08004161
 8004050:	08004161 	.word	0x08004161
 8004054:	08004161 	.word	0x08004161
 8004058:	0800411f 	.word	0x0800411f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9d6 	bl	8004414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0208 	orr.w	r2, r2, #8
 8004076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
      break;
 800409a:	e064      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa1c 	bl	80044e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	619a      	str	r2, [r3, #24]
      break;
 80040dc:	e043      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fa65 	bl	80045b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69d9      	ldr	r1, [r3, #28]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      break;
 800411c:	e023      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 faaf 	bl	8004688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	61da      	str	r2, [r3, #28]
      break;
 800415e:	e002      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIM_ConfigClockSource+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e0b4      	b.n	80042fe <HAL_TIM_ConfigClockSource+0x186>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041cc:	d03e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xd4>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	f200 8087 	bhi.w	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	f000 8086 	beq.w	80042ea <HAL_TIM_ConfigClockSource+0x172>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d87f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b70      	cmp	r3, #112	; 0x70
 80041e6:	d01a      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xa6>
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d87b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b60      	cmp	r3, #96	; 0x60
 80041ee:	d050      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x11a>
 80041f0:	2b60      	cmp	r3, #96	; 0x60
 80041f2:	d877      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b50      	cmp	r3, #80	; 0x50
 80041f6:	d03c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0xfa>
 80041f8:	2b50      	cmp	r3, #80	; 0x50
 80041fa:	d873      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d058      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d86f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d064      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	2b30      	cmp	r3, #48	; 0x30
 800420a:	d86b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d060      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d867      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05c      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b10      	cmp	r3, #16
 800421a:	d05a      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 800421c:	e062      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	f000 faf0 	bl	8004812 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	609a      	str	r2, [r3, #8]
      break;
 800424a:	e04f      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	f000 fad9 	bl	8004812 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426e:	609a      	str	r2, [r3, #8]
      break;
 8004270:	e03c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	461a      	mov	r2, r3
 8004280:	f000 fa50 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2150      	movs	r1, #80	; 0x50
 800428a:	4618      	mov	r0, r3
 800428c:	f000 faa7 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 8004290:	e02c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	461a      	mov	r2, r3
 80042a0:	f000 fa6e 	bl	8004780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2160      	movs	r1, #96	; 0x60
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fa97 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80042b0:	e01c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	461a      	mov	r2, r3
 80042c0:	f000 fa30 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2140      	movs	r1, #64	; 0x40
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fa87 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80042d0:	e00c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f000 fa7e 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80042e2:	e003      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e000      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_Base_SetConfig+0xbc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <TIM_Base_SetConfig+0xbc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800

08004414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 0201 	bic.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 0302 	bic.w	r3, r3, #2
 800445c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <TIM_OC1_SetConfig+0xc8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0308 	bic.w	r3, r3, #8
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <TIM_OC1_SetConfig+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f023 0210 	bic.w	r2, r3, #16
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0320 	bic.w	r3, r3, #32
 800452a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <TIM_OC2_SetConfig+0xd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10d      	bne.n	800455c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <TIM_OC2_SetConfig+0xd0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d113      	bne.n	800458c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40012c00 	.word	0x40012c00

080045b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <TIM_OC3_SetConfig+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10d      	bne.n	800462e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800462c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC3_SetConfig+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d113      	bne.n	800465e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00

08004688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <TIM_OC4_SetConfig+0x98>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00

08004724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 030a 	bic.w	r3, r3, #10
 8004760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0210 	bic.w	r2, r3, #16
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	031b      	lsls	r3, r3, #12
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	621a      	str	r2, [r3, #32]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f043 0307 	orr.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	021a      	lsls	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	431a      	orrs	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	609a      	str	r2, [r3, #8]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2201      	movs	r2, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1a      	ldr	r2, [r3, #32]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e046      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a16      	ldr	r2, [pc, #88]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800

08004954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e042      	b.n	8004a10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd f930 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fe57 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d16d      	bne.n	8004b14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_UART_Transmit+0x2c>
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e066      	b.n	8004b16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a56:	f7fd f9d3 	bl	8001e00 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a70:	d108      	bne.n	8004a84 <HAL_UART_Transmit+0x6c>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e003      	b.n	8004a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a8c:	e02a      	b.n	8004ae4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fba6 	bl	80051ea <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e036      	b.n	8004b16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004abc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	e007      	b.n	8004ad6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1cf      	bne.n	8004a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2140      	movs	r1, #64	; 0x40
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fb76 	bl	80051ea <UART_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e006      	b.n	8004b16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b08a      	sub	sp, #40	; 0x28
 8004b22:	af02      	add	r7, sp, #8
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d17c      	bne.n	8004c38 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_Receive+0x2c>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e075      	b.n	8004c3a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2222      	movs	r2, #34	; 0x22
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd f94d 	bl	8001e00 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Receive+0x72>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b98:	e043      	b.n	8004c22 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb20 	bl	80051ea <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e042      	b.n	8004c3a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	3302      	adds	r3, #2
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e01f      	b.n	8004c14 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d007      	beq.n	8004bee <HAL_UART_Receive+0xd0>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_UART_Receive+0xde>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e008      	b.n	8004c0e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1b6      	bne.n	8004b9a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d112      	bne.n	8004c82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Receive_IT+0x26>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e00b      	b.n	8004c84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	461a      	mov	r2, r3
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fb24 	bl	80052c6 <UART_Start_Receive_IT>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	e000      	b.n	8004c84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b0ba      	sub	sp, #232	; 0xe8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x66>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fc01 	bl	80054f2 <UART_Receive_IT>
      return;
 8004cf0:	e25b      	b.n	80051aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80de 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x22c>
 8004cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80d1 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_UART_IRQHandler+0xae>
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_UART_IRQHandler+0xd2>
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_UART_IRQHandler+0xf6>
 8004d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0204 	orr.w	r2, r3, #4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <HAL_UART_IRQHandler+0x126>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f043 0208 	orr.w	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 81f2 	beq.w	80051a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_UART_IRQHandler+0x14e>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb8c 	bl	80054f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_UART_IRQHandler+0x17a>
 8004dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04f      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa96 	bl	8005338 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d041      	beq.n	8004e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3314      	adds	r3, #20
 8004e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1d9      	bne.n	8004e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	4a7e      	ldr	r2, [pc, #504]	; (800506c <HAL_UART_IRQHandler+0x3e0>)
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd f936 	bl	80020ec <HAL_DMA_Abort_IT>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e90:	4610      	mov	r0, r2
 8004e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00e      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f993 	bl	80051c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e00a      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f98f 	bl	80051c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e006      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f98b 	bl	80051c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004eb2:	e175      	b.n	80051a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	bf00      	nop
    return;
 8004eb6:	e173      	b.n	80051a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f040 814f 	bne.w	8005160 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8148 	beq.w	8005160 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8141 	beq.w	8005160 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80b6 	beq.w	8005070 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8145 	beq.w	80051a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f22:	429a      	cmp	r2, r3
 8004f24:	f080 813e 	bcs.w	80051a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	f000 8088 	beq.w	800504c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1d9      	bne.n	8004f3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e1      	bne.n	8004f88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fe8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e3      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800502e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005030:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800503c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	4618      	mov	r0, r3
 8005048:	f7fd f815 	bl	8002076 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800505a:	b29b      	uxth	r3, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	b29b      	uxth	r3, r3
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8b6 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005068:	e09c      	b.n	80051a4 <HAL_UART_IRQHandler+0x518>
 800506a:	bf00      	nop
 800506c:	080053fd 	.word	0x080053fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 808e 	beq.w	80051a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800508c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8089 	beq.w	80051a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ba:	647a      	str	r2, [r7, #68]	; 0x44
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	623b      	str	r3, [r7, #32]
   return(result);
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050f2:	633a      	str	r2, [r7, #48]	; 0x30
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60fb      	str	r3, [r7, #12]
   return(result);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	617b      	str	r3, [r7, #20]
   return(result);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e3      	bne.n	8005114 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f83b 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800515e:	e023      	b.n	80051a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <HAL_UART_IRQHandler+0x4f4>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f953 	bl	8005424 <UART_Transmit_IT>
    return;
 800517e:	e014      	b.n	80051aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00e      	beq.n	80051aa <HAL_UART_IRQHandler+0x51e>
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f992 	bl	80054c2 <UART_EndTransmit_IT>
    return;
 800519e:	e004      	b.n	80051aa <HAL_UART_IRQHandler+0x51e>
    return;
 80051a0:	bf00      	nop
 80051a2:	e002      	b.n	80051aa <HAL_UART_IRQHandler+0x51e>
      return;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <HAL_UART_IRQHandler+0x51e>
      return;
 80051a8:	bf00      	nop
  }
}
 80051aa:	37e8      	adds	r7, #232	; 0xe8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b090      	sub	sp, #64	; 0x40
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	e050      	b.n	800529e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d04c      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x30>
 800520a:	f7fc fdf9 	bl	8001e00 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005216:	429a      	cmp	r2, r3
 8005218:	d241      	bcs.n	800529e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800523a:	637a      	str	r2, [r7, #52]	; 0x34
 800523c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	613b      	str	r3, [r7, #16]
   return(result);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800526e:	623a      	str	r2, [r7, #32]
 8005270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	69f9      	ldr	r1, [r7, #28]
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	61bb      	str	r3, [r7, #24]
   return(result);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e00f      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d09f      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3740      	adds	r7, #64	; 0x40
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2222      	movs	r2, #34	; 0x22
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0220 	orr.w	r2, r2, #32
 800532a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b095      	sub	sp, #84	; 0x54
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005360:	643a      	str	r2, [r7, #64]	; 0x40
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	61fb      	str	r3, [r7, #28]
   return(result);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d119      	bne.n	80053e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	647b      	str	r3, [r7, #68]	; 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d0:	61ba      	str	r2, [r7, #24]
 80053d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6979      	ldr	r1, [r7, #20]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	613b      	str	r3, [r7, #16]
   return(result);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e5      	bne.n	80053b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053f2:	bf00      	nop
 80053f4:	3754      	adds	r7, #84	; 0x54
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff fed3 	bl	80051c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b21      	cmp	r3, #33	; 0x21
 8005436:	d13e      	bne.n	80054b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d114      	bne.n	800546c <UART_Transmit_IT+0x48>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d110      	bne.n	800546c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800545e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]
 800546a:	e008      	b.n	800547e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6211      	str	r1, [r2, #32]
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4619      	mov	r1, r3
 800548c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe64 	bl	80051b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	; 0x30
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	f040 80ae 	bne.w	8005664 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d117      	bne.n	8005542 <UART_Receive_IT+0x50>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	b29a      	uxth	r2, r3
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
 8005540:	e026      	b.n	8005590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d007      	beq.n	8005566 <UART_Receive_IT+0x74>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <UART_Receive_IT+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e008      	b.n	8005586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29b      	uxth	r3, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4619      	mov	r1, r3
 800559e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d15d      	bne.n	8005660 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0220 	bic.w	r2, r2, #32
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d135      	bne.n	8005656 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	623a      	str	r2, [r7, #32]
 8005612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	61bb      	str	r3, [r7, #24]
   return(result);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b10      	cmp	r3, #16
 8005630:	d10a      	bne.n	8005648 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fdc0 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
 8005654:	e002      	b.n	800565c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9d8 	bl	8005a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e002      	b.n	8005666 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056aa:	f023 030c 	bic.w	r3, r3, #12
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <UART_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe f9b6 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	e002      	b.n	80056e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe f99e 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80056e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009a      	lsls	r2, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	4a22      	ldr	r2, [pc, #136]	; (8005788 <UART_SetConfig+0x118>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	0119      	lsls	r1, r3, #4
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009a      	lsls	r2, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fbb2 f2f3 	udiv	r2, r2, r3
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <UART_SetConfig+0x118>)
 800571e:	fba3 0302 	umull	r0, r3, r3, r2
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2064      	movs	r0, #100	; 0x64
 8005726:	fb00 f303 	mul.w	r3, r0, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	3332      	adds	r3, #50	; 0x32
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <UART_SetConfig+0x118>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573c:	4419      	add	r1, r3
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009a      	lsls	r2, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fbb2 f2f3 	udiv	r2, r2, r3
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <UART_SetConfig+0x118>)
 8005756:	fba3 0302 	umull	r0, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2064      	movs	r0, #100	; 0x64
 800575e:	fb00 f303 	mul.w	r3, r0, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	; 0x32
 8005768:	4a07      	ldr	r2, [pc, #28]	; (8005788 <UART_SetConfig+0x118>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	440a      	add	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40013800 	.word	0x40013800
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <WriteBuffer>:

uint8_t Rx_buffer[1024];
uint16_t Rx_Head = 0;
uint16_t Rx_Tail = 0;

void WriteBuffer(uint8_t buff){
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
	Rx_buffer[Rx_Head] = buff;
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <WriteBuffer+0x60>)
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <WriteBuffer+0x64>)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	5453      	strb	r3, [r2, r1]
	Rx_Head = (Rx_Head + 1) % UART_RX_BUFFER_SIZE;
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <WriteBuffer+0x60>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	3301      	adds	r3, #1
 80057a8:	425a      	negs	r2, r3
 80057aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80057b2:	bf58      	it	pl
 80057b4:	4253      	negpl	r3, r2
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <WriteBuffer+0x60>)
 80057ba:	801a      	strh	r2, [r3, #0]
	if(Rx_Head == Rx_Tail)
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <WriteBuffer+0x60>)
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <WriteBuffer+0x68>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10c      	bne.n	80057e2 <WriteBuffer+0x56>
		Rx_Tail = (Rx_Tail + 1) % UART_RX_BUFFER_SIZE;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <WriteBuffer+0x68>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	425a      	negs	r2, r3
 80057d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80057d8:	bf58      	it	pl
 80057da:	4253      	negpl	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <WriteBuffer+0x68>)
 80057e0:	801a      	strh	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	20000b78 	.word	0x20000b78
 80057f0:	20000778 	.word	0x20000778
 80057f4:	20000b7a 	.word	0x20000b7a

080057f8 <ReadBuffer>:

uint8_t ReadBuffer(){
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
	if(Rx_Tail == Rx_Head){
 80057fe:	4b13      	ldr	r3, [pc, #76]	; (800584c <ReadBuffer+0x54>)
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <ReadBuffer+0x58>)
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d107      	bne.n	800581a <ReadBuffer+0x22>
		Rx_Head = 0;
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <ReadBuffer+0x58>)
 800580c:	2200      	movs	r2, #0
 800580e:	801a      	strh	r2, [r3, #0]
		Rx_Tail = 0;
 8005810:	4b0e      	ldr	r3, [pc, #56]	; (800584c <ReadBuffer+0x54>)
 8005812:	2200      	movs	r2, #0
 8005814:	801a      	strh	r2, [r3, #0]
		return 0;
 8005816:	2300      	movs	r3, #0
 8005818:	e013      	b.n	8005842 <ReadBuffer+0x4a>
	}		
	uint8_t data = Rx_buffer[Rx_Tail];
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <ReadBuffer+0x54>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <ReadBuffer+0x5c>)
 8005822:	5c9b      	ldrb	r3, [r3, r2]
 8005824:	71fb      	strb	r3, [r7, #7]
	Rx_Tail = (Rx_Tail + 1) % UART_RX_BUFFER_SIZE;
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <ReadBuffer+0x54>)
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	425a      	negs	r2, r3
 800582e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005832:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005836:	bf58      	it	pl
 8005838:	4253      	negpl	r3, r2
 800583a:	b29a      	uxth	r2, r3
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <ReadBuffer+0x54>)
 800583e:	801a      	strh	r2, [r3, #0]
	return data;
 8005840:	79fb      	ldrb	r3, [r7, #7]
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	20000b7a 	.word	0x20000b7a
 8005850:	20000b78 	.word	0x20000b78
 8005854:	20000778 	.word	0x20000778

08005858 <AT_COMMAND>:
uint8_t Send_sign[] = "send fail\r\n";
uint8_t Success_sign[] = "success\r\n";
uint8_t Error_sign[] = "error\r\n";
uint8_t None_sign[] = "none\r\n";

uint8_t AT_COMMAND(uint8_t *cmd, uint8_t repeat, uint16_t timeout){
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
 8005864:	4613      	mov	r3, r2
 8005866:	803b      	strh	r3, [r7, #0]


	while(repeat > 0){
 8005868:	e018      	b.n	800589c <AT_COMMAND+0x44>
		memset(BBOX, 0, sizeof(BBOX));
 800586a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800586e:	2100      	movs	r1, #0
 8005870:	481f      	ldr	r0, [pc, #124]	; (80058f0 <AT_COMMAND+0x98>)
 8005872:	f002 f813 	bl	800789c <memset>
		BBOX_count = 0;
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <AT_COMMAND+0x9c>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit(&huart1, cmd, strlen((char *)cmd), 100) == HAL_OK) {
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fa fc67 	bl	8000150 <strlen>
 8005882:	4603      	mov	r3, r0
 8005884:	b29a      	uxth	r2, r3
 8005886:	2364      	movs	r3, #100	; 0x64
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	481b      	ldr	r0, [pc, #108]	; (80058f8 <AT_COMMAND+0xa0>)
 800588c:	f7ff f8c4 	bl	8004a18 <HAL_UART_Transmit>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <AT_COMMAND+0x4c>
			break;
		}
		repeat--;
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	3b01      	subs	r3, #1
 800589a:	70fb      	strb	r3, [r7, #3]
	while(repeat > 0){
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <AT_COMMAND+0x12>
 80058a2:	e000      	b.n	80058a6 <AT_COMMAND+0x4e>
			break;
 80058a4:	bf00      	nop
	}
	if(repeat == 0){
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d119      	bne.n	80058e0 <AT_COMMAND+0x88>
		//HAL_UART_Transmit(&huart2, Send_sign, strlen((char *)Send_sign), 100);
		//printf("send fail\r\n");
		return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e01b      	b.n	80058e8 <AT_COMMAND+0x90>
	}
	while(timeout > 0){

		if (strstr((char *)BBOX, "OK") != 0){
 80058b0:	4912      	ldr	r1, [pc, #72]	; (80058fc <AT_COMMAND+0xa4>)
 80058b2:	480f      	ldr	r0, [pc, #60]	; (80058f0 <AT_COMMAND+0x98>)
 80058b4:	f002 f80c 	bl	80078d0 <strstr>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <AT_COMMAND+0x6a>
			//HAL_UART_Transmit(&huart2, Success_sign, strlen((char *)Success_sign), 100);
			//printf("\r\nOK\r\n");
			return true;
 80058be:	2301      	movs	r3, #1
 80058c0:	e012      	b.n	80058e8 <AT_COMMAND+0x90>
		}
		// ERROR -> FAIL
		else if (strstr((char *)BBOX, "FAIL") != 0){
 80058c2:	490f      	ldr	r1, [pc, #60]	; (8005900 <AT_COMMAND+0xa8>)
 80058c4:	480a      	ldr	r0, [pc, #40]	; (80058f0 <AT_COMMAND+0x98>)
 80058c6:	f002 f803 	bl	80078d0 <strstr>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <AT_COMMAND+0x7c>
			//HAL_UART_Transmit(&huart2, Error_sign, strlen((char *)Error_sign), 100);
			//printf("\r\nError\r\n");
			return false;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e009      	b.n	80058e8 <AT_COMMAND+0x90>
		}

		timeout -= 10;
 80058d4:	883b      	ldrh	r3, [r7, #0]
 80058d6:	3b0a      	subs	r3, #10
 80058d8:	803b      	strh	r3, [r7, #0]
		HAL_Delay(10);
 80058da:	200a      	movs	r0, #10
 80058dc:	f7fc fa9a 	bl	8001e14 <HAL_Delay>
	while(timeout > 0){
 80058e0:	883b      	ldrh	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e4      	bne.n	80058b0 <AT_COMMAND+0x58>


	//HAL_UART_Transmit(&huart2, None_sign, strlen((char *)None_sign), 100);
	//HAL_UART_Transmit(&huart2, BBOX, strlen((char *)BBOX), 100);

	return false;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000374 	.word	0x20000374
 80058f4:	20000775 	.word	0x20000775
 80058f8:	200002e0 	.word	0x200002e0
 80058fc:	0800b088 	.word	0x0800b088
 8005900:	0800b08c 	.word	0x0800b08c

08005904 <SendAT>:

// AT
uint8_t SendAT() {
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
	uint8_t res = AT_COMMAND((uint8_t *)"AT\r\n", 10, 1000);
 800590a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800590e:	210a      	movs	r1, #10
 8005910:	4807      	ldr	r0, [pc, #28]	; (8005930 <SendAT+0x2c>)
 8005912:	f7ff ffa1 	bl	8005858 <AT_COMMAND>
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
	if(res)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <SendAT+0x20>
		return false;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <SendAT+0x22>
	return true;
 8005924:	2301      	movs	r3, #1
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0800b094 	.word	0x0800b094

08005934 <WifiAccess>:
}



// AT CWJAP
uint8_t WifiAccess() {
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	//uint8_t res = AT_COMMAND((uint8_t *)"AT+CWLAP\r\n" , 10, 1000);
	uint8_t res = AT_COMMAND((uint8_t *)"AT+CWJAP=\"801em1\",\"ssafy1357\"\r\n" , 10, 1000);
 800593a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800593e:	210a      	movs	r1, #10
 8005940:	4807      	ldr	r0, [pc, #28]	; (8005960 <WifiAccess+0x2c>)
 8005942:	f7ff ff89 	bl	8005858 <AT_COMMAND>
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
//	uint8_t res = AT_COMMAND((uint8_t *)"AT+CWJAP=\"vnqzl\",\"104vnqzl\"" , 10, 1000);
	if(res)
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <WifiAccess+0x20>
		return false;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <WifiAccess+0x22>
	return true;
 8005954:	2301      	movs	r3, #1
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	0800b0a8 	.word	0x0800b0a8

08005964 <RaspiTCPSocketAccess>:
		return false;
	return true;
}


uint8_t RaspiTCPSocketAccess() {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
	uint8_t res = AT_COMMAND((uint8_t *)"AT+CIPSTART=\"TCP\",\"192.168.0.41\",12345\r\n" , 10, 1000);
 800596a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596e:	210a      	movs	r1, #10
 8005970:	4807      	ldr	r0, [pc, #28]	; (8005990 <RaspiTCPSocketAccess+0x2c>)
 8005972:	f7ff ff71 	bl	8005858 <AT_COMMAND>
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
//	uint8_t res = AT_COMMAND((uint8_t *)"AT+CIPSTART=0,\"TCP\",\"192.168.0.41\",12345\r\n" , 10, 1000);
	if(res)
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <RaspiTCPSocketAccess+0x20>
		return false;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <RaspiTCPSocketAccess+0x22>
	return true;
 8005984:	2301      	movs	r3, #1
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	0800b118 	.word	0x0800b118

08005994 <SendDataToRasp>:


uint8_t SendDataToRasp(uint8_t size, uint8_t * data) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b0a4      	sub	sp, #144	; 0x90
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
	uint8_t str[128] = {0, };
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	227c      	movs	r2, #124	; 0x7c
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 ff75 	bl	800789c <memset>

	sprintf((char *)str, "AT+CIPSEND=%u\r\n", size);
 80059b2:	79fa      	ldrb	r2, [r7, #7]
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	4913      	ldr	r1, [pc, #76]	; (8005a08 <SendDataToRasp+0x74>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fe76 	bl	80076ac <siprintf>
	uint8_t res = AT_COMMAND(str, 10, 1000);
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059c8:	210a      	movs	r1, #10
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff44 	bl	8005858 <AT_COMMAND>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t res1 = AT_COMMAND(data, 10, 1000);
 80059d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059da:	210a      	movs	r1, #10
 80059dc:	6838      	ldr	r0, [r7, #0]
 80059de:	f7ff ff3b 	bl	8005858 <AT_COMMAND>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

	if(res || res1)
 80059e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <SendDataToRasp+0x64>
 80059f0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <SendDataToRasp+0x68>
		return false;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <SendDataToRasp+0x6a>
	return true;
 80059fc:	2301      	movs	r3, #1
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3790      	adds	r7, #144	; 0x90
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	0800b144 	.word	0x0800b144

08005a0c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <HAL_UART_RxCpltCallback+0x48>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d115      	bne.n	8005a4a <HAL_UART_RxCpltCallback+0x3e>
		// !!!- DO not printf Here -!!!
		BBOX[BBOX_count++] = buff;
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <HAL_UART_RxCpltCallback+0x4c>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	b2d1      	uxtb	r1, r2
 8005a28:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <HAL_UART_RxCpltCallback+0x4c>)
 8005a2a:	7011      	strb	r1, [r2, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_UART_RxCpltCallback+0x50>)
 8005a30:	7819      	ldrb	r1, [r3, #0]
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_UART_RxCpltCallback+0x54>)
 8005a34:	5499      	strb	r1, [r3, r2]
		WriteBuffer(buff);
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_UART_RxCpltCallback+0x50>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fea6 	bl	800578c <WriteBuffer>
		HAL_UART_Receive_IT(huart, &buff, 1);
 8005a40:	2201      	movs	r2, #1
 8005a42:	4906      	ldr	r1, [pc, #24]	; (8005a5c <HAL_UART_RxCpltCallback+0x50>)
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff f8fc 	bl	8004c42 <HAL_UART_Receive_IT>
	}

}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40013800 	.word	0x40013800
 8005a58:	20000775 	.word	0x20000775
 8005a5c:	20000774 	.word	0x20000774
 8005a60:	20000374 	.word	0x20000374

08005a64 <setInterrupt>:


void setInterrupt() {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &buff, 1);
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4903      	ldr	r1, [pc, #12]	; (8005a78 <setInterrupt+0x14>)
 8005a6c:	4803      	ldr	r0, [pc, #12]	; (8005a7c <setInterrupt+0x18>)
 8005a6e:	f7ff f8e8 	bl	8004c42 <HAL_UART_Receive_IT>
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000774 	.word	0x20000774
 8005a7c:	200002e0 	.word	0x200002e0

08005a80 <HAL_TIM_PeriodElapsedCallback>:
//extern void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
//extern uint32_t GetMicroSec(void);

uint32_t overflows = 0U;
extern TIM_HandleTypeDef htim1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // 제네레이트 없음
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a06      	ldr	r2, [pc, #24]	; (8005aa8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d104      	bne.n	8005a9c <HAL_TIM_PeriodElapsedCallback+0x1c>
		overflows++;
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a04      	ldr	r2, [pc, #16]	; (8005aac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005a9a:	6013      	str	r3, [r2, #0]
	}
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	20000b7c 	.word	0x20000b7c

08005ab0 <GetMicroSec>:


uint32_t GetMicroSec(void){ // 제네레이트 없음
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
	uint32_t count = __HAL_TIM_GET_COUNTER(&htim1);
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <GetMicroSec+0x44>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	603b      	str	r3, [r7, #0]
	uint32_t overflow = overflows;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <GetMicroSec+0x48>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	607b      	str	r3, [r7, #4]
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) && (count < 0x8000)) {
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <GetMicroSec+0x44>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d106      	bne.n	8005ae0 <GetMicroSec+0x30>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad8:	d202      	bcs.n	8005ae0 <GetMicroSec+0x30>
	        overflow++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3301      	adds	r3, #1
 8005ade:	607b      	str	r3, [r7, #4]
	}

	return(overflow << 16) + count;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	041a      	lsls	r2, r3, #16
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4413      	add	r3, r2
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000250 	.word	0x20000250
 8005af8:	20000b7c 	.word	0x20000b7c

08005afc <sensing>:


uint8_t sensing(GI sensor) { // 마그네틱 같은거
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	463b      	mov	r3, r7
 8005b04:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t ret = HAL_GPIO_ReadPin(sensor.Port, sensor.PIN);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	88ba      	ldrh	r2, [r7, #4]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fc fce8 	bl	80024e4 <HAL_GPIO_ReadPin>
 8005b14:	4603      	mov	r3, r0
 8005b16:	73fb      	strb	r3, [r7, #15]
    return ret;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <turnLED>:

void turnLED(GI led, uint8_t is_ON) { // bool 을 uint8_t로 바꾸었습니다.
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b30:	4613      	mov	r3, r2
 8005b32:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(led.Port, led.PIN_out, is_ON);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	89f9      	ldrh	r1, [r7, #14]
 8005b38:	79fa      	ldrb	r2, [r7, #7]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc fce9 	bl	8002512 <HAL_GPIO_WritePin>
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <motor_start>:


void motor_start(TI motor) { // 우리는 모터가 두 개라서 두개를 스타트 해야합니다.
 8005b48:	b084      	sub	sp, #16
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	f107 0c08 	add.w	ip, r7, #8
 8005b52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_PWM_Start(&(motor.htim), motor.channel);
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f107 0008 	add.w	r0, r7, #8
 8005b5e:	f7fe f89f 	bl	8003ca0 <HAL_TIM_PWM_Start>
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4770      	bx	lr

08005b6e <runMotor>:

void runMotor(TI motor, uint16_t degree) { // 근데 이거 조금 생각해봐야 할거에요. g
 8005b6e:	b084      	sub	sp, #16
 8005b70:	b490      	push	{r4, r7}
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	f107 0408 	add.w	r4, r7, #8
 8005b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    __HAL_TIM_SET_COMPARE(&(motor.htim), motor.channel, degree);
 8005b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <runMotor+0x1e>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b88:	635a      	str	r2, [r3, #52]	; 0x34

    // degree는 500이 0도 // 1000 이 90도
    // main문을 하면서 다시 검증해볼 필요 있음 (MG996R이랑 SG90이랑 Duty 같음)
}
 8005b8a:	e013      	b.n	8005bb4 <runMotor+0x46>
    __HAL_TIM_SET_COMPARE(&(motor.htim), motor.channel, degree);
 8005b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d104      	bne.n	8005b9c <runMotor+0x2e>
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005b9a:	e00b      	b.n	8005bb4 <runMotor+0x46>
    __HAL_TIM_SET_COMPARE(&(motor.htim), motor.channel, degree);
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d104      	bne.n	8005bac <runMotor+0x3e>
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ba8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005baa:	e003      	b.n	8005bb4 <runMotor+0x46>
    __HAL_TIM_SET_COMPARE(&(motor.htim), motor.channel, degree);
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc90      	pop	{r4, r7}
 8005bba:	b004      	add	sp, #16
 8005bbc:	4770      	bx	lr
	...

08005bc0 <getDistance>:

float getDistance(GI Sensor) { // 초음파
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, RESET);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	88f9      	ldrh	r1, [r7, #6]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fc fc9d 	bl	8002512 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8005bd8:	2005      	movs	r0, #5
 8005bda:	f7fc f91b 	bl	8001e14 <HAL_Delay>
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, SET);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88f9      	ldrh	r1, [r7, #6]
 8005be2:	2201      	movs	r2, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fc fc94 	bl	8002512 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8005bea:	2014      	movs	r0, #20
 8005bec:	f7fc f912 	bl	8001e14 <HAL_Delay>
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, RESET);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88f9      	ldrh	r1, [r7, #6]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fc fc8b 	bl	8002512 <HAL_GPIO_WritePin>

    //printf("right after : %lu\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));

    uint32_t start_time = HAL_GetTick();
 8005bfc:	f7fc f900 	bl	8001e00 <HAL_GetTick>
 8005c00:	61f8      	str	r0, [r7, #28]
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_RESET){
 8005c02:	e009      	b.n	8005c18 <getDistance+0x58>
    	if(HAL_GetTick() - start_time > 1000){
 8005c04:	f7fc f8fc 	bl	8001e00 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c12:	d901      	bls.n	8005c18 <getDistance+0x58>
    		return -1.0;
 8005c14:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <getDistance+0xf8>)
 8005c16:	e044      	b.n	8005ca2 <getDistance+0xe2>
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_RESET){
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	88ba      	ldrh	r2, [r7, #4]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fc fc60 	bl	80024e4 <HAL_GPIO_ReadPin>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ec      	beq.n	8005c04 <getDistance+0x44>
    	}
    }
    uint32_t st = GetMicroSec();
 8005c2a:	f7ff ff41 	bl	8005ab0 <GetMicroSec>
 8005c2e:	61b8      	str	r0, [r7, #24]
    start_time = HAL_GetTick();
 8005c30:	f7fc f8e6 	bl	8001e00 <HAL_GetTick>
 8005c34:	61f8      	str	r0, [r7, #28]
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_SET){
 8005c36:	e009      	b.n	8005c4c <getDistance+0x8c>
    	if(HAL_GetTick() - start_time > 1000){
 8005c38:	f7fc f8e2 	bl	8001e00 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c46:	d901      	bls.n	8005c4c <getDistance+0x8c>
			return -1.0;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <getDistance+0xf8>)
 8005c4a:	e02a      	b.n	8005ca2 <getDistance+0xe2>
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_SET){
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	88ba      	ldrh	r2, [r7, #4]
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fc fc46 	bl	80024e4 <HAL_GPIO_ReadPin>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d0ec      	beq.n	8005c38 <getDistance+0x78>
    	}
    }
    uint32_t ed = GetMicroSec();
 8005c5e:	f7ff ff27 	bl	8005ab0 <GetMicroSec>
 8005c62:	6178      	str	r0, [r7, #20]

    uint32_t diff = ed - st;
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	613b      	str	r3, [r7, #16]
    float ret = diff * 0.034 / 2;
 8005c6c:	6938      	ldr	r0, [r7, #16]
 8005c6e:	f7fa fbb9 	bl	80003e4 <__aeabi_ui2d>
 8005c72:	a30f      	add	r3, pc, #60	; (adr r3, 8005cb0 <getDistance+0xf0>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fc2e 	bl	80004d8 <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c8c:	f7fa fd4e 	bl	800072c <__aeabi_ddiv>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4610      	mov	r0, r2
 8005c96:	4619      	mov	r1, r3
 8005c98:	f7fa ff16 	bl	8000ac8 <__aeabi_d2f>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	60fb      	str	r3, [r7, #12]

    return ret;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w
 8005cb0:	b020c49c 	.word	0xb020c49c
 8005cb4:	3fa16872 	.word	0x3fa16872
 8005cb8:	bf800000 	.word	0xbf800000
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <getIRTemperature>:

float getIRTemperature(II ir) {
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b088      	sub	sp, #32
 8005cc6:	af04      	add	r7, sp, #16
 8005cc8:	f107 0c18 	add.w	ip, r7, #24
 8005ccc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // 이건 "mlx90614.h" 와 "mlx90614.c" 가 있어용.
    // 복사해서 쓰면 함수 쓸 수 있어용.
    // 함수 : float MLX90614_ReadTemperature(void);
    // 앤 그외에 적을거 없어요.

    uint8_t data[3] = { 0, };
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <getIRTemperature+0xa0>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	80bb      	strh	r3, [r7, #4]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&(ir.hi2c1), (0x5A << 1), 0x07, 0x00000001U, data, 3, HAL_MAX_DELAY);
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	9302      	str	r3, [sp, #8]
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	2207      	movs	r2, #7
 8005cec:	21b4      	movs	r1, #180	; 0xb4
 8005cee:	f107 0018 	add.w	r0, r7, #24
 8005cf2:	f7fc fd8d 	bl	8002810 <HAL_I2C_Mem_Read>
    //HAL_I2C_Mem_Read(&hi2c1, MLX90614_I2C_ADDR, 0x07, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);

    int16_t rawTemperature = (data[1] << 8) | data[0];
 8005cf6:	797b      	ldrb	r3, [r7, #5]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	793b      	ldrb	r3, [r7, #4]
 8005cfe:	b21b      	sxth	r3, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	81fb      	strh	r3, [r7, #14]
    float temperature = rawTemperature * 0.02 - 273.15;
 8005d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fa fb7b 	bl	8000404 <__aeabi_i2d>
 8005d0e:	a310      	add	r3, pc, #64	; (adr r3, 8005d50 <getIRTemperature+0x90>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	a30d      	add	r3, pc, #52	; (adr r3, 8005d58 <getIRTemperature+0x98>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f7fa fa1f 	bl	8000168 <__aeabi_dsub>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4619      	mov	r1, r3
 8005d32:	f7fa fec9 	bl	8000ac8 <__aeabi_d2f>
 8005d36:	4603      	mov	r3, r0
 8005d38:	60bb      	str	r3, [r7, #8]

    return temperature;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d46:	b004      	add	sp, #16
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w
 8005d50:	47ae147b 	.word	0x47ae147b
 8005d54:	3f947ae1 	.word	0x3f947ae1
 8005d58:	66666666 	.word	0x66666666
 8005d5c:	40711266 	.word	0x40711266
 8005d60:	0800b184 	.word	0x0800b184

08005d64 <checkMagnetic>:


extern I2C_HandleTypeDef hi2c1;

void checkMagnetic(TS* stall)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
    uint8_t current = sensing(stall->magnetic_door);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3324      	adds	r3, #36	; 0x24
 8005d70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d74:	f7ff fec2 	bl	8005afc <sensing>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]



    if (current == true) {
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d122      	bne.n	8005dc8 <checkMagnetic+0x64>
        if (stall->is_occupied == true) {
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	789b      	ldrb	r3, [r3, #2]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d055      	beq.n	8005e36 <checkMagnetic+0xd2>
            //nothing
        }
        else {
            OCCUPIED_STALL_CNT++;
 8005d8a:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <checkMagnetic+0x100>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	3301      	adds	r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <checkMagnetic+0x100>)
 8005d96:	701a      	strb	r2, [r3, #0]
            stall->is_occupied = true;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	709a      	strb	r2, [r3, #2]
            memset(MsgBox, 0, sizeof(MsgBox));
 8005d9e:	2232      	movs	r2, #50	; 0x32
 8005da0:	2100      	movs	r1, #0
 8005da2:	4831      	ldr	r0, [pc, #196]	; (8005e68 <checkMagnetic+0x104>)
 8005da4:	f001 fd7a 	bl	800789c <memset>
            sprintf(MsgBox, "toiletOccupied,%u,\r\n", stall->toilet_key);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	492f      	ldr	r1, [pc, #188]	; (8005e6c <checkMagnetic+0x108>)
 8005db0:	482d      	ldr	r0, [pc, #180]	; (8005e68 <checkMagnetic+0x104>)
 8005db2:	f001 fc7b 	bl	80076ac <siprintf>
            SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8005db6:	482c      	ldr	r0, [pc, #176]	; (8005e68 <checkMagnetic+0x104>)
 8005db8:	f7fa f9ca 	bl	8000150 <strlen>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	492a      	ldr	r1, [pc, #168]	; (8005e68 <checkMagnetic+0x104>)
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fde7 	bl	8005994 <SendDataToRasp>
 8005dc6:	e036      	b.n	8005e36 <checkMagnetic+0xd2>
        }
    }
    else {
        if (stall->is_occupied == true) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	789b      	ldrb	r3, [r3, #2]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d132      	bne.n	8005e36 <checkMagnetic+0xd2>
            if (stall->last_open_time != 0) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d029      	beq.n	8005e2c <checkMagnetic+0xc8>
                if ( (HAL_GetTick() - stall->last_open_time) >= TERM_CHANGE_OCCUPIED) { // GetTick()/(1000*60)%60 ms -> min
 8005dd8:	f7fc f812 	bl	8001e00 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b63      	cmp	r3, #99	; 0x63
 8005de6:	d926      	bls.n	8005e36 <checkMagnetic+0xd2>
                	OCCUPIED_STALL_CNT--;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <checkMagnetic+0x100>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <checkMagnetic+0x100>)
 8005df4:	701a      	strb	r2, [r3, #0]
                	stall->is_occupied = false;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	709a      	strb	r2, [r3, #2]
                    stall->last_open_time = 0;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]
                    memset(MsgBox, 0, sizeof(MsgBox));
 8005e02:	2232      	movs	r2, #50	; 0x32
 8005e04:	2100      	movs	r1, #0
 8005e06:	4818      	ldr	r0, [pc, #96]	; (8005e68 <checkMagnetic+0x104>)
 8005e08:	f001 fd48 	bl	800789c <memset>
                    sprintf(MsgBox, "toiletVacant,%u,\r\n", stall->toilet_key);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4917      	ldr	r1, [pc, #92]	; (8005e70 <checkMagnetic+0x10c>)
 8005e14:	4814      	ldr	r0, [pc, #80]	; (8005e68 <checkMagnetic+0x104>)
 8005e16:	f001 fc49 	bl	80076ac <siprintf>
                    SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8005e1a:	4813      	ldr	r0, [pc, #76]	; (8005e68 <checkMagnetic+0x104>)
 8005e1c:	f7fa f998 	bl	8000150 <strlen>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4911      	ldr	r1, [pc, #68]	; (8005e68 <checkMagnetic+0x104>)
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fdb5 	bl	8005994 <SendDataToRasp>
 8005e2a:	e004      	b.n	8005e36 <checkMagnetic+0xd2>
                }
            }
            else {
                stall->last_open_time = HAL_GetTick();
 8005e2c:	f7fb ffe8 	bl	8001e00 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]
        }
        else {
            //nothing
        }
    }
    turnLED(stall->led_usable, !current);
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3398      	adds	r3, #152	; 0x98
 8005e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e4c:	f7ff fe69 	bl	8005b22 <turnLED>


#if DEBUG
    printf("magnetic: %u, ", current);
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4807      	ldr	r0, [pc, #28]	; (8005e74 <checkMagnetic+0x110>)
 8005e56:	f001 fb05 	bl	8007464 <iprintf>
#endif


}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000000 	.word	0x20000000
 8005e68:	20000b80 	.word	0x20000b80
 8005e6c:	0800b188 	.word	0x0800b188
 8005e70:	0800b1a0 	.word	0x0800b1a0
 8005e74:	0800b1b4 	.word	0x0800b1b4

08005e78 <checkTissueAmount>:

void checkTissueAmount(TS* stall) {
 8005e78:	b5b0      	push	{r4, r5, r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	6078      	str	r0, [r7, #4]
    float current_dist = getDistance(stall->sonar_tissue);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	332c      	adds	r3, #44	; 0x2c
 8005e84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e88:	f7ff fe9a 	bl	8005bc0 <getDistance>
 8005e8c:	6138      	str	r0, [r7, #16]
    float tissue_percentage = (MIN_TISSUE_DISTANCE - current_dist) / MAX_TISSUE_RADIUS * 100;
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	4838      	ldr	r0, [pc, #224]	; (8005f74 <checkTissueAmount+0xfc>)
 8005e92:	f7fa fe6d 	bl	8000b70 <__aeabi_fsub>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb f825 	bl	8000eec <__aeabi_fdiv>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4934      	ldr	r1, [pc, #208]	; (8005f78 <checkTissueAmount+0x100>)
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa ff6c 	bl	8000d84 <__aeabi_fmul>
 8005eac:	4603      	mov	r3, r0
 8005eae:	617b      	str	r3, [r7, #20]
    if(tissue_percentage <= 0.0) tissue_percentage = 0.0f;
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	6978      	ldr	r0, [r7, #20]
 8005eb6:	f7fb f90d 	bl	80010d4 <__aeabi_fcmple>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <checkTissueAmount+0x4e>
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

    // float -> uint8_t
    uint8_t percentage = tissue_percentage;
 8005ec6:	6978      	ldr	r0, [r7, #20]
 8005ec8:	f7fb f922 	bl	8001110 <__aeabi_f2uiz>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
    memset(MsgBox, 0, sizeof(MsgBox));
 8005ed0:	2232      	movs	r2, #50	; 0x32
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4829      	ldr	r0, [pc, #164]	; (8005f7c <checkTissueAmount+0x104>)
 8005ed6:	f001 fce1 	bl	800789c <memset>
    sprintf(MsgBox, "tissueStatus,%u,%u,\r\n", percentage,stall->toilet_key);
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	4927      	ldr	r1, [pc, #156]	; (8005f80 <checkTissueAmount+0x108>)
 8005ee2:	4826      	ldr	r0, [pc, #152]	; (8005f7c <checkTissueAmount+0x104>)
 8005ee4:	f001 fbe2 	bl	80076ac <siprintf>
    SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8005ee8:	4824      	ldr	r0, [pc, #144]	; (8005f7c <checkTissueAmount+0x104>)
 8005eea:	f7fa f931 	bl	8000150 <strlen>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4922      	ldr	r1, [pc, #136]	; (8005f7c <checkTissueAmount+0x104>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fd4e 	bl	8005994 <SendDataToRasp>

    if (HAL_GetTick() - stall->last_tissue_time > PERIOD_CHECK_TISSUE) { // 1분 == 60만 Tick
 8005ef8:	f7fb ff82 	bl	8001e00 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d904      	bls.n	8005f16 <checkTissueAmount+0x9e>
        stall->last_tissue_time = HAL_GetTick();
 8005f0c:	f7fb ff78 	bl	8001e00 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	61da      	str	r2, [r3, #28]
    }
    if (tissue_percentage <= THRESHOLD_MIN_TISSUE_PERCENTAGE) {
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	6978      	ldr	r0, [r7, #20]
 8005f1c:	f7fb f8da 	bl	80010d4 <__aeabi_fcmple>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <checkTissueAmount+0xc4>
    		stall->before_tissue_empty = 1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	705a      	strb	r2, [r3, #1]

    	turnLED(stall->led_tissue, true);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	33a8      	adds	r3, #168	; 0xa8
 8005f32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f36:	f7ff fdf4 	bl	8005b22 <turnLED>
 8005f3a:	e006      	b.n	8005f4a <checkTissueAmount+0xd2>
    }
    else {
        turnLED(stall->led_tissue, false);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	33a8      	adds	r3, #168	; 0xa8
 8005f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f46:	f7ff fdec 	bl	8005b22 <turnLED>
    }
#if DEBUG
    printf("tissue dist: %.3f, percentage: %.3f, ", current_dist, tissue_percentage);
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f7fa fa6c 	bl	8000428 <__aeabi_f2d>
 8005f50:	4604      	mov	r4, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f7fa fa67 	bl	8000428 <__aeabi_f2d>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	4807      	ldr	r0, [pc, #28]	; (8005f84 <checkTissueAmount+0x10c>)
 8005f68:	f001 fa7c 	bl	8007464 <iprintf>
#endif
}
 8005f6c:	bf00      	nop
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bdb0      	pop	{r4, r5, r7, pc}
 8005f74:	41900000 	.word	0x41900000
 8005f78:	42c80000 	.word	0x42c80000
 8005f7c:	20000b80 	.word	0x20000b80
 8005f80:	0800b1c4 	.word	0x0800b1c4
 8005f84:	0800b1dc 	.word	0x0800b1dc

08005f88 <checkWaterTissue>:

void checkWaterTissue(TS* stall)
{
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	b095      	sub	sp, #84	; 0x54
 8005f8c:	af10      	add	r7, sp, #64	; 0x40
 8005f8e:	6078      	str	r0, [r7, #4]
    float distance = getDistance(stall->sonar_water_tissue);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3334      	adds	r3, #52	; 0x34
 8005f94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f98:	f7ff fe12 	bl	8005bc0 <getDistance>
 8005f9c:	60f8      	str	r0, [r7, #12]
    if (distance < THRESHOLD_WATER_TISSUE_HAND_DISTANCE) {
 8005f9e:	4921      	ldr	r1, [pc, #132]	; (8006024 <checkWaterTissue+0x9c>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fb f88d 	bl	80010c0 <__aeabi_fcmplt>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d02f      	beq.n	800600c <checkWaterTissue+0x84>
        runMotor(stall->servo_water_tissue, MOTOR_WATER_TISSUE_PUSH_ANGLE);
 8005fac:	687e      	ldr	r6, [r7, #4]
 8005fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fb4:	466d      	mov	r5, sp
 8005fb6:	f106 04c0 	add.w	r4, r6, #192	; 0xc0
 8005fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005fca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005fce:	f106 03b0 	add.w	r3, r6, #176	; 0xb0
 8005fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fd4:	f7ff fdcb 	bl	8005b6e <runMotor>
        HAL_Delay(1000);
 8005fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fdc:	f7fb ff1a 	bl	8001e14 <HAL_Delay>
        runMotor(stall->servo_water_tissue, MOTOR_WATER_TISSUE_BACK_ANGLE);
 8005fe0:	687e      	ldr	r6, [r7, #4]
 8005fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fe8:	466d      	mov	r5, sp
 8005fea:	f106 04c0 	add.w	r4, r6, #192	; 0xc0
 8005fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ffa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005ffe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006002:	f106 03b0 	add.w	r3, r6, #176	; 0xb0
 8006006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006008:	f7ff fdb1 	bl	8005b6e <runMotor>
    }
#if DEBUG
    printf("water tissue dist: %.3f, ", distance);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7fa fa0b 	bl	8000428 <__aeabi_f2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4804      	ldr	r0, [pc, #16]	; (8006028 <checkWaterTissue+0xa0>)
 8006018:	f001 fa24 	bl	8007464 <iprintf>
#endif
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006024:	41200000 	.word	0x41200000
 8006028:	0800b204 	.word	0x0800b204

0800602c <untactIR>:



void untactIR(TS* stall) {
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	b097      	sub	sp, #92	; 0x5c
 8006030:	af12      	add	r7, sp, #72	; 0x48
 8006032:	6078      	str	r0, [r7, #4]
    float ir_temperature = getIRTemperature(stall->ir_untact);
 8006034:	687c      	ldr	r4, [r7, #4]
 8006036:	4668      	mov	r0, sp
 8006038:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800603c:	2244      	movs	r2, #68	; 0x44
 800603e:	4619      	mov	r1, r3
 8006040:	f001 fce1 	bl	8007a06 <memcpy>
 8006044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800604a:	f7ff fe39 	bl	8005cc0 <getIRTemperature>
 800604e:	60f8      	str	r0, [r7, #12]
    if(ir_temperature >= THRESHOLD_IR_TEMPERATURE && (stall->last_ir_time == 0 || HAL_GetTick() - stall->last_ir_time >= TERM_PUSH_TOILET_COVER)) {
 8006050:	492e      	ldr	r1, [pc, #184]	; (800610c <untactIR+0xe0>)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7fb f848 	bl	80010e8 <__aeabi_fcmpge>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d049      	beq.n	80060f2 <untactIR+0xc6>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <untactIR+0x4e>
 8006066:	f7fb fecb 	bl	8001e00 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f242 720f 	movw	r2, #9999	; 0x270f
 8006076:	4293      	cmp	r3, r2
 8006078:	d93b      	bls.n	80060f2 <untactIR+0xc6>
        stall->last_ir_time = HAL_GetTick();
 800607a:	f7fb fec1 	bl	8001e00 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	611a      	str	r2, [r3, #16]
        stall->is_flushed = false;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2020 	strb.w	r2, [r3, #32]
        if(stall->is_cover_down == false) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d12e      	bne.n	80060f2 <untactIR+0xc6>
            runMotor(stall->servo_toilet_cover, MOTOR_TOILET_COVER_PUSH_ANGLE);
 8006094:	687e      	ldr	r6, [r7, #4]
 8006096:	f240 43dd 	movw	r3, #1245	; 0x4dd
 800609a:	930f      	str	r3, [sp, #60]	; 0x3c
 800609c:	466d      	mov	r5, sp
 800609e:	f506 7486 	add.w	r4, r6, #268	; 0x10c
 80060a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80060b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060b6:	f106 03fc 	add.w	r3, r6, #252	; 0xfc
 80060ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060bc:	f7ff fd57 	bl	8005b6e <runMotor>
            HAL_Delay(MOTOR_DELAY);
 80060c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060c4:	f7fb fea6 	bl	8001e14 <HAL_Delay>
            runMotor(stall->servo_toilet_cover, MOTOR_TOILET_COVER_BACK_ANGLE);
 80060c8:	687e      	ldr	r6, [r7, #4]
 80060ca:	23ff      	movs	r3, #255	; 0xff
 80060cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ce:	466d      	mov	r5, sp
 80060d0:	f506 7486 	add.w	r4, r6, #268	; 0x10c
 80060d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80060e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060e8:	f106 03fc 	add.w	r3, r6, #252	; 0xfc
 80060ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ee:	f7ff fd3e 	bl	8005b6e <runMotor>
        }
    }
#if DEBUG
	printf("IR : %.3f, ", ir_temperature);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7fa f998 	bl	8000428 <__aeabi_f2d>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4804      	ldr	r0, [pc, #16]	; (8006110 <untactIR+0xe4>)
 80060fe:	f001 f9b1 	bl	8007464 <iprintf>
#endif
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800610a:	bf00      	nop
 800610c:	420c0000 	.word	0x420c0000
 8006110:	0800b220 	.word	0x0800b220

08006114 <flushToilet>:

void flushToilet(TS* stall) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
    stall->is_cover_down = sensing(stall->tilt_toilet_cover);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8006122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006126:	f7ff fce9 	bl	8005afc <sensing>
 800612a:	4603      	mov	r3, r0
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	731a      	strb	r2, [r3, #12]
    if (stall->is_cover_down == true && stall->last_ir_time != 0) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7b1b      	ldrb	r3, [r3, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d11e      	bne.n	8006178 <flushToilet+0x64>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01a      	beq.n	8006178 <flushToilet+0x64>
    	// < => >
        if (HAL_GetTick() - stall->last_ir_time < THRESHOLD_IR_CHECKED_TIME && stall->is_flushed == false) { // 10s == 10000ms
 8006142:	f7fb fe5d 	bl	8001e00 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006152:	4293      	cmp	r3, r2
 8006154:	d810      	bhi.n	8006178 <flushToilet+0x64>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <flushToilet+0x64>
            /* Flush Toilet
            runMoter(stall.servo_toilet_cover, degree);
            HAL_Delay(MOTOR_DELAY)
            runMoter(stall.servo_toilet_cover, degree);
            */
            stall->last_flush_time = HAL_GetTick();
 8006160:	f7fb fe4e 	bl	8001e00 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	615a      	str	r2, [r3, #20]
            stall->is_checked_broken = false;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	761a      	strb	r2, [r3, #24]
            stall->is_flushed = true;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#if DEBUG
    printf("is_cover_down: %u, last_ir_time %lu, last_flush_time %lu, ", stall->is_cover_down, stall->last_ir_time, stall->last_flush_time);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7b1b      	ldrb	r3, [r3, #12]
 800617c:	4619      	mov	r1, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4803      	ldr	r0, [pc, #12]	; (8006194 <flushToilet+0x80>)
 8006188:	f001 f96c 	bl	8007464 <iprintf>
#endif
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	0800b22c 	.word	0x0800b22c

08006198 <checkBroken>:

void checkBroken(TS *stall) {
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619a:	b095      	sub	sp, #84	; 0x54
 800619c:	af10      	add	r7, sp, #64	; 0x40
 800619e:	6078      	str	r0, [r7, #4]
    if (stall->is_cover_down && stall->last_flush_time != 0) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7b1b      	ldrb	r3, [r3, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d074      	beq.n	8006292 <checkBroken+0xfa>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d070      	beq.n	8006292 <checkBroken+0xfa>
        if (WAIT_TOILET_FLUSH_DOWN <= HAL_GetTick() - stall->last_flush_time && stall->is_checked_broken == false) { //10s == 10000ms
 80061b0:	f7fb fe26 	bl	8001e00 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d966      	bls.n	8006292 <checkBroken+0xfa>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	7e1b      	ldrb	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d162      	bne.n	8006292 <checkBroken+0xfa>
//            printf("open cover")
        	stall->is_checked_broken = true;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	761a      	strb	r2, [r3, #24]
            runMotor(stall->servo_sonar_cover, MOTOR_CHECK_BROKEN_COVER_PUSH_ANGLE);
 80061d2:	687e      	ldr	r6, [r7, #4]
 80061d4:	23fa      	movs	r3, #250	; 0xfa
 80061d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d8:	466d      	mov	r5, sp
 80061da:	f506 74ac 	add.w	r4, r6, #344	; 0x158
 80061de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80061ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80061f2:	f506 73a4 	add.w	r3, r6, #328	; 0x148
 80061f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061f8:	f7ff fcb9 	bl	8005b6e <runMotor>
            HAL_Delay(MOTOR_DELAY);
 80061fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006200:	f7fb fe08 	bl	8001e14 <HAL_Delay>
            float toilet_water_dist = getDistance(stall->sonar_toilet_broken);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	333c      	adds	r3, #60	; 0x3c
 8006208:	e893 0003 	ldmia.w	r3, {r0, r1}
 800620c:	f7ff fcd8 	bl	8005bc0 <getDistance>
 8006210:	60f8      	str	r0, [r7, #12]
            runMotor(stall->servo_sonar_cover, MOTOR_CHECK_BROKEN_COVER_BACK_ANGLE);
 8006212:	687e      	ldr	r6, [r7, #4]
 8006214:	f240 23ee 	movw	r3, #750	; 0x2ee
 8006218:	930f      	str	r3, [sp, #60]	; 0x3c
 800621a:	466d      	mov	r5, sp
 800621c:	f506 74ac 	add.w	r4, r6, #344	; 0x158
 8006220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800622a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800622c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006230:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006234:	f506 73a4 	add.w	r3, r6, #328	; 0x148
 8006238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800623a:	f7ff fc98 	bl	8005b6e <runMotor>
            if (toilet_water_dist < NORMAL_TOILET_WATER_DISTANCE) {
 800623e:	491e      	ldr	r1, [pc, #120]	; (80062b8 <checkBroken+0x120>)
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fa ff3d 	bl	80010c0 <__aeabi_fcmplt>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01b      	beq.n	8006284 <checkBroken+0xec>
                turnLED(stall->led_broken, true);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	33a0      	adds	r3, #160	; 0xa0
 8006252:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006256:	f7ff fc64 	bl	8005b22 <turnLED>

                memset(MsgBox, 0, sizeof(MsgBox));
 800625a:	2232      	movs	r2, #50	; 0x32
 800625c:	2100      	movs	r1, #0
 800625e:	4817      	ldr	r0, [pc, #92]	; (80062bc <checkBroken+0x124>)
 8006260:	f001 fb1c 	bl	800789c <memset>
                sprintf(MsgBox, "toiletBreak,%u,\r\n", stall->toilet_key);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	4915      	ldr	r1, [pc, #84]	; (80062c0 <checkBroken+0x128>)
 800626c:	4813      	ldr	r0, [pc, #76]	; (80062bc <checkBroken+0x124>)
 800626e:	f001 fa1d 	bl	80076ac <siprintf>
				SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8006272:	4812      	ldr	r0, [pc, #72]	; (80062bc <checkBroken+0x124>)
 8006274:	f7f9 ff6c 	bl	8000150 <strlen>
 8006278:	4603      	mov	r3, r0
 800627a:	4910      	ldr	r1, [pc, #64]	; (80062bc <checkBroken+0x124>)
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fb89 	bl	8005994 <SendDataToRasp>
 8006282:	e006      	b.n	8006292 <checkBroken+0xfa>


            }
            else {
                turnLED(stall->led_broken, false);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	33a0      	adds	r3, #160	; 0xa0
 800628a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800628e:	f7ff fc48 	bl	8005b22 <turnLED>
            }
        }
    }
#if DEBUG
    printf("Is broken LED ON: %u, ",HAL_GPIO_ReadPin(stall->led_broken.Port, stall->led_broken.PIN_out));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7fc f91f 	bl	80024e4 <HAL_GPIO_ReadPin>
 80062a6:	4603      	mov	r3, r0
 80062a8:	4619      	mov	r1, r3
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <checkBroken+0x12c>)
 80062ac:	f001 f8da 	bl	8007464 <iprintf>
#endif
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b8:	41700000 	.word	0x41700000
 80062bc:	20000b80 	.word	0x20000b80
 80062c0:	0800b268 	.word	0x0800b268
 80062c4:	0800b27c 	.word	0x0800b27c

080062c8 <checkCongest>:

void checkCongest(TS * stall) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	memset(MsgBox, 0, sizeof(MsgBox));
 80062d0:	2232      	movs	r2, #50	; 0x32
 80062d2:	2100      	movs	r1, #0
 80062d4:	481f      	ldr	r0, [pc, #124]	; (8006354 <checkCongest+0x8c>)
 80062d6:	f001 fae1 	bl	800789c <memset>
	uint8_t debugging;
	if(res_from_raspi) { // 2
 80062da:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <checkCongest+0x90>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <checkCongest+0x30>
		debugging = SATURATION;
 80062e4:	2302      	movs	r3, #2
 80062e6:	73fb      	strb	r3, [r7, #15]
		sprintf(MsgBox,"congestion,%u,%u,", SATURATION, TOILET_ID); // 0 is toilet ID not toilet's cell ID
 80062e8:	2302      	movs	r3, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	2301      	movs	r3, #1
 80062ee:	491b      	ldr	r1, [pc, #108]	; (800635c <checkCongest+0x94>)
 80062f0:	4818      	ldr	r0, [pc, #96]	; (8006354 <checkCongest+0x8c>)
 80062f2:	f001 f9db 	bl	80076ac <siprintf>
 80062f6:	e01c      	b.n	8006332 <checkCongest+0x6a>
	}
	else if(OCCUPIED_STALL_CNT == MAX_STALL) { // 1
 80062f8:	4b19      	ldr	r3, [pc, #100]	; (8006360 <checkCongest+0x98>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d109      	bne.n	8006316 <checkCongest+0x4e>
		debugging = CONFUSION;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
		sprintf(MsgBox,"congestion,%u,%u,", CONFUSION, TOILET_ID);
 8006306:	2301      	movs	r3, #1
 8006308:	461a      	mov	r2, r3
 800630a:	2301      	movs	r3, #1
 800630c:	4913      	ldr	r1, [pc, #76]	; (800635c <checkCongest+0x94>)
 800630e:	4811      	ldr	r0, [pc, #68]	; (8006354 <checkCongest+0x8c>)
 8006310:	f001 f9cc 	bl	80076ac <siprintf>
 8006314:	e00d      	b.n	8006332 <checkCongest+0x6a>
	}
	else if(OCCUPIED_STALL_CNT < MAX_STALL) { // 0
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <checkCongest+0x98>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d808      	bhi.n	8006332 <checkCongest+0x6a>
		debugging = NORMAL;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
		sprintf(MsgBox,"congestion,%u,%u,", NORMAL, TOILET_ID);
 8006324:	2300      	movs	r3, #0
 8006326:	461a      	mov	r2, r3
 8006328:	2301      	movs	r3, #1
 800632a:	490c      	ldr	r1, [pc, #48]	; (800635c <checkCongest+0x94>)
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <checkCongest+0x8c>)
 800632e:	f001 f9bd 	bl	80076ac <siprintf>
	}

	SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8006332:	4808      	ldr	r0, [pc, #32]	; (8006354 <checkCongest+0x8c>)
 8006334:	f7f9 ff0c 	bl	8000150 <strlen>
 8006338:	4603      	mov	r3, r0
 800633a:	4906      	ldr	r1, [pc, #24]	; (8006354 <checkCongest+0x8c>)
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fb29 	bl	8005994 <SendDataToRasp>
#if DEBUG
    printf("Congestion: %u\r\n", debugging);
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	4619      	mov	r1, r3
 8006346:	4807      	ldr	r0, [pc, #28]	; (8006364 <checkCongest+0x9c>)
 8006348:	f001 f88c 	bl	8007464 <iprintf>
#endif

}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000b80 	.word	0x20000b80
 8006358:	20000248 	.word	0x20000248
 800635c:	0800b294 	.word	0x0800b294
 8006360:	20000000 	.word	0x20000000
 8006364:	0800b2a8 	.word	0x0800b2a8

08006368 <initStalls>:
void initStalls(TS * stall) {
 8006368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636a:	b0f1      	sub	sp, #452	; 0x1c4
 800636c:	af10      	add	r7, sp, #64	; 0x40
 800636e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006372:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006376:	6018      	str	r0, [r3, #0]
	//
	stall->toilet_key = 1;
 8006378:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800637c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
	stall->before_tissue_empty = 0;
 8006386:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800638a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	705a      	strb	r2, [r3, #1]


	stall->is_occupied = false;
 8006394:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006398:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	709a      	strb	r2, [r3, #2]
	stall->last_open_time = 0;
 80063a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	605a      	str	r2, [r3, #4]
	stall->tissue_amount = 100;
 80063b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a88      	ldr	r2, [pc, #544]	; (80065dc <initStalls+0x274>)
 80063bc:	609a      	str	r2, [r3, #8]
	stall->is_cover_down = false;
 80063be:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	731a      	strb	r2, [r3, #12]
	stall->last_ir_time = 0;
 80063cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	611a      	str	r2, [r3, #16]
	stall->last_flush_time = 0;
 80063da:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	615a      	str	r2, [r3, #20]
	stall->is_checked_broken = false;
 80063e8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	761a      	strb	r2, [r3, #24]
	stall->last_tissue_time = 0;
 80063f6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80063fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	61da      	str	r2, [r3, #28]


	stall->magnetic_door = (GI){ GPIOB,GPIO_PIN_4, 0 };
 8006404:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006408:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a74      	ldr	r2, [pc, #464]	; (80065e0 <initStalls+0x278>)
 8006410:	3324      	adds	r3, #36	; 0x24
 8006412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006416:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->sonar_water_tissue = (GI){ GPIOA, GPIO_PIN_12, GPIO_PIN_11 };
 800641a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800641e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6f      	ldr	r2, [pc, #444]	; (80065e4 <initStalls+0x27c>)
 8006426:	3334      	adds	r3, #52	; 0x34
 8006428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800642c:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->servo_water_tissue = (TI){ htim2, TIM_CHANNEL_2 };
 8006430:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006434:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6b      	ldr	r2, [pc, #428]	; (80065e8 <initStalls+0x280>)
 800643c:	33b0      	adds	r3, #176	; 0xb0
 800643e:	4611      	mov	r1, r2
 8006440:	2248      	movs	r2, #72	; 0x48
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fadf 	bl	8007a06 <memcpy>
 8006448:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800644c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2204      	movs	r2, #4
 8006454:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	stall->sonar_tissue = (GI){ GPIOB, GPIO_PIN_2, GPIO_PIN_1 };
 8006458:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800645c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a62      	ldr	r2, [pc, #392]	; (80065ec <initStalls+0x284>)
 8006464:	332c      	adds	r3, #44	; 0x2c
 8006466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800646a:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->ir_untact = (II){ hi2c1 };
 800646e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006472:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5d      	ldr	r2, [pc, #372]	; (80065f0 <initStalls+0x288>)
 800647a:	3344      	adds	r3, #68	; 0x44
 800647c:	4611      	mov	r1, r2
 800647e:	2254      	movs	r2, #84	; 0x54
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fac0 	bl	8007a06 <memcpy>
	stall->servo_toilet_cover = (TI){  htim2, TIM_CHANNEL_1 };
 8006486:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800648a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a55      	ldr	r2, [pc, #340]	; (80065e8 <initStalls+0x280>)
 8006492:	33fc      	adds	r3, #252	; 0xfc
 8006494:	4611      	mov	r1, r2
 8006496:	2248      	movs	r2, #72	; 0x48
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fab4 	bl	8007a06 <memcpy>
 800649e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144


	stall->tilt_toilet_cover = (GI){ GPIOB, GPIO_PIN_5, 0 };
 80064ae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a4e      	ldr	r2, [pc, #312]	; (80065f4 <initStalls+0x28c>)
 80064ba:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80064be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064c2:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->servo_sonar_cover = (TI){ htim2, TIM_CHANNEL_3 };
 80064c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a45      	ldr	r2, [pc, #276]	; (80065e8 <initStalls+0x280>)
 80064d2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80064d6:	4611      	mov	r1, r2
 80064d8:	2248      	movs	r2, #72	; 0x48
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fa93 	bl	8007a06 <memcpy>
 80064e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	stall->sonar_toilet_broken = (GI){ GPIOB, GPIO_PIN_12, GPIO_PIN_11 };
 80064f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <initStalls+0x290>)
 80064fc:	333c      	adds	r3, #60	; 0x3c
 80064fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006502:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->led_usable = (GI){ GPIOC, 0, GPIO_PIN_5 };
 8006506:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800650a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <initStalls+0x294>)
 8006512:	3398      	adds	r3, #152	; 0x98
 8006514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006518:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->led_broken = (GI){ GPIOC, 0, GPIO_PIN_8 };
 800651c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006520:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a36      	ldr	r2, [pc, #216]	; (8006600 <initStalls+0x298>)
 8006528:	33a0      	adds	r3, #160	; 0xa0
 800652a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800652e:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->led_tissue = (GI){ GPIOC, 0, GPIO_PIN_6 };
 8006532:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006536:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a31      	ldr	r2, [pc, #196]	; (8006604 <initStalls+0x29c>)
 800653e:	33a8      	adds	r3, #168	; 0xa8
 8006540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006544:	e883 0003 	stmia.w	r3, {r0, r1}

	motor_start(stall->servo_water_tissue);
 8006548:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800654c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006550:	681e      	ldr	r6, [r3, #0]
 8006552:	466d      	mov	r5, sp
 8006554:	f106 04c0 	add.w	r4, r6, #192	; 0xc0
 8006558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800655a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800655c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800655e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006564:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006568:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800656c:	f106 03b0 	add.w	r3, r6, #176	; 0xb0
 8006570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006572:	f7ff fae9 	bl	8005b48 <motor_start>
	motor_start(stall->servo_sonar_cover);
 8006576:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800657a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800657e:	681e      	ldr	r6, [r3, #0]
 8006580:	466d      	mov	r5, sp
 8006582:	f506 74ac 	add.w	r4, r6, #344	; 0x158
 8006586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800658a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800658c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800658e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006592:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006596:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800659a:	f506 73a4 	add.w	r3, r6, #328	; 0x148
 800659e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a0:	f7ff fad2 	bl	8005b48 <motor_start>
	motor_start(stall->servo_toilet_cover);
 80065a4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80065ac:	681e      	ldr	r6, [r3, #0]
 80065ae:	466d      	mov	r5, sp
 80065b0:	f506 7486 	add.w	r4, r6, #268	; 0x10c
 80065b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80065c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80065c8:	f106 03fc 	add.w	r3, r6, #252	; 0xfc
 80065cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ce:	f7ff fabb 	bl	8005b48 <motor_start>

}
 80065d2:	bf00      	nop
 80065d4:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 80065d8:	46bd      	mov	sp, r7
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065dc:	42c80000 	.word	0x42c80000
 80065e0:	0800b2bc 	.word	0x0800b2bc
 80065e4:	0800b2c4 	.word	0x0800b2c4
 80065e8:	20000298 	.word	0x20000298
 80065ec:	0800b2cc 	.word	0x0800b2cc
 80065f0:	200001f4 	.word	0x200001f4
 80065f4:	0800b2d4 	.word	0x0800b2d4
 80065f8:	0800b2dc 	.word	0x0800b2dc
 80065fc:	0800b2e4 	.word	0x0800b2e4
 8006600:	0800b2ec 	.word	0x0800b2ec
 8006604:	0800b2f4 	.word	0x0800b2f4

08006608 <__cvt>:
 8006608:	2b00      	cmp	r3, #0
 800660a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660e:	461f      	mov	r7, r3
 8006610:	bfbb      	ittet	lt
 8006612:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006616:	461f      	movlt	r7, r3
 8006618:	2300      	movge	r3, #0
 800661a:	232d      	movlt	r3, #45	; 0x2d
 800661c:	b088      	sub	sp, #32
 800661e:	4614      	mov	r4, r2
 8006620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006622:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006624:	7013      	strb	r3, [r2, #0]
 8006626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006628:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800662c:	f023 0820 	bic.w	r8, r3, #32
 8006630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006634:	d005      	beq.n	8006642 <__cvt+0x3a>
 8006636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800663a:	d100      	bne.n	800663e <__cvt+0x36>
 800663c:	3501      	adds	r5, #1
 800663e:	2302      	movs	r3, #2
 8006640:	e000      	b.n	8006644 <__cvt+0x3c>
 8006642:	2303      	movs	r3, #3
 8006644:	aa07      	add	r2, sp, #28
 8006646:	9204      	str	r2, [sp, #16]
 8006648:	aa06      	add	r2, sp, #24
 800664a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800664e:	e9cd 3500 	strd	r3, r5, [sp]
 8006652:	4622      	mov	r2, r4
 8006654:	463b      	mov	r3, r7
 8006656:	f001 fa73 	bl	8007b40 <_dtoa_r>
 800665a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800665e:	4606      	mov	r6, r0
 8006660:	d102      	bne.n	8006668 <__cvt+0x60>
 8006662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006664:	07db      	lsls	r3, r3, #31
 8006666:	d522      	bpl.n	80066ae <__cvt+0xa6>
 8006668:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800666c:	eb06 0905 	add.w	r9, r6, r5
 8006670:	d110      	bne.n	8006694 <__cvt+0x8c>
 8006672:	7833      	ldrb	r3, [r6, #0]
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d10a      	bne.n	800668e <__cvt+0x86>
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4620      	mov	r0, r4
 800667e:	4639      	mov	r1, r7
 8006680:	f7fa f992 	bl	80009a8 <__aeabi_dcmpeq>
 8006684:	b918      	cbnz	r0, 800668e <__cvt+0x86>
 8006686:	f1c5 0501 	rsb	r5, r5, #1
 800668a:	f8ca 5000 	str.w	r5, [sl]
 800668e:	f8da 3000 	ldr.w	r3, [sl]
 8006692:	4499      	add	r9, r3
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	4620      	mov	r0, r4
 800669a:	4639      	mov	r1, r7
 800669c:	f7fa f984 	bl	80009a8 <__aeabi_dcmpeq>
 80066a0:	b108      	cbz	r0, 80066a6 <__cvt+0x9e>
 80066a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80066a6:	2230      	movs	r2, #48	; 0x30
 80066a8:	9b07      	ldr	r3, [sp, #28]
 80066aa:	454b      	cmp	r3, r9
 80066ac:	d307      	bcc.n	80066be <__cvt+0xb6>
 80066ae:	4630      	mov	r0, r6
 80066b0:	9b07      	ldr	r3, [sp, #28]
 80066b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066b4:	1b9b      	subs	r3, r3, r6
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	b008      	add	sp, #32
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	9107      	str	r1, [sp, #28]
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e7f0      	b.n	80066a8 <__cvt+0xa0>

080066c6 <__exponent>:
 80066c6:	4603      	mov	r3, r0
 80066c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ca:	2900      	cmp	r1, #0
 80066cc:	f803 2b02 	strb.w	r2, [r3], #2
 80066d0:	bfb6      	itet	lt
 80066d2:	222d      	movlt	r2, #45	; 0x2d
 80066d4:	222b      	movge	r2, #43	; 0x2b
 80066d6:	4249      	neglt	r1, r1
 80066d8:	2909      	cmp	r1, #9
 80066da:	7042      	strb	r2, [r0, #1]
 80066dc:	dd2a      	ble.n	8006734 <__exponent+0x6e>
 80066de:	f10d 0207 	add.w	r2, sp, #7
 80066e2:	4617      	mov	r7, r2
 80066e4:	260a      	movs	r6, #10
 80066e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80066ea:	4694      	mov	ip, r2
 80066ec:	fb06 1415 	mls	r4, r6, r5, r1
 80066f0:	3430      	adds	r4, #48	; 0x30
 80066f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80066f6:	460c      	mov	r4, r1
 80066f8:	2c63      	cmp	r4, #99	; 0x63
 80066fa:	4629      	mov	r1, r5
 80066fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8006700:	dcf1      	bgt.n	80066e6 <__exponent+0x20>
 8006702:	3130      	adds	r1, #48	; 0x30
 8006704:	f1ac 0402 	sub.w	r4, ip, #2
 8006708:	f802 1c01 	strb.w	r1, [r2, #-1]
 800670c:	4622      	mov	r2, r4
 800670e:	1c41      	adds	r1, r0, #1
 8006710:	42ba      	cmp	r2, r7
 8006712:	d30a      	bcc.n	800672a <__exponent+0x64>
 8006714:	f10d 0209 	add.w	r2, sp, #9
 8006718:	eba2 020c 	sub.w	r2, r2, ip
 800671c:	42bc      	cmp	r4, r7
 800671e:	bf88      	it	hi
 8006720:	2200      	movhi	r2, #0
 8006722:	4413      	add	r3, r2
 8006724:	1a18      	subs	r0, r3, r0
 8006726:	b003      	add	sp, #12
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800672e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006732:	e7ed      	b.n	8006710 <__exponent+0x4a>
 8006734:	2330      	movs	r3, #48	; 0x30
 8006736:	3130      	adds	r1, #48	; 0x30
 8006738:	7083      	strb	r3, [r0, #2]
 800673a:	70c1      	strb	r1, [r0, #3]
 800673c:	1d03      	adds	r3, r0, #4
 800673e:	e7f1      	b.n	8006724 <__exponent+0x5e>

08006740 <_printf_float>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	b091      	sub	sp, #68	; 0x44
 8006746:	460c      	mov	r4, r1
 8006748:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800674c:	4616      	mov	r6, r2
 800674e:	461f      	mov	r7, r3
 8006750:	4605      	mov	r5, r0
 8006752:	f001 f8d3 	bl	80078fc <_localeconv_r>
 8006756:	6803      	ldr	r3, [r0, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	f7f9 fcf8 	bl	8000150 <strlen>
 8006760:	2300      	movs	r3, #0
 8006762:	930e      	str	r3, [sp, #56]	; 0x38
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	900a      	str	r0, [sp, #40]	; 0x28
 800676a:	3307      	adds	r3, #7
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	f103 0208 	add.w	r2, r3, #8
 8006774:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006778:	f8d4 b000 	ldr.w	fp, [r4]
 800677c:	f8c8 2000 	str.w	r2, [r8]
 8006780:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006784:	4652      	mov	r2, sl
 8006786:	4643      	mov	r3, r8
 8006788:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800678c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006790:	930b      	str	r3, [sp, #44]	; 0x2c
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	4650      	mov	r0, sl
 8006798:	4b9c      	ldr	r3, [pc, #624]	; (8006a0c <_printf_float+0x2cc>)
 800679a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800679c:	f7fa f936 	bl	8000a0c <__aeabi_dcmpun>
 80067a0:	bb70      	cbnz	r0, 8006800 <_printf_float+0xc0>
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	4650      	mov	r0, sl
 80067a8:	4b98      	ldr	r3, [pc, #608]	; (8006a0c <_printf_float+0x2cc>)
 80067aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ac:	f7fa f910 	bl	80009d0 <__aeabi_dcmple>
 80067b0:	bb30      	cbnz	r0, 8006800 <_printf_float+0xc0>
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	4650      	mov	r0, sl
 80067b8:	4641      	mov	r1, r8
 80067ba:	f7fa f8ff 	bl	80009bc <__aeabi_dcmplt>
 80067be:	b110      	cbz	r0, 80067c6 <_printf_float+0x86>
 80067c0:	232d      	movs	r3, #45	; 0x2d
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c6:	4a92      	ldr	r2, [pc, #584]	; (8006a10 <_printf_float+0x2d0>)
 80067c8:	4b92      	ldr	r3, [pc, #584]	; (8006a14 <_printf_float+0x2d4>)
 80067ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067ce:	bf94      	ite	ls
 80067d0:	4690      	movls	r8, r2
 80067d2:	4698      	movhi	r8, r3
 80067d4:	2303      	movs	r3, #3
 80067d6:	f04f 0a00 	mov.w	sl, #0
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	f02b 0304 	bic.w	r3, fp, #4
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	4633      	mov	r3, r6
 80067e4:	4621      	mov	r1, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	9700      	str	r7, [sp, #0]
 80067ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80067ec:	f000 f9d6 	bl	8006b9c <_printf_common>
 80067f0:	3001      	adds	r0, #1
 80067f2:	f040 8090 	bne.w	8006916 <_printf_float+0x1d6>
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	b011      	add	sp, #68	; 0x44
 80067fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006800:	4652      	mov	r2, sl
 8006802:	4643      	mov	r3, r8
 8006804:	4650      	mov	r0, sl
 8006806:	4641      	mov	r1, r8
 8006808:	f7fa f900 	bl	8000a0c <__aeabi_dcmpun>
 800680c:	b148      	cbz	r0, 8006822 <_printf_float+0xe2>
 800680e:	f1b8 0f00 	cmp.w	r8, #0
 8006812:	bfb8      	it	lt
 8006814:	232d      	movlt	r3, #45	; 0x2d
 8006816:	4a80      	ldr	r2, [pc, #512]	; (8006a18 <_printf_float+0x2d8>)
 8006818:	bfb8      	it	lt
 800681a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800681e:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <_printf_float+0x2dc>)
 8006820:	e7d3      	b.n	80067ca <_printf_float+0x8a>
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	d142      	bne.n	80068b2 <_printf_float+0x172>
 800682c:	2306      	movs	r3, #6
 800682e:	6063      	str	r3, [r4, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	9206      	str	r2, [sp, #24]
 8006834:	aa0e      	add	r2, sp, #56	; 0x38
 8006836:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800683a:	aa0d      	add	r2, sp, #52	; 0x34
 800683c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006840:	9203      	str	r2, [sp, #12]
 8006842:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006846:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	4652      	mov	r2, sl
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4628      	mov	r0, r5
 8006854:	4643      	mov	r3, r8
 8006856:	910b      	str	r1, [sp, #44]	; 0x2c
 8006858:	f7ff fed6 	bl	8006608 <__cvt>
 800685c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685e:	4680      	mov	r8, r0
 8006860:	2947      	cmp	r1, #71	; 0x47
 8006862:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006864:	d108      	bne.n	8006878 <_printf_float+0x138>
 8006866:	1cc8      	adds	r0, r1, #3
 8006868:	db02      	blt.n	8006870 <_printf_float+0x130>
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	4299      	cmp	r1, r3
 800686e:	dd40      	ble.n	80068f2 <_printf_float+0x1b2>
 8006870:	f1a9 0902 	sub.w	r9, r9, #2
 8006874:	fa5f f989 	uxtb.w	r9, r9
 8006878:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800687c:	d81f      	bhi.n	80068be <_printf_float+0x17e>
 800687e:	464a      	mov	r2, r9
 8006880:	3901      	subs	r1, #1
 8006882:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006886:	910d      	str	r1, [sp, #52]	; 0x34
 8006888:	f7ff ff1d 	bl	80066c6 <__exponent>
 800688c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800688e:	4682      	mov	sl, r0
 8006890:	1813      	adds	r3, r2, r0
 8006892:	2a01      	cmp	r2, #1
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	dc02      	bgt.n	800689e <_printf_float+0x15e>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	07d2      	lsls	r2, r2, #31
 800689c:	d501      	bpl.n	80068a2 <_printf_float+0x162>
 800689e:	3301      	adds	r3, #1
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d09b      	beq.n	80067e2 <_printf_float+0xa2>
 80068aa:	232d      	movs	r3, #45	; 0x2d
 80068ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b0:	e797      	b.n	80067e2 <_printf_float+0xa2>
 80068b2:	2947      	cmp	r1, #71	; 0x47
 80068b4:	d1bc      	bne.n	8006830 <_printf_float+0xf0>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1ba      	bne.n	8006830 <_printf_float+0xf0>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7b7      	b.n	800682e <_printf_float+0xee>
 80068be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068c2:	d118      	bne.n	80068f6 <_printf_float+0x1b6>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	dd0b      	ble.n	80068e2 <_printf_float+0x1a2>
 80068ca:	6121      	str	r1, [r4, #16]
 80068cc:	b913      	cbnz	r3, 80068d4 <_printf_float+0x194>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	07d0      	lsls	r0, r2, #31
 80068d2:	d502      	bpl.n	80068da <_printf_float+0x19a>
 80068d4:	3301      	adds	r3, #1
 80068d6:	440b      	add	r3, r1
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	f04f 0a00 	mov.w	sl, #0
 80068de:	65a1      	str	r1, [r4, #88]	; 0x58
 80068e0:	e7df      	b.n	80068a2 <_printf_float+0x162>
 80068e2:	b913      	cbnz	r3, 80068ea <_printf_float+0x1aa>
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	07d2      	lsls	r2, r2, #31
 80068e8:	d501      	bpl.n	80068ee <_printf_float+0x1ae>
 80068ea:	3302      	adds	r3, #2
 80068ec:	e7f4      	b.n	80068d8 <_printf_float+0x198>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e7f2      	b.n	80068d8 <_printf_float+0x198>
 80068f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f8:	4299      	cmp	r1, r3
 80068fa:	db05      	blt.n	8006908 <_printf_float+0x1c8>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	6121      	str	r1, [r4, #16]
 8006900:	07d8      	lsls	r0, r3, #31
 8006902:	d5ea      	bpl.n	80068da <_printf_float+0x19a>
 8006904:	1c4b      	adds	r3, r1, #1
 8006906:	e7e7      	b.n	80068d8 <_printf_float+0x198>
 8006908:	2900      	cmp	r1, #0
 800690a:	bfcc      	ite	gt
 800690c:	2201      	movgt	r2, #1
 800690e:	f1c1 0202 	rsble	r2, r1, #2
 8006912:	4413      	add	r3, r2
 8006914:	e7e0      	b.n	80068d8 <_printf_float+0x198>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	055a      	lsls	r2, r3, #21
 800691a:	d407      	bmi.n	800692c <_printf_float+0x1ec>
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	4642      	mov	r2, r8
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	d12b      	bne.n	8006982 <_printf_float+0x242>
 800692a:	e764      	b.n	80067f6 <_printf_float+0xb6>
 800692c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006930:	f240 80dd 	bls.w	8006aee <_printf_float+0x3ae>
 8006934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006938:	2200      	movs	r2, #0
 800693a:	2300      	movs	r3, #0
 800693c:	f7fa f834 	bl	80009a8 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d033      	beq.n	80069ac <_printf_float+0x26c>
 8006944:	2301      	movs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	4a35      	ldr	r2, [pc, #212]	; (8006a20 <_printf_float+0x2e0>)
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af51 	beq.w	80067f6 <_printf_float+0xb6>
 8006954:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006958:	429a      	cmp	r2, r3
 800695a:	db02      	blt.n	8006962 <_printf_float+0x222>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07d8      	lsls	r0, r3, #31
 8006960:	d50f      	bpl.n	8006982 <_printf_float+0x242>
 8006962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f af42 	beq.w	80067f6 <_printf_float+0xb6>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	f104 091a 	add.w	r9, r4, #26
 800697a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697c:	3b01      	subs	r3, #1
 800697e:	4543      	cmp	r3, r8
 8006980:	dc09      	bgt.n	8006996 <_printf_float+0x256>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	079b      	lsls	r3, r3, #30
 8006986:	f100 8104 	bmi.w	8006b92 <_printf_float+0x452>
 800698a:	68e0      	ldr	r0, [r4, #12]
 800698c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800698e:	4298      	cmp	r0, r3
 8006990:	bfb8      	it	lt
 8006992:	4618      	movlt	r0, r3
 8006994:	e731      	b.n	80067fa <_printf_float+0xba>
 8006996:	2301      	movs	r3, #1
 8006998:	464a      	mov	r2, r9
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f af28 	beq.w	80067f6 <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	e7e6      	b.n	800697a <_printf_float+0x23a>
 80069ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc38      	bgt.n	8006a24 <_printf_float+0x2e4>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <_printf_float+0x2e0>)
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f af1a 	beq.w	80067f6 <_printf_float+0xb6>
 80069c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d102      	bne.n	80069d0 <_printf_float+0x290>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	07d9      	lsls	r1, r3, #31
 80069ce:	d5d8      	bpl.n	8006982 <_printf_float+0x242>
 80069d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af0b 	beq.w	80067f6 <_printf_float+0xb6>
 80069e0:	f04f 0900 	mov.w	r9, #0
 80069e4:	f104 0a1a 	add.w	sl, r4, #26
 80069e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ea:	425b      	negs	r3, r3
 80069ec:	454b      	cmp	r3, r9
 80069ee:	dc01      	bgt.n	80069f4 <_printf_float+0x2b4>
 80069f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f2:	e794      	b.n	800691e <_printf_float+0x1de>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4652      	mov	r2, sl
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f aef9 	beq.w	80067f6 <_printf_float+0xb6>
 8006a04:	f109 0901 	add.w	r9, r9, #1
 8006a08:	e7ee      	b.n	80069e8 <_printf_float+0x2a8>
 8006a0a:	bf00      	nop
 8006a0c:	7fefffff 	.word	0x7fefffff
 8006a10:	0800b326 	.word	0x0800b326
 8006a14:	0800b32a 	.word	0x0800b32a
 8006a18:	0800b32e 	.word	0x0800b32e
 8006a1c:	0800b332 	.word	0x0800b332
 8006a20:	0800b336 	.word	0x0800b336
 8006a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	bfa8      	it	ge
 8006a2c:	461a      	movge	r2, r3
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	4691      	mov	r9, r2
 8006a32:	dc37      	bgt.n	8006aa4 <_printf_float+0x364>
 8006a34:	f04f 0b00 	mov.w	fp, #0
 8006a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a3c:	f104 021a 	add.w	r2, r4, #26
 8006a40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a44:	ebaa 0309 	sub.w	r3, sl, r9
 8006a48:	455b      	cmp	r3, fp
 8006a4a:	dc33      	bgt.n	8006ab4 <_printf_float+0x374>
 8006a4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a50:	429a      	cmp	r2, r3
 8006a52:	db3b      	blt.n	8006acc <_printf_float+0x38c>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d438      	bmi.n	8006acc <_printf_float+0x38c>
 8006a5a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006a5e:	eba2 0903 	sub.w	r9, r2, r3
 8006a62:	eba2 020a 	sub.w	r2, r2, sl
 8006a66:	4591      	cmp	r9, r2
 8006a68:	bfa8      	it	ge
 8006a6a:	4691      	movge	r9, r2
 8006a6c:	f1b9 0f00 	cmp.w	r9, #0
 8006a70:	dc34      	bgt.n	8006adc <_printf_float+0x39c>
 8006a72:	f04f 0800 	mov.w	r8, #0
 8006a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7a:	f104 0a1a 	add.w	sl, r4, #26
 8006a7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	eba3 0309 	sub.w	r3, r3, r9
 8006a88:	4543      	cmp	r3, r8
 8006a8a:	f77f af7a 	ble.w	8006982 <_printf_float+0x242>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f aeac 	beq.w	80067f6 <_printf_float+0xb6>
 8006a9e:	f108 0801 	add.w	r8, r8, #1
 8006aa2:	e7ec      	b.n	8006a7e <_printf_float+0x33e>
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d1c0      	bne.n	8006a34 <_printf_float+0x2f4>
 8006ab2:	e6a0      	b.n	80067f6 <_printf_float+0xb6>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	920b      	str	r2, [sp, #44]	; 0x2c
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f ae99 	beq.w	80067f6 <_printf_float+0xb6>
 8006ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ac6:	f10b 0b01 	add.w	fp, fp, #1
 8006aca:	e7b9      	b.n	8006a40 <_printf_float+0x300>
 8006acc:	4631      	mov	r1, r6
 8006ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d1bf      	bne.n	8006a5a <_printf_float+0x31a>
 8006ada:	e68c      	b.n	80067f6 <_printf_float+0xb6>
 8006adc:	464b      	mov	r3, r9
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	eb08 020a 	add.w	r2, r8, sl
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1c2      	bne.n	8006a72 <_printf_float+0x332>
 8006aec:	e683      	b.n	80067f6 <_printf_float+0xb6>
 8006aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af0:	2a01      	cmp	r2, #1
 8006af2:	dc01      	bgt.n	8006af8 <_printf_float+0x3b8>
 8006af4:	07db      	lsls	r3, r3, #31
 8006af6:	d539      	bpl.n	8006b6c <_printf_float+0x42c>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4642      	mov	r2, r8
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f ae77 	beq.w	80067f6 <_printf_float+0xb6>
 8006b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f ae6f 	beq.w	80067f6 <_printf_float+0xb6>
 8006b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006b24:	f7f9 ff40 	bl	80009a8 <__aeabi_dcmpeq>
 8006b28:	b9d8      	cbnz	r0, 8006b62 <_printf_float+0x422>
 8006b2a:	f109 33ff 	add.w	r3, r9, #4294967295
 8006b2e:	f108 0201 	add.w	r2, r8, #1
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d10e      	bne.n	8006b5a <_printf_float+0x41a>
 8006b3c:	e65b      	b.n	80067f6 <_printf_float+0xb6>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	464a      	mov	r2, r9
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f43f ae54 	beq.w	80067f6 <_printf_float+0xb6>
 8006b4e:	f108 0801 	add.w	r8, r8, #1
 8006b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4543      	cmp	r3, r8
 8006b58:	dcf1      	bgt.n	8006b3e <_printf_float+0x3fe>
 8006b5a:	4653      	mov	r3, sl
 8006b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b60:	e6de      	b.n	8006920 <_printf_float+0x1e0>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f104 091a 	add.w	r9, r4, #26
 8006b6a:	e7f2      	b.n	8006b52 <_printf_float+0x412>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4642      	mov	r2, r8
 8006b70:	e7df      	b.n	8006b32 <_printf_float+0x3f2>
 8006b72:	2301      	movs	r3, #1
 8006b74:	464a      	mov	r2, r9
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f43f ae3a 	beq.w	80067f6 <_printf_float+0xb6>
 8006b82:	f108 0801 	add.w	r8, r8, #1
 8006b86:	68e3      	ldr	r3, [r4, #12]
 8006b88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	dcf0      	bgt.n	8006b72 <_printf_float+0x432>
 8006b90:	e6fb      	b.n	800698a <_printf_float+0x24a>
 8006b92:	f04f 0800 	mov.w	r8, #0
 8006b96:	f104 0919 	add.w	r9, r4, #25
 8006b9a:	e7f4      	b.n	8006b86 <_printf_float+0x446>

08006b9c <_printf_common>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	4699      	mov	r9, r3
 8006ba4:	688a      	ldr	r2, [r1, #8]
 8006ba6:	690b      	ldr	r3, [r1, #16]
 8006ba8:	4607      	mov	r7, r0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bfb8      	it	lt
 8006bae:	4613      	movlt	r3, r2
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bbc:	b10a      	cbz	r2, 8006bc2 <_printf_common+0x26>
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	0699      	lsls	r1, r3, #26
 8006bc6:	bf42      	ittt	mi
 8006bc8:	6833      	ldrmi	r3, [r6, #0]
 8006bca:	3302      	addmi	r3, #2
 8006bcc:	6033      	strmi	r3, [r6, #0]
 8006bce:	6825      	ldr	r5, [r4, #0]
 8006bd0:	f015 0506 	ands.w	r5, r5, #6
 8006bd4:	d106      	bne.n	8006be4 <_printf_common+0x48>
 8006bd6:	f104 0a19 	add.w	sl, r4, #25
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	6832      	ldr	r2, [r6, #0]
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	dc2b      	bgt.n	8006c3c <_printf_common+0xa0>
 8006be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006be8:	1e13      	subs	r3, r2, #0
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	bf18      	it	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	0692      	lsls	r2, r2, #26
 8006bf2:	d430      	bmi.n	8006c56 <_printf_common+0xba>
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfc:	47c0      	blx	r8
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d023      	beq.n	8006c4a <_printf_common+0xae>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	6922      	ldr	r2, [r4, #16]
 8006c06:	f003 0306 	and.w	r3, r3, #6
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	bf14      	ite	ne
 8006c0e:	2500      	movne	r5, #0
 8006c10:	6833      	ldreq	r3, [r6, #0]
 8006c12:	f04f 0600 	mov.w	r6, #0
 8006c16:	bf08      	it	eq
 8006c18:	68e5      	ldreq	r5, [r4, #12]
 8006c1a:	f104 041a 	add.w	r4, r4, #26
 8006c1e:	bf08      	it	eq
 8006c20:	1aed      	subeq	r5, r5, r3
 8006c22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006c26:	bf08      	it	eq
 8006c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bfc4      	itt	gt
 8006c30:	1a9b      	subgt	r3, r3, r2
 8006c32:	18ed      	addgt	r5, r5, r3
 8006c34:	42b5      	cmp	r5, r6
 8006c36:	d11a      	bne.n	8006c6e <_printf_common+0xd2>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	e008      	b.n	8006c4e <_printf_common+0xb2>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4652      	mov	r2, sl
 8006c40:	4649      	mov	r1, r9
 8006c42:	4638      	mov	r0, r7
 8006c44:	47c0      	blx	r8
 8006c46:	3001      	adds	r0, #1
 8006c48:	d103      	bne.n	8006c52 <_printf_common+0xb6>
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c52:	3501      	adds	r5, #1
 8006c54:	e7c1      	b.n	8006bda <_printf_common+0x3e>
 8006c56:	2030      	movs	r0, #48	; 0x30
 8006c58:	18e1      	adds	r1, r4, r3
 8006c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c64:	4422      	add	r2, r4
 8006c66:	3302      	adds	r3, #2
 8006c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c6c:	e7c2      	b.n	8006bf4 <_printf_common+0x58>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4622      	mov	r2, r4
 8006c72:	4649      	mov	r1, r9
 8006c74:	4638      	mov	r0, r7
 8006c76:	47c0      	blx	r8
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d0e6      	beq.n	8006c4a <_printf_common+0xae>
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7d9      	b.n	8006c34 <_printf_common+0x98>

08006c80 <_printf_i>:
 8006c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	7e0f      	ldrb	r7, [r1, #24]
 8006c86:	4691      	mov	r9, r2
 8006c88:	2f78      	cmp	r7, #120	; 0x78
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	469a      	mov	sl, r3
 8006c90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c96:	d807      	bhi.n	8006ca8 <_printf_i+0x28>
 8006c98:	2f62      	cmp	r7, #98	; 0x62
 8006c9a:	d80a      	bhi.n	8006cb2 <_printf_i+0x32>
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	f000 80d5 	beq.w	8006e4c <_printf_i+0x1cc>
 8006ca2:	2f58      	cmp	r7, #88	; 0x58
 8006ca4:	f000 80c1 	beq.w	8006e2a <_printf_i+0x1aa>
 8006ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb0:	e03a      	b.n	8006d28 <_printf_i+0xa8>
 8006cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cb6:	2b15      	cmp	r3, #21
 8006cb8:	d8f6      	bhi.n	8006ca8 <_printf_i+0x28>
 8006cba:	a101      	add	r1, pc, #4	; (adr r1, 8006cc0 <_printf_i+0x40>)
 8006cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d2d 	.word	0x08006d2d
 8006cc8:	08006ca9 	.word	0x08006ca9
 8006ccc:	08006ca9 	.word	0x08006ca9
 8006cd0:	08006ca9 	.word	0x08006ca9
 8006cd4:	08006ca9 	.word	0x08006ca9
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006ca9 	.word	0x08006ca9
 8006ce0:	08006ca9 	.word	0x08006ca9
 8006ce4:	08006ca9 	.word	0x08006ca9
 8006ce8:	08006ca9 	.word	0x08006ca9
 8006cec:	08006e33 	.word	0x08006e33
 8006cf0:	08006d59 	.word	0x08006d59
 8006cf4:	08006ded 	.word	0x08006ded
 8006cf8:	08006ca9 	.word	0x08006ca9
 8006cfc:	08006ca9 	.word	0x08006ca9
 8006d00:	08006e55 	.word	0x08006e55
 8006d04:	08006ca9 	.word	0x08006ca9
 8006d08:	08006d59 	.word	0x08006d59
 8006d0c:	08006ca9 	.word	0x08006ca9
 8006d10:	08006ca9 	.word	0x08006ca9
 8006d14:	08006df5 	.word	0x08006df5
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0a0      	b.n	8006e6e <_printf_i+0x1ee>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	0607      	lsls	r7, r0, #24
 8006d32:	f103 0104 	add.w	r1, r3, #4
 8006d36:	6029      	str	r1, [r5, #0]
 8006d38:	d501      	bpl.n	8006d3e <_printf_i+0xbe>
 8006d3a:	681e      	ldr	r6, [r3, #0]
 8006d3c:	e003      	b.n	8006d46 <_printf_i+0xc6>
 8006d3e:	0646      	lsls	r6, r0, #25
 8006d40:	d5fb      	bpl.n	8006d3a <_printf_i+0xba>
 8006d42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	da03      	bge.n	8006d52 <_printf_i+0xd2>
 8006d4a:	232d      	movs	r3, #45	; 0x2d
 8006d4c:	4276      	negs	r6, r6
 8006d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d52:	230a      	movs	r3, #10
 8006d54:	4859      	ldr	r0, [pc, #356]	; (8006ebc <_printf_i+0x23c>)
 8006d56:	e012      	b.n	8006d7e <_printf_i+0xfe>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	6820      	ldr	r0, [r4, #0]
 8006d5c:	1d19      	adds	r1, r3, #4
 8006d5e:	6029      	str	r1, [r5, #0]
 8006d60:	0605      	lsls	r5, r0, #24
 8006d62:	d501      	bpl.n	8006d68 <_printf_i+0xe8>
 8006d64:	681e      	ldr	r6, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <_printf_i+0xee>
 8006d68:	0641      	lsls	r1, r0, #25
 8006d6a:	d5fb      	bpl.n	8006d64 <_printf_i+0xe4>
 8006d6c:	881e      	ldrh	r6, [r3, #0]
 8006d6e:	2f6f      	cmp	r7, #111	; 0x6f
 8006d70:	bf0c      	ite	eq
 8006d72:	2308      	moveq	r3, #8
 8006d74:	230a      	movne	r3, #10
 8006d76:	4851      	ldr	r0, [pc, #324]	; (8006ebc <_printf_i+0x23c>)
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d7e:	6865      	ldr	r5, [r4, #4]
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	bfa8      	it	ge
 8006d84:	6821      	ldrge	r1, [r4, #0]
 8006d86:	60a5      	str	r5, [r4, #8]
 8006d88:	bfa4      	itt	ge
 8006d8a:	f021 0104 	bicge.w	r1, r1, #4
 8006d8e:	6021      	strge	r1, [r4, #0]
 8006d90:	b90e      	cbnz	r6, 8006d96 <_printf_i+0x116>
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	d04b      	beq.n	8006e2e <_printf_i+0x1ae>
 8006d96:	4615      	mov	r5, r2
 8006d98:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d9c:	fb03 6711 	mls	r7, r3, r1, r6
 8006da0:	5dc7      	ldrb	r7, [r0, r7]
 8006da2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006da6:	4637      	mov	r7, r6
 8006da8:	42bb      	cmp	r3, r7
 8006daa:	460e      	mov	r6, r1
 8006dac:	d9f4      	bls.n	8006d98 <_printf_i+0x118>
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d10b      	bne.n	8006dca <_printf_i+0x14a>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	07de      	lsls	r6, r3, #31
 8006db6:	d508      	bpl.n	8006dca <_printf_i+0x14a>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	6861      	ldr	r1, [r4, #4]
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	bfde      	ittt	le
 8006dc0:	2330      	movle	r3, #48	; 0x30
 8006dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dca:	1b52      	subs	r2, r2, r5
 8006dcc:	6122      	str	r2, [r4, #16]
 8006dce:	464b      	mov	r3, r9
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	f8cd a000 	str.w	sl, [sp]
 8006dd8:	aa03      	add	r2, sp, #12
 8006dda:	f7ff fedf 	bl	8006b9c <_printf_common>
 8006dde:	3001      	adds	r0, #1
 8006de0:	d14a      	bne.n	8006e78 <_printf_i+0x1f8>
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295
 8006de6:	b004      	add	sp, #16
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	f043 0320 	orr.w	r3, r3, #32
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	2778      	movs	r7, #120	; 0x78
 8006df6:	4832      	ldr	r0, [pc, #200]	; (8006ec0 <_printf_i+0x240>)
 8006df8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	6829      	ldr	r1, [r5, #0]
 8006e00:	061f      	lsls	r7, r3, #24
 8006e02:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e06:	d402      	bmi.n	8006e0e <_printf_i+0x18e>
 8006e08:	065f      	lsls	r7, r3, #25
 8006e0a:	bf48      	it	mi
 8006e0c:	b2b6      	uxthmi	r6, r6
 8006e0e:	07df      	lsls	r7, r3, #31
 8006e10:	bf48      	it	mi
 8006e12:	f043 0320 	orrmi.w	r3, r3, #32
 8006e16:	6029      	str	r1, [r5, #0]
 8006e18:	bf48      	it	mi
 8006e1a:	6023      	strmi	r3, [r4, #0]
 8006e1c:	b91e      	cbnz	r6, 8006e26 <_printf_i+0x1a6>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	f023 0320 	bic.w	r3, r3, #32
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	2310      	movs	r3, #16
 8006e28:	e7a6      	b.n	8006d78 <_printf_i+0xf8>
 8006e2a:	4824      	ldr	r0, [pc, #144]	; (8006ebc <_printf_i+0x23c>)
 8006e2c:	e7e4      	b.n	8006df8 <_printf_i+0x178>
 8006e2e:	4615      	mov	r5, r2
 8006e30:	e7bd      	b.n	8006dae <_printf_i+0x12e>
 8006e32:	682b      	ldr	r3, [r5, #0]
 8006e34:	6826      	ldr	r6, [r4, #0]
 8006e36:	1d18      	adds	r0, r3, #4
 8006e38:	6961      	ldr	r1, [r4, #20]
 8006e3a:	6028      	str	r0, [r5, #0]
 8006e3c:	0635      	lsls	r5, r6, #24
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	d501      	bpl.n	8006e46 <_printf_i+0x1c6>
 8006e42:	6019      	str	r1, [r3, #0]
 8006e44:	e002      	b.n	8006e4c <_printf_i+0x1cc>
 8006e46:	0670      	lsls	r0, r6, #25
 8006e48:	d5fb      	bpl.n	8006e42 <_printf_i+0x1c2>
 8006e4a:	8019      	strh	r1, [r3, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4615      	mov	r5, r2
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	e7bc      	b.n	8006dce <_printf_i+0x14e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	2100      	movs	r1, #0
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	602a      	str	r2, [r5, #0]
 8006e5c:	681d      	ldr	r5, [r3, #0]
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 fdc2 	bl	80079ea <memchr>
 8006e66:	b108      	cbz	r0, 8006e6c <_printf_i+0x1ec>
 8006e68:	1b40      	subs	r0, r0, r5
 8006e6a:	6060      	str	r0, [r4, #4]
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	2300      	movs	r3, #0
 8006e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e76:	e7aa      	b.n	8006dce <_printf_i+0x14e>
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	47d0      	blx	sl
 8006e82:	3001      	adds	r0, #1
 8006e84:	d0ad      	beq.n	8006de2 <_printf_i+0x162>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	079b      	lsls	r3, r3, #30
 8006e8a:	d413      	bmi.n	8006eb4 <_printf_i+0x234>
 8006e8c:	68e0      	ldr	r0, [r4, #12]
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	4298      	cmp	r0, r3
 8006e92:	bfb8      	it	lt
 8006e94:	4618      	movlt	r0, r3
 8006e96:	e7a6      	b.n	8006de6 <_printf_i+0x166>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	47d0      	blx	sl
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d09d      	beq.n	8006de2 <_printf_i+0x162>
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	68e3      	ldr	r3, [r4, #12]
 8006eaa:	9903      	ldr	r1, [sp, #12]
 8006eac:	1a5b      	subs	r3, r3, r1
 8006eae:	42ab      	cmp	r3, r5
 8006eb0:	dcf2      	bgt.n	8006e98 <_printf_i+0x218>
 8006eb2:	e7eb      	b.n	8006e8c <_printf_i+0x20c>
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	f104 0619 	add.w	r6, r4, #25
 8006eba:	e7f5      	b.n	8006ea8 <_printf_i+0x228>
 8006ebc:	0800b338 	.word	0x0800b338
 8006ec0:	0800b349 	.word	0x0800b349

08006ec4 <_scanf_float>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	b087      	sub	sp, #28
 8006eca:	9303      	str	r3, [sp, #12]
 8006ecc:	688b      	ldr	r3, [r1, #8]
 8006ece:	4617      	mov	r7, r2
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ed6:	bf85      	ittet	hi
 8006ed8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006edc:	195b      	addhi	r3, r3, r5
 8006ede:	2300      	movls	r3, #0
 8006ee0:	9302      	strhi	r3, [sp, #8]
 8006ee2:	bf88      	it	hi
 8006ee4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ee8:	468b      	mov	fp, r1
 8006eea:	f04f 0500 	mov.w	r5, #0
 8006eee:	bf8c      	ite	hi
 8006ef0:	608b      	strhi	r3, [r1, #8]
 8006ef2:	9302      	strls	r3, [sp, #8]
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006efc:	f84b 3b1c 	str.w	r3, [fp], #28
 8006f00:	460c      	mov	r4, r1
 8006f02:	465e      	mov	r6, fp
 8006f04:	46aa      	mov	sl, r5
 8006f06:	46a9      	mov	r9, r5
 8006f08:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f0c:	9501      	str	r5, [sp, #4]
 8006f0e:	68a2      	ldr	r2, [r4, #8]
 8006f10:	b152      	cbz	r2, 8006f28 <_scanf_float+0x64>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b4e      	cmp	r3, #78	; 0x4e
 8006f18:	d864      	bhi.n	8006fe4 <_scanf_float+0x120>
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d83c      	bhi.n	8006f98 <_scanf_float+0xd4>
 8006f1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f22:	b2c8      	uxtb	r0, r1
 8006f24:	280e      	cmp	r0, #14
 8006f26:	d93a      	bls.n	8006f9e <_scanf_float+0xda>
 8006f28:	f1b9 0f00 	cmp.w	r9, #0
 8006f2c:	d003      	beq.n	8006f36 <_scanf_float+0x72>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f3a:	f1ba 0f01 	cmp.w	sl, #1
 8006f3e:	f200 8113 	bhi.w	8007168 <_scanf_float+0x2a4>
 8006f42:	455e      	cmp	r6, fp
 8006f44:	f200 8105 	bhi.w	8007152 <_scanf_float+0x28e>
 8006f48:	2501      	movs	r5, #1
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	b007      	add	sp, #28
 8006f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f56:	2a0d      	cmp	r2, #13
 8006f58:	d8e6      	bhi.n	8006f28 <_scanf_float+0x64>
 8006f5a:	a101      	add	r1, pc, #4	; (adr r1, 8006f60 <_scanf_float+0x9c>)
 8006f5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f60:	0800709f 	.word	0x0800709f
 8006f64:	08006f29 	.word	0x08006f29
 8006f68:	08006f29 	.word	0x08006f29
 8006f6c:	08006f29 	.word	0x08006f29
 8006f70:	080070ff 	.word	0x080070ff
 8006f74:	080070d7 	.word	0x080070d7
 8006f78:	08006f29 	.word	0x08006f29
 8006f7c:	08006f29 	.word	0x08006f29
 8006f80:	080070ad 	.word	0x080070ad
 8006f84:	08006f29 	.word	0x08006f29
 8006f88:	08006f29 	.word	0x08006f29
 8006f8c:	08006f29 	.word	0x08006f29
 8006f90:	08006f29 	.word	0x08006f29
 8006f94:	08007065 	.word	0x08007065
 8006f98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f9c:	e7db      	b.n	8006f56 <_scanf_float+0x92>
 8006f9e:	290e      	cmp	r1, #14
 8006fa0:	d8c2      	bhi.n	8006f28 <_scanf_float+0x64>
 8006fa2:	a001      	add	r0, pc, #4	; (adr r0, 8006fa8 <_scanf_float+0xe4>)
 8006fa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006fa8:	08007057 	.word	0x08007057
 8006fac:	08006f29 	.word	0x08006f29
 8006fb0:	08007057 	.word	0x08007057
 8006fb4:	080070eb 	.word	0x080070eb
 8006fb8:	08006f29 	.word	0x08006f29
 8006fbc:	08007005 	.word	0x08007005
 8006fc0:	08007041 	.word	0x08007041
 8006fc4:	08007041 	.word	0x08007041
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007041 	.word	0x08007041
 8006fd0:	08007041 	.word	0x08007041
 8006fd4:	08007041 	.word	0x08007041
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007041 	.word	0x08007041
 8006fe0:	08007041 	.word	0x08007041
 8006fe4:	2b6e      	cmp	r3, #110	; 0x6e
 8006fe6:	d809      	bhi.n	8006ffc <_scanf_float+0x138>
 8006fe8:	2b60      	cmp	r3, #96	; 0x60
 8006fea:	d8b2      	bhi.n	8006f52 <_scanf_float+0x8e>
 8006fec:	2b54      	cmp	r3, #84	; 0x54
 8006fee:	d077      	beq.n	80070e0 <_scanf_float+0x21c>
 8006ff0:	2b59      	cmp	r3, #89	; 0x59
 8006ff2:	d199      	bne.n	8006f28 <_scanf_float+0x64>
 8006ff4:	2d07      	cmp	r5, #7
 8006ff6:	d197      	bne.n	8006f28 <_scanf_float+0x64>
 8006ff8:	2508      	movs	r5, #8
 8006ffa:	e029      	b.n	8007050 <_scanf_float+0x18c>
 8006ffc:	2b74      	cmp	r3, #116	; 0x74
 8006ffe:	d06f      	beq.n	80070e0 <_scanf_float+0x21c>
 8007000:	2b79      	cmp	r3, #121	; 0x79
 8007002:	e7f6      	b.n	8006ff2 <_scanf_float+0x12e>
 8007004:	6821      	ldr	r1, [r4, #0]
 8007006:	05c8      	lsls	r0, r1, #23
 8007008:	d51a      	bpl.n	8007040 <_scanf_float+0x17c>
 800700a:	9b02      	ldr	r3, [sp, #8]
 800700c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007010:	6021      	str	r1, [r4, #0]
 8007012:	f109 0901 	add.w	r9, r9, #1
 8007016:	b11b      	cbz	r3, 8007020 <_scanf_float+0x15c>
 8007018:	3b01      	subs	r3, #1
 800701a:	3201      	adds	r2, #1
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	60a2      	str	r2, [r4, #8]
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	3b01      	subs	r3, #1
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	3301      	adds	r3, #1
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3b01      	subs	r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	f340 8084 	ble.w	8007140 <_scanf_float+0x27c>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	e766      	b.n	8006f0e <_scanf_float+0x4a>
 8007040:	eb1a 0f05 	cmn.w	sl, r5
 8007044:	f47f af70 	bne.w	8006f28 <_scanf_float+0x64>
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	f806 3b01 	strb.w	r3, [r6], #1
 8007054:	e7e4      	b.n	8007020 <_scanf_float+0x15c>
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	0610      	lsls	r0, r2, #24
 800705a:	f57f af65 	bpl.w	8006f28 <_scanf_float+0x64>
 800705e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007062:	e7f4      	b.n	800704e <_scanf_float+0x18a>
 8007064:	f1ba 0f00 	cmp.w	sl, #0
 8007068:	d10e      	bne.n	8007088 <_scanf_float+0x1c4>
 800706a:	f1b9 0f00 	cmp.w	r9, #0
 800706e:	d10e      	bne.n	800708e <_scanf_float+0x1ca>
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007076:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800707a:	d108      	bne.n	800708e <_scanf_float+0x1ca>
 800707c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007080:	f04f 0a01 	mov.w	sl, #1
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	e7e3      	b.n	8007050 <_scanf_float+0x18c>
 8007088:	f1ba 0f02 	cmp.w	sl, #2
 800708c:	d055      	beq.n	800713a <_scanf_float+0x276>
 800708e:	2d01      	cmp	r5, #1
 8007090:	d002      	beq.n	8007098 <_scanf_float+0x1d4>
 8007092:	2d04      	cmp	r5, #4
 8007094:	f47f af48 	bne.w	8006f28 <_scanf_float+0x64>
 8007098:	3501      	adds	r5, #1
 800709a:	b2ed      	uxtb	r5, r5
 800709c:	e7d8      	b.n	8007050 <_scanf_float+0x18c>
 800709e:	f1ba 0f01 	cmp.w	sl, #1
 80070a2:	f47f af41 	bne.w	8006f28 <_scanf_float+0x64>
 80070a6:	f04f 0a02 	mov.w	sl, #2
 80070aa:	e7d1      	b.n	8007050 <_scanf_float+0x18c>
 80070ac:	b97d      	cbnz	r5, 80070ce <_scanf_float+0x20a>
 80070ae:	f1b9 0f00 	cmp.w	r9, #0
 80070b2:	f47f af3c 	bne.w	8006f2e <_scanf_float+0x6a>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070c0:	f47f af39 	bne.w	8006f36 <_scanf_float+0x72>
 80070c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070c8:	2501      	movs	r5, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	e7c0      	b.n	8007050 <_scanf_float+0x18c>
 80070ce:	2d03      	cmp	r5, #3
 80070d0:	d0e2      	beq.n	8007098 <_scanf_float+0x1d4>
 80070d2:	2d05      	cmp	r5, #5
 80070d4:	e7de      	b.n	8007094 <_scanf_float+0x1d0>
 80070d6:	2d02      	cmp	r5, #2
 80070d8:	f47f af26 	bne.w	8006f28 <_scanf_float+0x64>
 80070dc:	2503      	movs	r5, #3
 80070de:	e7b7      	b.n	8007050 <_scanf_float+0x18c>
 80070e0:	2d06      	cmp	r5, #6
 80070e2:	f47f af21 	bne.w	8006f28 <_scanf_float+0x64>
 80070e6:	2507      	movs	r5, #7
 80070e8:	e7b2      	b.n	8007050 <_scanf_float+0x18c>
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	0591      	lsls	r1, r2, #22
 80070ee:	f57f af1b 	bpl.w	8006f28 <_scanf_float+0x64>
 80070f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80070fc:	e7a8      	b.n	8007050 <_scanf_float+0x18c>
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007108:	d006      	beq.n	8007118 <_scanf_float+0x254>
 800710a:	0550      	lsls	r0, r2, #21
 800710c:	f57f af0c 	bpl.w	8006f28 <_scanf_float+0x64>
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	f43f af0f 	beq.w	8006f36 <_scanf_float+0x72>
 8007118:	0591      	lsls	r1, r2, #22
 800711a:	bf58      	it	pl
 800711c:	9901      	ldrpl	r1, [sp, #4]
 800711e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007122:	bf58      	it	pl
 8007124:	eba9 0101 	subpl.w	r1, r9, r1
 8007128:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800712c:	f04f 0900 	mov.w	r9, #0
 8007130:	bf58      	it	pl
 8007132:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	e78a      	b.n	8007050 <_scanf_float+0x18c>
 800713a:	f04f 0a03 	mov.w	sl, #3
 800713e:	e787      	b.n	8007050 <_scanf_float+0x18c>
 8007140:	4639      	mov	r1, r7
 8007142:	4640      	mov	r0, r8
 8007144:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007148:	4798      	blx	r3
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f aedf 	beq.w	8006f0e <_scanf_float+0x4a>
 8007150:	e6ea      	b.n	8006f28 <_scanf_float+0x64>
 8007152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007156:	463a      	mov	r2, r7
 8007158:	4640      	mov	r0, r8
 800715a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800715e:	4798      	blx	r3
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	3b01      	subs	r3, #1
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	e6ec      	b.n	8006f42 <_scanf_float+0x7e>
 8007168:	1e6b      	subs	r3, r5, #1
 800716a:	2b06      	cmp	r3, #6
 800716c:	d825      	bhi.n	80071ba <_scanf_float+0x2f6>
 800716e:	2d02      	cmp	r5, #2
 8007170:	d836      	bhi.n	80071e0 <_scanf_float+0x31c>
 8007172:	455e      	cmp	r6, fp
 8007174:	f67f aee8 	bls.w	8006f48 <_scanf_float+0x84>
 8007178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800717c:	463a      	mov	r2, r7
 800717e:	4640      	mov	r0, r8
 8007180:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007184:	4798      	blx	r3
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	3b01      	subs	r3, #1
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	e7f1      	b.n	8007172 <_scanf_float+0x2ae>
 800718e:	9802      	ldr	r0, [sp, #8]
 8007190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007194:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007198:	463a      	mov	r2, r7
 800719a:	9002      	str	r0, [sp, #8]
 800719c:	4640      	mov	r0, r8
 800719e:	4798      	blx	r3
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071aa:	fa5f fa8a 	uxtb.w	sl, sl
 80071ae:	f1ba 0f02 	cmp.w	sl, #2
 80071b2:	d1ec      	bne.n	800718e <_scanf_float+0x2ca>
 80071b4:	3d03      	subs	r5, #3
 80071b6:	b2ed      	uxtb	r5, r5
 80071b8:	1b76      	subs	r6, r6, r5
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	05da      	lsls	r2, r3, #23
 80071be:	d52f      	bpl.n	8007220 <_scanf_float+0x35c>
 80071c0:	055b      	lsls	r3, r3, #21
 80071c2:	d510      	bpl.n	80071e6 <_scanf_float+0x322>
 80071c4:	455e      	cmp	r6, fp
 80071c6:	f67f aebf 	bls.w	8006f48 <_scanf_float+0x84>
 80071ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ce:	463a      	mov	r2, r7
 80071d0:	4640      	mov	r0, r8
 80071d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071d6:	4798      	blx	r3
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	3b01      	subs	r3, #1
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	e7f1      	b.n	80071c4 <_scanf_float+0x300>
 80071e0:	46aa      	mov	sl, r5
 80071e2:	9602      	str	r6, [sp, #8]
 80071e4:	e7df      	b.n	80071a6 <_scanf_float+0x2e2>
 80071e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	2965      	cmp	r1, #101	; 0x65
 80071ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80071f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	d00c      	beq.n	8007214 <_scanf_float+0x350>
 80071fa:	2945      	cmp	r1, #69	; 0x45
 80071fc:	d00a      	beq.n	8007214 <_scanf_float+0x350>
 80071fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007202:	463a      	mov	r2, r7
 8007204:	4640      	mov	r0, r8
 8007206:	4798      	blx	r3
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800720e:	3b01      	subs	r3, #1
 8007210:	1eb5      	subs	r5, r6, #2
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	463a      	mov	r2, r7
 8007216:	4640      	mov	r0, r8
 8007218:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800721c:	4798      	blx	r3
 800721e:	462e      	mov	r6, r5
 8007220:	6825      	ldr	r5, [r4, #0]
 8007222:	f015 0510 	ands.w	r5, r5, #16
 8007226:	d155      	bne.n	80072d4 <_scanf_float+0x410>
 8007228:	7035      	strb	r5, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007234:	d11d      	bne.n	8007272 <_scanf_float+0x3ae>
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	454b      	cmp	r3, r9
 800723a:	eba3 0209 	sub.w	r2, r3, r9
 800723e:	d125      	bne.n	800728c <_scanf_float+0x3c8>
 8007240:	2200      	movs	r2, #0
 8007242:	4659      	mov	r1, fp
 8007244:	4640      	mov	r0, r8
 8007246:	f002 fe0f 	bl	8009e68 <_strtod_r>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	f8d4 c000 	ldr.w	ip, [r4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f01c 0f02 	tst.w	ip, #2
 8007256:	4606      	mov	r6, r0
 8007258:	460f      	mov	r7, r1
 800725a:	f103 0204 	add.w	r2, r3, #4
 800725e:	d020      	beq.n	80072a2 <_scanf_float+0x3de>
 8007260:	9903      	ldr	r1, [sp, #12]
 8007262:	600a      	str	r2, [r1, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	e9c3 6700 	strd	r6, r7, [r3]
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60e3      	str	r3, [r4, #12]
 8007270:	e66b      	b.n	8006f4a <_scanf_float+0x86>
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0e3      	beq.n	8007240 <_scanf_float+0x37c>
 8007278:	9905      	ldr	r1, [sp, #20]
 800727a:	230a      	movs	r3, #10
 800727c:	462a      	mov	r2, r5
 800727e:	4640      	mov	r0, r8
 8007280:	3101      	adds	r1, #1
 8007282:	f002 fe75 	bl	8009f70 <_strtol_r>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	9e05      	ldr	r6, [sp, #20]
 800728a:	1ac2      	subs	r2, r0, r3
 800728c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007290:	429e      	cmp	r6, r3
 8007292:	bf28      	it	cs
 8007294:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007298:	4630      	mov	r0, r6
 800729a:	490f      	ldr	r1, [pc, #60]	; (80072d8 <_scanf_float+0x414>)
 800729c:	f000 fa06 	bl	80076ac <siprintf>
 80072a0:	e7ce      	b.n	8007240 <_scanf_float+0x37c>
 80072a2:	f01c 0f04 	tst.w	ip, #4
 80072a6:	d1db      	bne.n	8007260 <_scanf_float+0x39c>
 80072a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80072ac:	f8cc 2000 	str.w	r2, [ip]
 80072b0:	f8d3 8000 	ldr.w	r8, [r3]
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	f7f9 fba8 	bl	8000a0c <__aeabi_dcmpun>
 80072bc:	b128      	cbz	r0, 80072ca <_scanf_float+0x406>
 80072be:	4807      	ldr	r0, [pc, #28]	; (80072dc <_scanf_float+0x418>)
 80072c0:	f000 fbb0 	bl	8007a24 <nanf>
 80072c4:	f8c8 0000 	str.w	r0, [r8]
 80072c8:	e7cf      	b.n	800726a <_scanf_float+0x3a6>
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 fbfb 	bl	8000ac8 <__aeabi_d2f>
 80072d2:	e7f7      	b.n	80072c4 <_scanf_float+0x400>
 80072d4:	2500      	movs	r5, #0
 80072d6:	e638      	b.n	8006f4a <_scanf_float+0x86>
 80072d8:	0800b35a 	.word	0x0800b35a
 80072dc:	0800b6ed 	.word	0x0800b6ed

080072e0 <std>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ee:	6083      	str	r3, [r0, #8]
 80072f0:	8181      	strh	r1, [r0, #12]
 80072f2:	6643      	str	r3, [r0, #100]	; 0x64
 80072f4:	81c2      	strh	r2, [r0, #14]
 80072f6:	6183      	str	r3, [r0, #24]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2208      	movs	r2, #8
 80072fc:	305c      	adds	r0, #92	; 0x5c
 80072fe:	f000 facd 	bl	800789c <memset>
 8007302:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <std+0x58>)
 8007304:	6224      	str	r4, [r4, #32]
 8007306:	6263      	str	r3, [r4, #36]	; 0x24
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <std+0x5c>)
 800730a:	62a3      	str	r3, [r4, #40]	; 0x28
 800730c:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <std+0x60>)
 800730e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <std+0x64>)
 8007312:	6323      	str	r3, [r4, #48]	; 0x30
 8007314:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <std+0x68>)
 8007316:	429c      	cmp	r4, r3
 8007318:	d006      	beq.n	8007328 <std+0x48>
 800731a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800731e:	4294      	cmp	r4, r2
 8007320:	d002      	beq.n	8007328 <std+0x48>
 8007322:	33d0      	adds	r3, #208	; 0xd0
 8007324:	429c      	cmp	r4, r3
 8007326:	d105      	bne.n	8007334 <std+0x54>
 8007328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f000 bb58 	b.w	80079e4 <__retarget_lock_init_recursive>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	bf00      	nop
 8007338:	080076ed 	.word	0x080076ed
 800733c:	0800770f 	.word	0x0800770f
 8007340:	08007747 	.word	0x08007747
 8007344:	0800776b 	.word	0x0800776b
 8007348:	20000bb4 	.word	0x20000bb4

0800734c <stdio_exit_handler>:
 800734c:	4a02      	ldr	r2, [pc, #8]	; (8007358 <stdio_exit_handler+0xc>)
 800734e:	4903      	ldr	r1, [pc, #12]	; (800735c <stdio_exit_handler+0x10>)
 8007350:	4803      	ldr	r0, [pc, #12]	; (8007360 <stdio_exit_handler+0x14>)
 8007352:	f000 b869 	b.w	8007428 <_fwalk_sglue>
 8007356:	bf00      	nop
 8007358:	20000010 	.word	0x20000010
 800735c:	0800a5ad 	.word	0x0800a5ad
 8007360:	2000001c 	.word	0x2000001c

08007364 <cleanup_stdio>:
 8007364:	6841      	ldr	r1, [r0, #4]
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <cleanup_stdio+0x34>)
 8007368:	b510      	push	{r4, lr}
 800736a:	4299      	cmp	r1, r3
 800736c:	4604      	mov	r4, r0
 800736e:	d001      	beq.n	8007374 <cleanup_stdio+0x10>
 8007370:	f003 f91c 	bl	800a5ac <_fflush_r>
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <cleanup_stdio+0x38>)
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <cleanup_stdio+0x1e>
 800737c:	4620      	mov	r0, r4
 800737e:	f003 f915 	bl	800a5ac <_fflush_r>
 8007382:	68e1      	ldr	r1, [r4, #12]
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <cleanup_stdio+0x3c>)
 8007386:	4299      	cmp	r1, r3
 8007388:	d004      	beq.n	8007394 <cleanup_stdio+0x30>
 800738a:	4620      	mov	r0, r4
 800738c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007390:	f003 b90c 	b.w	800a5ac <_fflush_r>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	20000bb4 	.word	0x20000bb4
 800739c:	20000c1c 	.word	0x20000c1c
 80073a0:	20000c84 	.word	0x20000c84

080073a4 <global_stdio_init.part.0>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <global_stdio_init.part.0+0x30>)
 80073a8:	4c0b      	ldr	r4, [pc, #44]	; (80073d8 <global_stdio_init.part.0+0x34>)
 80073aa:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <global_stdio_init.part.0+0x38>)
 80073ac:	4620      	mov	r0, r4
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	2104      	movs	r1, #4
 80073b2:	2200      	movs	r2, #0
 80073b4:	f7ff ff94 	bl	80072e0 <std>
 80073b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073bc:	2201      	movs	r2, #1
 80073be:	2109      	movs	r1, #9
 80073c0:	f7ff ff8e 	bl	80072e0 <std>
 80073c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073c8:	2202      	movs	r2, #2
 80073ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ce:	2112      	movs	r1, #18
 80073d0:	f7ff bf86 	b.w	80072e0 <std>
 80073d4:	20000cec 	.word	0x20000cec
 80073d8:	20000bb4 	.word	0x20000bb4
 80073dc:	0800734d 	.word	0x0800734d

080073e0 <__sfp_lock_acquire>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__sfp_lock_acquire+0x8>)
 80073e2:	f000 bb00 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000cf5 	.word	0x20000cf5

080073ec <__sfp_lock_release>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__sfp_lock_release+0x8>)
 80073ee:	f000 bafb 	b.w	80079e8 <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	20000cf5 	.word	0x20000cf5

080073f8 <__sinit>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	f7ff fff0 	bl	80073e0 <__sfp_lock_acquire>
 8007400:	6a23      	ldr	r3, [r4, #32]
 8007402:	b11b      	cbz	r3, 800740c <__sinit+0x14>
 8007404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007408:	f7ff bff0 	b.w	80073ec <__sfp_lock_release>
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__sinit+0x28>)
 800740e:	6223      	str	r3, [r4, #32]
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <__sinit+0x2c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f5      	bne.n	8007404 <__sinit+0xc>
 8007418:	f7ff ffc4 	bl	80073a4 <global_stdio_init.part.0>
 800741c:	e7f2      	b.n	8007404 <__sinit+0xc>
 800741e:	bf00      	nop
 8007420:	08007365 	.word	0x08007365
 8007424:	20000cec 	.word	0x20000cec

08007428 <_fwalk_sglue>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4607      	mov	r7, r0
 800742e:	4688      	mov	r8, r1
 8007430:	4614      	mov	r4, r2
 8007432:	2600      	movs	r6, #0
 8007434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007438:	f1b9 0901 	subs.w	r9, r9, #1
 800743c:	d505      	bpl.n	800744a <_fwalk_sglue+0x22>
 800743e:	6824      	ldr	r4, [r4, #0]
 8007440:	2c00      	cmp	r4, #0
 8007442:	d1f7      	bne.n	8007434 <_fwalk_sglue+0xc>
 8007444:	4630      	mov	r0, r6
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d907      	bls.n	8007460 <_fwalk_sglue+0x38>
 8007450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007454:	3301      	adds	r3, #1
 8007456:	d003      	beq.n	8007460 <_fwalk_sglue+0x38>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	4306      	orrs	r6, r0
 8007460:	3568      	adds	r5, #104	; 0x68
 8007462:	e7e9      	b.n	8007438 <_fwalk_sglue+0x10>

08007464 <iprintf>:
 8007464:	b40f      	push	{r0, r1, r2, r3}
 8007466:	b507      	push	{r0, r1, r2, lr}
 8007468:	4906      	ldr	r1, [pc, #24]	; (8007484 <iprintf+0x20>)
 800746a:	ab04      	add	r3, sp, #16
 800746c:	6808      	ldr	r0, [r1, #0]
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	6881      	ldr	r1, [r0, #8]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	f002 fefd 	bl	800a274 <_vfiprintf_r>
 800747a:	b003      	add	sp, #12
 800747c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007480:	b004      	add	sp, #16
 8007482:	4770      	bx	lr
 8007484:	20000068 	.word	0x20000068

08007488 <putchar>:
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <putchar+0xc>)
 800748a:	4601      	mov	r1, r0
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	6882      	ldr	r2, [r0, #8]
 8007490:	f003 b915 	b.w	800a6be <_putc_r>
 8007494:	20000068 	.word	0x20000068

08007498 <_puts_r>:
 8007498:	6a03      	ldr	r3, [r0, #32]
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	4605      	mov	r5, r0
 800749e:	460e      	mov	r6, r1
 80074a0:	6884      	ldr	r4, [r0, #8]
 80074a2:	b90b      	cbnz	r3, 80074a8 <_puts_r+0x10>
 80074a4:	f7ff ffa8 	bl	80073f8 <__sinit>
 80074a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074aa:	07db      	lsls	r3, r3, #31
 80074ac:	d405      	bmi.n	80074ba <_puts_r+0x22>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	0598      	lsls	r0, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_puts_r+0x22>
 80074b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074b6:	f000 fa96 	bl	80079e6 <__retarget_lock_acquire_recursive>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	0719      	lsls	r1, r3, #28
 80074be:	d513      	bpl.n	80074e8 <_puts_r+0x50>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	b18b      	cbz	r3, 80074e8 <_puts_r+0x50>
 80074c4:	3e01      	subs	r6, #1
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074cc:	3b01      	subs	r3, #1
 80074ce:	60a3      	str	r3, [r4, #8]
 80074d0:	b9e9      	cbnz	r1, 800750e <_puts_r+0x76>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da2e      	bge.n	8007534 <_puts_r+0x9c>
 80074d6:	4622      	mov	r2, r4
 80074d8:	210a      	movs	r1, #10
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f949 	bl	8007772 <__swbuf_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d007      	beq.n	80074f4 <_puts_r+0x5c>
 80074e4:	250a      	movs	r5, #10
 80074e6:	e007      	b.n	80074f8 <_puts_r+0x60>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f97e 	bl	80077ec <__swsetup_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0e7      	beq.n	80074c4 <_puts_r+0x2c>
 80074f4:	f04f 35ff 	mov.w	r5, #4294967295
 80074f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d405      	bmi.n	800750a <_puts_r+0x72>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d402      	bmi.n	800750a <_puts_r+0x72>
 8007504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007506:	f000 fa6f 	bl	80079e8 <__retarget_lock_release_recursive>
 800750a:	4628      	mov	r0, r5
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	2b00      	cmp	r3, #0
 8007510:	da04      	bge.n	800751c <_puts_r+0x84>
 8007512:	69a2      	ldr	r2, [r4, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	dc06      	bgt.n	8007526 <_puts_r+0x8e>
 8007518:	290a      	cmp	r1, #10
 800751a:	d004      	beq.n	8007526 <_puts_r+0x8e>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	7019      	strb	r1, [r3, #0]
 8007524:	e7cf      	b.n	80074c6 <_puts_r+0x2e>
 8007526:	4622      	mov	r2, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f922 	bl	8007772 <__swbuf_r>
 800752e:	3001      	adds	r0, #1
 8007530:	d1c9      	bne.n	80074c6 <_puts_r+0x2e>
 8007532:	e7df      	b.n	80074f4 <_puts_r+0x5c>
 8007534:	250a      	movs	r5, #10
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	701d      	strb	r5, [r3, #0]
 800753e:	e7db      	b.n	80074f8 <_puts_r+0x60>

08007540 <puts>:
 8007540:	4b02      	ldr	r3, [pc, #8]	; (800754c <puts+0xc>)
 8007542:	4601      	mov	r1, r0
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	f7ff bfa7 	b.w	8007498 <_puts_r>
 800754a:	bf00      	nop
 800754c:	20000068 	.word	0x20000068

08007550 <setvbuf>:
 8007550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007554:	461d      	mov	r5, r3
 8007556:	4b54      	ldr	r3, [pc, #336]	; (80076a8 <setvbuf+0x158>)
 8007558:	4604      	mov	r4, r0
 800755a:	681f      	ldr	r7, [r3, #0]
 800755c:	460e      	mov	r6, r1
 800755e:	4690      	mov	r8, r2
 8007560:	b127      	cbz	r7, 800756c <setvbuf+0x1c>
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	b913      	cbnz	r3, 800756c <setvbuf+0x1c>
 8007566:	4638      	mov	r0, r7
 8007568:	f7ff ff46 	bl	80073f8 <__sinit>
 800756c:	f1b8 0f02 	cmp.w	r8, #2
 8007570:	d006      	beq.n	8007580 <setvbuf+0x30>
 8007572:	f1b8 0f01 	cmp.w	r8, #1
 8007576:	f200 8094 	bhi.w	80076a2 <setvbuf+0x152>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f2c0 8091 	blt.w	80076a2 <setvbuf+0x152>
 8007580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007582:	07da      	lsls	r2, r3, #31
 8007584:	d405      	bmi.n	8007592 <setvbuf+0x42>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	059b      	lsls	r3, r3, #22
 800758a:	d402      	bmi.n	8007592 <setvbuf+0x42>
 800758c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758e:	f000 fa2a 	bl	80079e6 <__retarget_lock_acquire_recursive>
 8007592:	4621      	mov	r1, r4
 8007594:	4638      	mov	r0, r7
 8007596:	f003 f809 	bl	800a5ac <_fflush_r>
 800759a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800759c:	b141      	cbz	r1, 80075b0 <setvbuf+0x60>
 800759e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075a2:	4299      	cmp	r1, r3
 80075a4:	d002      	beq.n	80075ac <setvbuf+0x5c>
 80075a6:	4638      	mov	r0, r7
 80075a8:	f001 f8ae 	bl	8008708 <_free_r>
 80075ac:	2300      	movs	r3, #0
 80075ae:	6363      	str	r3, [r4, #52]	; 0x34
 80075b0:	2300      	movs	r3, #0
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0618      	lsls	r0, r3, #24
 80075ba:	d503      	bpl.n	80075c4 <setvbuf+0x74>
 80075bc:	4638      	mov	r0, r7
 80075be:	6921      	ldr	r1, [r4, #16]
 80075c0:	f001 f8a2 	bl	8008708 <_free_r>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	f1b8 0f02 	cmp.w	r8, #2
 80075ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	d05f      	beq.n	8007696 <setvbuf+0x146>
 80075d6:	ab01      	add	r3, sp, #4
 80075d8:	466a      	mov	r2, sp
 80075da:	4621      	mov	r1, r4
 80075dc:	4638      	mov	r0, r7
 80075de:	f003 f80d 	bl	800a5fc <__swhatbuf_r>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	4318      	orrs	r0, r3
 80075e6:	81a0      	strh	r0, [r4, #12]
 80075e8:	bb2d      	cbnz	r5, 8007636 <setvbuf+0xe6>
 80075ea:	9d00      	ldr	r5, [sp, #0]
 80075ec:	4628      	mov	r0, r5
 80075ee:	f001 f8d3 	bl	8008798 <malloc>
 80075f2:	4606      	mov	r6, r0
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d150      	bne.n	800769a <setvbuf+0x14a>
 80075f8:	f8dd 9000 	ldr.w	r9, [sp]
 80075fc:	45a9      	cmp	r9, r5
 80075fe:	d13e      	bne.n	800767e <setvbuf+0x12e>
 8007600:	f04f 35ff 	mov.w	r5, #4294967295
 8007604:	2200      	movs	r2, #0
 8007606:	60a2      	str	r2, [r4, #8]
 8007608:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	2201      	movs	r2, #1
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	6162      	str	r2, [r4, #20]
 8007618:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800761a:	f043 0302 	orr.w	r3, r3, #2
 800761e:	07d1      	lsls	r1, r2, #31
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	d404      	bmi.n	800762e <setvbuf+0xde>
 8007624:	059b      	lsls	r3, r3, #22
 8007626:	d402      	bmi.n	800762e <setvbuf+0xde>
 8007628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800762a:	f000 f9dd 	bl	80079e8 <__retarget_lock_release_recursive>
 800762e:	4628      	mov	r0, r5
 8007630:	b003      	add	sp, #12
 8007632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007636:	2e00      	cmp	r6, #0
 8007638:	d0d8      	beq.n	80075ec <setvbuf+0x9c>
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	b913      	cbnz	r3, 8007644 <setvbuf+0xf4>
 800763e:	4638      	mov	r0, r7
 8007640:	f7ff feda 	bl	80073f8 <__sinit>
 8007644:	f1b8 0f01 	cmp.w	r8, #1
 8007648:	bf08      	it	eq
 800764a:	89a3      	ldrheq	r3, [r4, #12]
 800764c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007650:	bf04      	itt	eq
 8007652:	f043 0301 	orreq.w	r3, r3, #1
 8007656:	81a3      	strheq	r3, [r4, #12]
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	6026      	str	r6, [r4, #0]
 800765c:	f013 0208 	ands.w	r2, r3, #8
 8007660:	d01d      	beq.n	800769e <setvbuf+0x14e>
 8007662:	07da      	lsls	r2, r3, #31
 8007664:	bf41      	itttt	mi
 8007666:	2200      	movmi	r2, #0
 8007668:	426d      	negmi	r5, r5
 800766a:	60a2      	strmi	r2, [r4, #8]
 800766c:	61a5      	strmi	r5, [r4, #24]
 800766e:	bf58      	it	pl
 8007670:	60a5      	strpl	r5, [r4, #8]
 8007672:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007674:	f015 0501 	ands.w	r5, r5, #1
 8007678:	d0d4      	beq.n	8007624 <setvbuf+0xd4>
 800767a:	2500      	movs	r5, #0
 800767c:	e7d7      	b.n	800762e <setvbuf+0xde>
 800767e:	4648      	mov	r0, r9
 8007680:	f001 f88a 	bl	8008798 <malloc>
 8007684:	4606      	mov	r6, r0
 8007686:	2800      	cmp	r0, #0
 8007688:	d0ba      	beq.n	8007600 <setvbuf+0xb0>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	464d      	mov	r5, r9
 800768e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	e7d1      	b.n	800763a <setvbuf+0xea>
 8007696:	2500      	movs	r5, #0
 8007698:	e7b4      	b.n	8007604 <setvbuf+0xb4>
 800769a:	46a9      	mov	r9, r5
 800769c:	e7f5      	b.n	800768a <setvbuf+0x13a>
 800769e:	60a2      	str	r2, [r4, #8]
 80076a0:	e7e7      	b.n	8007672 <setvbuf+0x122>
 80076a2:	f04f 35ff 	mov.w	r5, #4294967295
 80076a6:	e7c2      	b.n	800762e <setvbuf+0xde>
 80076a8:	20000068 	.word	0x20000068

080076ac <siprintf>:
 80076ac:	b40e      	push	{r1, r2, r3}
 80076ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076b2:	b500      	push	{lr}
 80076b4:	b09c      	sub	sp, #112	; 0x70
 80076b6:	ab1d      	add	r3, sp, #116	; 0x74
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	9006      	str	r0, [sp, #24]
 80076bc:	9107      	str	r1, [sp, #28]
 80076be:	9104      	str	r1, [sp, #16]
 80076c0:	4808      	ldr	r0, [pc, #32]	; (80076e4 <siprintf+0x38>)
 80076c2:	4909      	ldr	r1, [pc, #36]	; (80076e8 <siprintf+0x3c>)
 80076c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c8:	9105      	str	r1, [sp, #20]
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	a902      	add	r1, sp, #8
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	f002 fcaa 	bl	800a028 <_svfiprintf_r>
 80076d4:	2200      	movs	r2, #0
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	b01c      	add	sp, #112	; 0x70
 80076dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e0:	b003      	add	sp, #12
 80076e2:	4770      	bx	lr
 80076e4:	20000068 	.word	0x20000068
 80076e8:	ffff0208 	.word	0xffff0208

080076ec <__sread>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	460c      	mov	r4, r1
 80076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f4:	f000 f928 	bl	8007948 <_read_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	bfab      	itete	ge
 80076fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007700:	181b      	addge	r3, r3, r0
 8007702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007706:	bfac      	ite	ge
 8007708:	6563      	strge	r3, [r4, #84]	; 0x54
 800770a:	81a3      	strhlt	r3, [r4, #12]
 800770c:	bd10      	pop	{r4, pc}

0800770e <__swrite>:
 800770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	461f      	mov	r7, r3
 8007714:	898b      	ldrh	r3, [r1, #12]
 8007716:	4605      	mov	r5, r0
 8007718:	05db      	lsls	r3, r3, #23
 800771a:	460c      	mov	r4, r1
 800771c:	4616      	mov	r6, r2
 800771e:	d505      	bpl.n	800772c <__swrite+0x1e>
 8007720:	2302      	movs	r3, #2
 8007722:	2200      	movs	r2, #0
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	f000 f8fc 	bl	8007924 <_lseek_r>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	4632      	mov	r2, r6
 8007730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	4628      	mov	r0, r5
 8007738:	463b      	mov	r3, r7
 800773a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007742:	f000 b913 	b.w	800796c <_write_r>

08007746 <__sseek>:
 8007746:	b510      	push	{r4, lr}
 8007748:	460c      	mov	r4, r1
 800774a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774e:	f000 f8e9 	bl	8007924 <_lseek_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	bf15      	itete	ne
 8007758:	6560      	strne	r0, [r4, #84]	; 0x54
 800775a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800775e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007762:	81a3      	strheq	r3, [r4, #12]
 8007764:	bf18      	it	ne
 8007766:	81a3      	strhne	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__sclose>:
 800776a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776e:	f000 b8c9 	b.w	8007904 <_close_r>

08007772 <__swbuf_r>:
 8007772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007774:	460e      	mov	r6, r1
 8007776:	4614      	mov	r4, r2
 8007778:	4605      	mov	r5, r0
 800777a:	b118      	cbz	r0, 8007784 <__swbuf_r+0x12>
 800777c:	6a03      	ldr	r3, [r0, #32]
 800777e:	b90b      	cbnz	r3, 8007784 <__swbuf_r+0x12>
 8007780:	f7ff fe3a 	bl	80073f8 <__sinit>
 8007784:	69a3      	ldr	r3, [r4, #24]
 8007786:	60a3      	str	r3, [r4, #8]
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	071a      	lsls	r2, r3, #28
 800778c:	d525      	bpl.n	80077da <__swbuf_r+0x68>
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	b31b      	cbz	r3, 80077da <__swbuf_r+0x68>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	6922      	ldr	r2, [r4, #16]
 8007796:	b2f6      	uxtb	r6, r6
 8007798:	1a98      	subs	r0, r3, r2
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	4637      	mov	r7, r6
 800779e:	4283      	cmp	r3, r0
 80077a0:	dc04      	bgt.n	80077ac <__swbuf_r+0x3a>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4628      	mov	r0, r5
 80077a6:	f002 ff01 	bl	800a5ac <_fflush_r>
 80077aa:	b9e0      	cbnz	r0, 80077e6 <__swbuf_r+0x74>
 80077ac:	68a3      	ldr	r3, [r4, #8]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	60a3      	str	r3, [r4, #8]
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	701e      	strb	r6, [r3, #0]
 80077ba:	6962      	ldr	r2, [r4, #20]
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	429a      	cmp	r2, r3
 80077c0:	d004      	beq.n	80077cc <__swbuf_r+0x5a>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	07db      	lsls	r3, r3, #31
 80077c6:	d506      	bpl.n	80077d6 <__swbuf_r+0x64>
 80077c8:	2e0a      	cmp	r6, #10
 80077ca:	d104      	bne.n	80077d6 <__swbuf_r+0x64>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f002 feec 	bl	800a5ac <_fflush_r>
 80077d4:	b938      	cbnz	r0, 80077e6 <__swbuf_r+0x74>
 80077d6:	4638      	mov	r0, r7
 80077d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 f805 	bl	80077ec <__swsetup_r>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d0d5      	beq.n	8007792 <__swbuf_r+0x20>
 80077e6:	f04f 37ff 	mov.w	r7, #4294967295
 80077ea:	e7f4      	b.n	80077d6 <__swbuf_r+0x64>

080077ec <__swsetup_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4b2a      	ldr	r3, [pc, #168]	; (8007898 <__swsetup_r+0xac>)
 80077f0:	4605      	mov	r5, r0
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	460c      	mov	r4, r1
 80077f6:	b118      	cbz	r0, 8007800 <__swsetup_r+0x14>
 80077f8:	6a03      	ldr	r3, [r0, #32]
 80077fa:	b90b      	cbnz	r3, 8007800 <__swsetup_r+0x14>
 80077fc:	f7ff fdfc 	bl	80073f8 <__sinit>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007806:	0718      	lsls	r0, r3, #28
 8007808:	d422      	bmi.n	8007850 <__swsetup_r+0x64>
 800780a:	06d9      	lsls	r1, r3, #27
 800780c:	d407      	bmi.n	800781e <__swsetup_r+0x32>
 800780e:	2309      	movs	r3, #9
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007816:	f04f 30ff 	mov.w	r0, #4294967295
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	e034      	b.n	8007888 <__swsetup_r+0x9c>
 800781e:	0758      	lsls	r0, r3, #29
 8007820:	d512      	bpl.n	8007848 <__swsetup_r+0x5c>
 8007822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007824:	b141      	cbz	r1, 8007838 <__swsetup_r+0x4c>
 8007826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800782a:	4299      	cmp	r1, r3
 800782c:	d002      	beq.n	8007834 <__swsetup_r+0x48>
 800782e:	4628      	mov	r0, r5
 8007830:	f000 ff6a 	bl	8008708 <_free_r>
 8007834:	2300      	movs	r3, #0
 8007836:	6363      	str	r3, [r4, #52]	; 0x34
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	2300      	movs	r3, #0
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f043 0308 	orr.w	r3, r3, #8
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	b94b      	cbnz	r3, 8007868 <__swsetup_r+0x7c>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800785a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800785e:	d003      	beq.n	8007868 <__swsetup_r+0x7c>
 8007860:	4621      	mov	r1, r4
 8007862:	4628      	mov	r0, r5
 8007864:	f002 feef 	bl	800a646 <__smakebuf_r>
 8007868:	89a0      	ldrh	r0, [r4, #12]
 800786a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800786e:	f010 0301 	ands.w	r3, r0, #1
 8007872:	d00a      	beq.n	800788a <__swsetup_r+0x9e>
 8007874:	2300      	movs	r3, #0
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6963      	ldr	r3, [r4, #20]
 800787a:	425b      	negs	r3, r3
 800787c:	61a3      	str	r3, [r4, #24]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b943      	cbnz	r3, 8007894 <__swsetup_r+0xa8>
 8007882:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007886:	d1c4      	bne.n	8007812 <__swsetup_r+0x26>
 8007888:	bd38      	pop	{r3, r4, r5, pc}
 800788a:	0781      	lsls	r1, r0, #30
 800788c:	bf58      	it	pl
 800788e:	6963      	ldrpl	r3, [r4, #20]
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	e7f4      	b.n	800787e <__swsetup_r+0x92>
 8007894:	2000      	movs	r0, #0
 8007896:	e7f7      	b.n	8007888 <__swsetup_r+0x9c>
 8007898:	20000068 	.word	0x20000068

0800789c <memset>:
 800789c:	4603      	mov	r3, r0
 800789e:	4402      	add	r2, r0
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d100      	bne.n	80078a6 <memset+0xa>
 80078a4:	4770      	bx	lr
 80078a6:	f803 1b01 	strb.w	r1, [r3], #1
 80078aa:	e7f9      	b.n	80078a0 <memset+0x4>

080078ac <strncmp>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	b16a      	cbz	r2, 80078cc <strncmp+0x20>
 80078b0:	3901      	subs	r1, #1
 80078b2:	1884      	adds	r4, r0, r2
 80078b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078bc:	429a      	cmp	r2, r3
 80078be:	d103      	bne.n	80078c8 <strncmp+0x1c>
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d001      	beq.n	80078c8 <strncmp+0x1c>
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	d1f5      	bne.n	80078b4 <strncmp+0x8>
 80078c8:	1ad0      	subs	r0, r2, r3
 80078ca:	bd10      	pop	{r4, pc}
 80078cc:	4610      	mov	r0, r2
 80078ce:	e7fc      	b.n	80078ca <strncmp+0x1e>

080078d0 <strstr>:
 80078d0:	780a      	ldrb	r2, [r1, #0]
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	b96a      	cbnz	r2, 80078f2 <strstr+0x22>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	429a      	cmp	r2, r3
 80078da:	d109      	bne.n	80078f0 <strstr+0x20>
 80078dc:	460c      	mov	r4, r1
 80078de:	4605      	mov	r5, r0
 80078e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0f6      	beq.n	80078d6 <strstr+0x6>
 80078e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80078ec:	429e      	cmp	r6, r3
 80078ee:	d0f7      	beq.n	80078e0 <strstr+0x10>
 80078f0:	3001      	adds	r0, #1
 80078f2:	7803      	ldrb	r3, [r0, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1ef      	bne.n	80078d8 <strstr+0x8>
 80078f8:	4618      	mov	r0, r3
 80078fa:	e7ec      	b.n	80078d6 <strstr+0x6>

080078fc <_localeconv_r>:
 80078fc:	4800      	ldr	r0, [pc, #0]	; (8007900 <_localeconv_r+0x4>)
 80078fe:	4770      	bx	lr
 8007900:	2000015c 	.word	0x2000015c

08007904 <_close_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	2300      	movs	r3, #0
 8007908:	4d05      	ldr	r5, [pc, #20]	; (8007920 <_close_r+0x1c>)
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7f9 ff3b 	bl	800178a <_close>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_close_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_close_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000cf0 	.word	0x20000cf0

08007924 <_lseek_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	2200      	movs	r2, #0
 800792e:	4d05      	ldr	r5, [pc, #20]	; (8007944 <_lseek_r+0x20>)
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7f9 ff4d 	bl	80017d2 <_lseek>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_lseek_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_lseek_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000cf0 	.word	0x20000cf0

08007948 <_read_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	2200      	movs	r2, #0
 8007952:	4d05      	ldr	r5, [pc, #20]	; (8007968 <_read_r+0x20>)
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fd88 	bl	800146c <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_read_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_read_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000cf0 	.word	0x20000cf0

0800796c <_write_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	2200      	movs	r2, #0
 8007976:	4d05      	ldr	r5, [pc, #20]	; (800798c <_write_r+0x20>)
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7f9 fd60 	bl	8001440 <_write>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_write_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_write_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20000cf0 	.word	0x20000cf0

08007990 <__errno>:
 8007990:	4b01      	ldr	r3, [pc, #4]	; (8007998 <__errno+0x8>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000068 	.word	0x20000068

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	2600      	movs	r6, #0
 80079a0:	4d0c      	ldr	r5, [pc, #48]	; (80079d4 <__libc_init_array+0x38>)
 80079a2:	4c0d      	ldr	r4, [pc, #52]	; (80079d8 <__libc_init_array+0x3c>)
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	f003 fb4e 	bl	800b04c <_init>
 80079b0:	2600      	movs	r6, #0
 80079b2:	4d0a      	ldr	r5, [pc, #40]	; (80079dc <__libc_init_array+0x40>)
 80079b4:	4c0a      	ldr	r4, [pc, #40]	; (80079e0 <__libc_init_array+0x44>)
 80079b6:	1b64      	subs	r4, r4, r5
 80079b8:	10a4      	asrs	r4, r4, #2
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	0800b750 	.word	0x0800b750
 80079d8:	0800b750 	.word	0x0800b750
 80079dc:	0800b750 	.word	0x0800b750
 80079e0:	0800b754 	.word	0x0800b754

080079e4 <__retarget_lock_init_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_acquire_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <__retarget_lock_release_recursive>:
 80079e8:	4770      	bx	lr

080079ea <memchr>:
 80079ea:	4603      	mov	r3, r0
 80079ec:	b510      	push	{r4, lr}
 80079ee:	b2c9      	uxtb	r1, r1
 80079f0:	4402      	add	r2, r0
 80079f2:	4293      	cmp	r3, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	d101      	bne.n	80079fc <memchr+0x12>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e003      	b.n	8007a04 <memchr+0x1a>
 80079fc:	7804      	ldrb	r4, [r0, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	428c      	cmp	r4, r1
 8007a02:	d1f6      	bne.n	80079f2 <memchr+0x8>
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <memcpy>:
 8007a06:	440a      	add	r2, r1
 8007a08:	4291      	cmp	r1, r2
 8007a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a0e:	d100      	bne.n	8007a12 <memcpy+0xc>
 8007a10:	4770      	bx	lr
 8007a12:	b510      	push	{r4, lr}
 8007a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a18:	4291      	cmp	r1, r2
 8007a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a1e:	d1f9      	bne.n	8007a14 <memcpy+0xe>
 8007a20:	bd10      	pop	{r4, pc}
	...

08007a24 <nanf>:
 8007a24:	4800      	ldr	r0, [pc, #0]	; (8007a28 <nanf+0x4>)
 8007a26:	4770      	bx	lr
 8007a28:	7fc00000 	.word	0x7fc00000

08007a2c <quorem>:
 8007a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	6903      	ldr	r3, [r0, #16]
 8007a32:	690c      	ldr	r4, [r1, #16]
 8007a34:	4607      	mov	r7, r0
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	db7f      	blt.n	8007b3a <quorem+0x10e>
 8007a3a:	3c01      	subs	r4, #1
 8007a3c:	f100 0514 	add.w	r5, r0, #20
 8007a40:	f101 0814 	add.w	r8, r1, #20
 8007a44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a52:	3301      	adds	r3, #1
 8007a54:	429a      	cmp	r2, r3
 8007a56:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a5a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a62:	d331      	bcc.n	8007ac8 <quorem+0x9c>
 8007a64:	f04f 0e00 	mov.w	lr, #0
 8007a68:	4640      	mov	r0, r8
 8007a6a:	46ac      	mov	ip, r5
 8007a6c:	46f2      	mov	sl, lr
 8007a6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a72:	b293      	uxth	r3, r2
 8007a74:	fb06 e303 	mla	r3, r6, r3, lr
 8007a78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a7c:	0c1a      	lsrs	r2, r3, #16
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	fb06 220e 	mla	r2, r6, lr, r2
 8007a84:	ebaa 0303 	sub.w	r3, sl, r3
 8007a88:	f8dc a000 	ldr.w	sl, [ip]
 8007a8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a90:	fa1f fa8a 	uxth.w	sl, sl
 8007a94:	4453      	add	r3, sl
 8007a96:	f8dc a000 	ldr.w	sl, [ip]
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aaa:	4581      	cmp	r9, r0
 8007aac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ab0:	f84c 3b04 	str.w	r3, [ip], #4
 8007ab4:	d2db      	bcs.n	8007a6e <quorem+0x42>
 8007ab6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aba:	b92b      	cbnz	r3, 8007ac8 <quorem+0x9c>
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	429d      	cmp	r5, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	d32d      	bcc.n	8007b22 <quorem+0xf6>
 8007ac6:	613c      	str	r4, [r7, #16]
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f001 f9dd 	bl	8008e88 <__mcmp>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	db23      	blt.n	8007b1a <quorem+0xee>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007adc:	f8d1 c000 	ldr.w	ip, [r1]
 8007ae0:	b293      	uxth	r3, r2
 8007ae2:	1ac3      	subs	r3, r0, r3
 8007ae4:	0c12      	lsrs	r2, r2, #16
 8007ae6:	fa1f f08c 	uxth.w	r0, ip
 8007aea:	4403      	add	r3, r0
 8007aec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afa:	45c1      	cmp	r9, r8
 8007afc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b00:	f841 3b04 	str.w	r3, [r1], #4
 8007b04:	d2e8      	bcs.n	8007ad8 <quorem+0xac>
 8007b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b0e:	b922      	cbnz	r2, 8007b1a <quorem+0xee>
 8007b10:	3b04      	subs	r3, #4
 8007b12:	429d      	cmp	r5, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	d30a      	bcc.n	8007b2e <quorem+0x102>
 8007b18:	613c      	str	r4, [r7, #16]
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	2a00      	cmp	r2, #0
 8007b28:	d1cd      	bne.n	8007ac6 <quorem+0x9a>
 8007b2a:	3c01      	subs	r4, #1
 8007b2c:	e7c8      	b.n	8007ac0 <quorem+0x94>
 8007b2e:	6812      	ldr	r2, [r2, #0]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	d1f0      	bne.n	8007b18 <quorem+0xec>
 8007b36:	3c01      	subs	r4, #1
 8007b38:	e7eb      	b.n	8007b12 <quorem+0xe6>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e7ee      	b.n	8007b1c <quorem+0xf0>
	...

08007b40 <_dtoa_r>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	4616      	mov	r6, r2
 8007b46:	461f      	mov	r7, r3
 8007b48:	69c4      	ldr	r4, [r0, #28]
 8007b4a:	b099      	sub	sp, #100	; 0x64
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007b56:	b974      	cbnz	r4, 8007b76 <_dtoa_r+0x36>
 8007b58:	2010      	movs	r0, #16
 8007b5a:	f000 fe1d 	bl	8008798 <malloc>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	61e8      	str	r0, [r5, #28]
 8007b62:	b920      	cbnz	r0, 8007b6e <_dtoa_r+0x2e>
 8007b64:	21ef      	movs	r1, #239	; 0xef
 8007b66:	4bac      	ldr	r3, [pc, #688]	; (8007e18 <_dtoa_r+0x2d8>)
 8007b68:	48ac      	ldr	r0, [pc, #688]	; (8007e1c <_dtoa_r+0x2dc>)
 8007b6a:	f002 fe2f 	bl	800a7cc <__assert_func>
 8007b6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b72:	6004      	str	r4, [r0, #0]
 8007b74:	60c4      	str	r4, [r0, #12]
 8007b76:	69eb      	ldr	r3, [r5, #28]
 8007b78:	6819      	ldr	r1, [r3, #0]
 8007b7a:	b151      	cbz	r1, 8007b92 <_dtoa_r+0x52>
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4093      	lsls	r3, r2
 8007b82:	604a      	str	r2, [r1, #4]
 8007b84:	608b      	str	r3, [r1, #8]
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 fefa 	bl	8008980 <_Bfree>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	69eb      	ldr	r3, [r5, #28]
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	1e3b      	subs	r3, r7, #0
 8007b94:	bfaf      	iteee	ge
 8007b96:	2300      	movge	r3, #0
 8007b98:	2201      	movlt	r2, #1
 8007b9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b9e:	9305      	strlt	r3, [sp, #20]
 8007ba0:	bfa8      	it	ge
 8007ba2:	f8c8 3000 	strge.w	r3, [r8]
 8007ba6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007baa:	4b9d      	ldr	r3, [pc, #628]	; (8007e20 <_dtoa_r+0x2e0>)
 8007bac:	bfb8      	it	lt
 8007bae:	f8c8 2000 	strlt.w	r2, [r8]
 8007bb2:	ea33 0309 	bics.w	r3, r3, r9
 8007bb6:	d119      	bne.n	8007bec <_dtoa_r+0xac>
 8007bb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bc4:	4333      	orrs	r3, r6
 8007bc6:	f000 8589 	beq.w	80086dc <_dtoa_r+0xb9c>
 8007bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bcc:	b953      	cbnz	r3, 8007be4 <_dtoa_r+0xa4>
 8007bce:	4b95      	ldr	r3, [pc, #596]	; (8007e24 <_dtoa_r+0x2e4>)
 8007bd0:	e023      	b.n	8007c1a <_dtoa_r+0xda>
 8007bd2:	4b95      	ldr	r3, [pc, #596]	; (8007e28 <_dtoa_r+0x2e8>)
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	9803      	ldr	r0, [sp, #12]
 8007bde:	b019      	add	sp, #100	; 0x64
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	4b8f      	ldr	r3, [pc, #572]	; (8007e24 <_dtoa_r+0x2e4>)
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	3303      	adds	r3, #3
 8007bea:	e7f5      	b.n	8007bd8 <_dtoa_r+0x98>
 8007bec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f7f8 fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8007c00:	4680      	mov	r8, r0
 8007c02:	b160      	cbz	r0, 8007c1e <_dtoa_r+0xde>
 8007c04:	2301      	movs	r3, #1
 8007c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8562 	beq.w	80086d6 <_dtoa_r+0xb96>
 8007c12:	4b86      	ldr	r3, [pc, #536]	; (8007e2c <_dtoa_r+0x2ec>)
 8007c14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	e7de      	b.n	8007bdc <_dtoa_r+0x9c>
 8007c1e:	ab16      	add	r3, sp, #88	; 0x58
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	ab17      	add	r3, sp, #92	; 0x5c
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4628      	mov	r0, r5
 8007c28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c2c:	f001 fa3c 	bl	80090a8 <__d2b>
 8007c30:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c34:	4682      	mov	sl, r0
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	d07e      	beq.n	8007d38 <_dtoa_r+0x1f8>
 8007c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c48:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c50:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007c54:	4619      	mov	r1, r3
 8007c56:	2200      	movs	r2, #0
 8007c58:	4b75      	ldr	r3, [pc, #468]	; (8007e30 <_dtoa_r+0x2f0>)
 8007c5a:	f7f8 fa85 	bl	8000168 <__aeabi_dsub>
 8007c5e:	a368      	add	r3, pc, #416	; (adr r3, 8007e00 <_dtoa_r+0x2c0>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 fc38 	bl	80004d8 <__aeabi_dmul>
 8007c68:	a367      	add	r3, pc, #412	; (adr r3, 8007e08 <_dtoa_r+0x2c8>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fa7d 	bl	800016c <__adddf3>
 8007c72:	4606      	mov	r6, r0
 8007c74:	4620      	mov	r0, r4
 8007c76:	460f      	mov	r7, r1
 8007c78:	f7f8 fbc4 	bl	8000404 <__aeabi_i2d>
 8007c7c:	a364      	add	r3, pc, #400	; (adr r3, 8007e10 <_dtoa_r+0x2d0>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fc29 	bl	80004d8 <__aeabi_dmul>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	f7f8 fa6d 	bl	800016c <__adddf3>
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	f7f8 fecf 	bl	8000a38 <__aeabi_d2iz>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4683      	mov	fp, r0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fe8a 	bl	80009bc <__aeabi_dcmplt>
 8007ca8:	b148      	cbz	r0, 8007cbe <_dtoa_r+0x17e>
 8007caa:	4658      	mov	r0, fp
 8007cac:	f7f8 fbaa 	bl	8000404 <__aeabi_i2d>
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	f7f8 fe78 	bl	80009a8 <__aeabi_dcmpeq>
 8007cb8:	b908      	cbnz	r0, 8007cbe <_dtoa_r+0x17e>
 8007cba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cbe:	f1bb 0f16 	cmp.w	fp, #22
 8007cc2:	d857      	bhi.n	8007d74 <_dtoa_r+0x234>
 8007cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cc8:	4b5a      	ldr	r3, [pc, #360]	; (8007e34 <_dtoa_r+0x2f4>)
 8007cca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fe73 	bl	80009bc <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d04e      	beq.n	8007d78 <_dtoa_r+0x238>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ce4:	1b1b      	subs	r3, r3, r4
 8007ce6:	1e5a      	subs	r2, r3, #1
 8007ce8:	bf46      	itte	mi
 8007cea:	f1c3 0901 	rsbmi	r9, r3, #1
 8007cee:	2300      	movmi	r3, #0
 8007cf0:	f04f 0900 	movpl.w	r9, #0
 8007cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cf6:	bf48      	it	mi
 8007cf8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007cfa:	f1bb 0f00 	cmp.w	fp, #0
 8007cfe:	db3d      	blt.n	8007d7c <_dtoa_r+0x23c>
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007d06:	445b      	add	r3, fp
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d10:	2b09      	cmp	r3, #9
 8007d12:	d867      	bhi.n	8007de4 <_dtoa_r+0x2a4>
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	bfc4      	itt	gt
 8007d18:	3b04      	subgt	r3, #4
 8007d1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d1e:	bfc8      	it	gt
 8007d20:	2400      	movgt	r4, #0
 8007d22:	f1a3 0302 	sub.w	r3, r3, #2
 8007d26:	bfd8      	it	le
 8007d28:	2401      	movle	r4, #1
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	f200 8086 	bhi.w	8007e3c <_dtoa_r+0x2fc>
 8007d30:	e8df f003 	tbb	[pc, r3]
 8007d34:	5637392c 	.word	0x5637392c
 8007d38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007d3c:	441c      	add	r4, r3
 8007d3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	bfc1      	itttt	gt
 8007d46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d4a:	fa09 f903 	lslgt.w	r9, r9, r3
 8007d4e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007d52:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d56:	bfd6      	itet	le
 8007d58:	f1c3 0320 	rsble	r3, r3, #32
 8007d5c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007d60:	fa06 f003 	lslle.w	r0, r6, r3
 8007d64:	f7f8 fb3e 	bl	80003e4 <__aeabi_ui2d>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d6e:	3c01      	subs	r4, #1
 8007d70:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d72:	e76f      	b.n	8007c54 <_dtoa_r+0x114>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e7b3      	b.n	8007ce0 <_dtoa_r+0x1a0>
 8007d78:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d7a:	e7b2      	b.n	8007ce2 <_dtoa_r+0x1a2>
 8007d7c:	f1cb 0300 	rsb	r3, fp, #0
 8007d80:	930a      	str	r3, [sp, #40]	; 0x28
 8007d82:	2300      	movs	r3, #0
 8007d84:	eba9 090b 	sub.w	r9, r9, fp
 8007d88:	930e      	str	r3, [sp, #56]	; 0x38
 8007d8a:	e7c0      	b.n	8007d0e <_dtoa_r+0x1ce>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dc55      	bgt.n	8007e42 <_dtoa_r+0x302>
 8007d96:	2301      	movs	r3, #1
 8007d98:	461a      	mov	r2, r3
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	9308      	str	r3, [sp, #32]
 8007d9e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007da0:	e00b      	b.n	8007dba <_dtoa_r+0x27a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7f3      	b.n	8007d8e <_dtoa_r+0x24e>
 8007da6:	2300      	movs	r3, #0
 8007da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dac:	445b      	add	r3, fp
 8007dae:	9306      	str	r3, [sp, #24]
 8007db0:	3301      	adds	r3, #1
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	9308      	str	r3, [sp, #32]
 8007db6:	bfb8      	it	lt
 8007db8:	2301      	movlt	r3, #1
 8007dba:	2100      	movs	r1, #0
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	69e8      	ldr	r0, [r5, #28]
 8007dc0:	f102 0614 	add.w	r6, r2, #20
 8007dc4:	429e      	cmp	r6, r3
 8007dc6:	d940      	bls.n	8007e4a <_dtoa_r+0x30a>
 8007dc8:	6041      	str	r1, [r0, #4]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 fd98 	bl	8008900 <_Balloc>
 8007dd0:	9003      	str	r0, [sp, #12]
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d13c      	bne.n	8007e50 <_dtoa_r+0x310>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f240 11af 	movw	r1, #431	; 0x1af
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <_dtoa_r+0x2f8>)
 8007dde:	e6c3      	b.n	8007b68 <_dtoa_r+0x28>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e7e1      	b.n	8007da8 <_dtoa_r+0x268>
 8007de4:	2401      	movs	r4, #1
 8007de6:	2300      	movs	r3, #0
 8007de8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007dea:	9322      	str	r3, [sp, #136]	; 0x88
 8007dec:	f04f 33ff 	mov.w	r3, #4294967295
 8007df0:	2200      	movs	r2, #0
 8007df2:	9306      	str	r3, [sp, #24]
 8007df4:	9308      	str	r3, [sp, #32]
 8007df6:	2312      	movs	r3, #18
 8007df8:	e7d1      	b.n	8007d9e <_dtoa_r+0x25e>
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w
 8007e00:	636f4361 	.word	0x636f4361
 8007e04:	3fd287a7 	.word	0x3fd287a7
 8007e08:	8b60c8b3 	.word	0x8b60c8b3
 8007e0c:	3fc68a28 	.word	0x3fc68a28
 8007e10:	509f79fb 	.word	0x509f79fb
 8007e14:	3fd34413 	.word	0x3fd34413
 8007e18:	0800b36c 	.word	0x0800b36c
 8007e1c:	0800b383 	.word	0x0800b383
 8007e20:	7ff00000 	.word	0x7ff00000
 8007e24:	0800b368 	.word	0x0800b368
 8007e28:	0800b35f 	.word	0x0800b35f
 8007e2c:	0800b337 	.word	0x0800b337
 8007e30:	3ff80000 	.word	0x3ff80000
 8007e34:	0800b470 	.word	0x0800b470
 8007e38:	0800b3db 	.word	0x0800b3db
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e40:	e7d4      	b.n	8007dec <_dtoa_r+0x2ac>
 8007e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e44:	9306      	str	r3, [sp, #24]
 8007e46:	9308      	str	r3, [sp, #32]
 8007e48:	e7b7      	b.n	8007dba <_dtoa_r+0x27a>
 8007e4a:	3101      	adds	r1, #1
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	e7b7      	b.n	8007dc0 <_dtoa_r+0x280>
 8007e50:	69eb      	ldr	r3, [r5, #28]
 8007e52:	9a03      	ldr	r2, [sp, #12]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	9b08      	ldr	r3, [sp, #32]
 8007e58:	2b0e      	cmp	r3, #14
 8007e5a:	f200 80a8 	bhi.w	8007fae <_dtoa_r+0x46e>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	f000 80a5 	beq.w	8007fae <_dtoa_r+0x46e>
 8007e64:	f1bb 0f00 	cmp.w	fp, #0
 8007e68:	dd34      	ble.n	8007ed4 <_dtoa_r+0x394>
 8007e6a:	4b9a      	ldr	r3, [pc, #616]	; (80080d4 <_dtoa_r+0x594>)
 8007e6c:	f00b 020f 	and.w	r2, fp, #15
 8007e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e80:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007e84:	d016      	beq.n	8007eb4 <_dtoa_r+0x374>
 8007e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e8a:	4b93      	ldr	r3, [pc, #588]	; (80080d8 <_dtoa_r+0x598>)
 8007e8c:	2703      	movs	r7, #3
 8007e8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e92:	f7f8 fc4b 	bl	800072c <__aeabi_ddiv>
 8007e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e9a:	f004 040f 	and.w	r4, r4, #15
 8007e9e:	4e8e      	ldr	r6, [pc, #568]	; (80080d8 <_dtoa_r+0x598>)
 8007ea0:	b954      	cbnz	r4, 8007eb8 <_dtoa_r+0x378>
 8007ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eaa:	f7f8 fc3f 	bl	800072c <__aeabi_ddiv>
 8007eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eb2:	e029      	b.n	8007f08 <_dtoa_r+0x3c8>
 8007eb4:	2702      	movs	r7, #2
 8007eb6:	e7f2      	b.n	8007e9e <_dtoa_r+0x35e>
 8007eb8:	07e1      	lsls	r1, r4, #31
 8007eba:	d508      	bpl.n	8007ece <_dtoa_r+0x38e>
 8007ebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ec0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec4:	f7f8 fb08 	bl	80004d8 <__aeabi_dmul>
 8007ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ecc:	3701      	adds	r7, #1
 8007ece:	1064      	asrs	r4, r4, #1
 8007ed0:	3608      	adds	r6, #8
 8007ed2:	e7e5      	b.n	8007ea0 <_dtoa_r+0x360>
 8007ed4:	f000 80a5 	beq.w	8008022 <_dtoa_r+0x4e2>
 8007ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007edc:	f1cb 0400 	rsb	r4, fp, #0
 8007ee0:	4b7c      	ldr	r3, [pc, #496]	; (80080d4 <_dtoa_r+0x594>)
 8007ee2:	f004 020f 	and.w	r2, r4, #15
 8007ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 faf3 	bl	80004d8 <__aeabi_dmul>
 8007ef2:	2702      	movs	r7, #2
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007efa:	4e77      	ldr	r6, [pc, #476]	; (80080d8 <_dtoa_r+0x598>)
 8007efc:	1124      	asrs	r4, r4, #4
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	f040 8084 	bne.w	800800c <_dtoa_r+0x4cc>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1d2      	bne.n	8007eae <_dtoa_r+0x36e>
 8007f08:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8087 	beq.w	8008026 <_dtoa_r+0x4e6>
 8007f18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4b6f      	ldr	r3, [pc, #444]	; (80080dc <_dtoa_r+0x59c>)
 8007f20:	f7f8 fd4c 	bl	80009bc <__aeabi_dcmplt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d07e      	beq.n	8008026 <_dtoa_r+0x4e6>
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d07b      	beq.n	8008026 <_dtoa_r+0x4e6>
 8007f2e:	9b06      	ldr	r3, [sp, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd38      	ble.n	8007fa6 <_dtoa_r+0x466>
 8007f34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4b69      	ldr	r3, [pc, #420]	; (80080e0 <_dtoa_r+0x5a0>)
 8007f3c:	f7f8 facc 	bl	80004d8 <__aeabi_dmul>
 8007f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f44:	9c06      	ldr	r4, [sp, #24]
 8007f46:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007f4a:	3701      	adds	r7, #1
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7f8 fa59 	bl	8000404 <__aeabi_i2d>
 8007f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f56:	f7f8 fabf 	bl	80004d8 <__aeabi_dmul>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4b61      	ldr	r3, [pc, #388]	; (80080e4 <_dtoa_r+0x5a4>)
 8007f5e:	f7f8 f905 	bl	800016c <__adddf3>
 8007f62:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f6a:	9611      	str	r6, [sp, #68]	; 0x44
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d15d      	bne.n	800802c <_dtoa_r+0x4ec>
 8007f70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f74:	2200      	movs	r2, #0
 8007f76:	4b5c      	ldr	r3, [pc, #368]	; (80080e8 <_dtoa_r+0x5a8>)
 8007f78:	f7f8 f8f6 	bl	8000168 <__aeabi_dsub>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f84:	4633      	mov	r3, r6
 8007f86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f88:	f7f8 fd36 	bl	80009f8 <__aeabi_dcmpgt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f040 8295 	bne.w	80084bc <_dtoa_r+0x97c>
 8007f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f9c:	f7f8 fd0e 	bl	80009bc <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f040 8289 	bne.w	80084b8 <_dtoa_r+0x978>
 8007fa6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007faa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f2c0 8151 	blt.w	8008258 <_dtoa_r+0x718>
 8007fb6:	f1bb 0f0e 	cmp.w	fp, #14
 8007fba:	f300 814d 	bgt.w	8008258 <_dtoa_r+0x718>
 8007fbe:	4b45      	ldr	r3, [pc, #276]	; (80080d4 <_dtoa_r+0x594>)
 8007fc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fc8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007fcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f280 80da 	bge.w	8008188 <_dtoa_r+0x648>
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f300 80d6 	bgt.w	8008188 <_dtoa_r+0x648>
 8007fdc:	f040 826b 	bne.w	80084b6 <_dtoa_r+0x976>
 8007fe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4b40      	ldr	r3, [pc, #256]	; (80080e8 <_dtoa_r+0x5a8>)
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff0:	f7f8 fcf8 	bl	80009e4 <__aeabi_dcmpge>
 8007ff4:	9c08      	ldr	r4, [sp, #32]
 8007ff6:	4626      	mov	r6, r4
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f040 8241 	bne.w	8008480 <_dtoa_r+0x940>
 8007ffe:	2331      	movs	r3, #49	; 0x31
 8008000:	9f03      	ldr	r7, [sp, #12]
 8008002:	f10b 0b01 	add.w	fp, fp, #1
 8008006:	f807 3b01 	strb.w	r3, [r7], #1
 800800a:	e23d      	b.n	8008488 <_dtoa_r+0x948>
 800800c:	07e2      	lsls	r2, r4, #31
 800800e:	d505      	bpl.n	800801c <_dtoa_r+0x4dc>
 8008010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008014:	f7f8 fa60 	bl	80004d8 <__aeabi_dmul>
 8008018:	2301      	movs	r3, #1
 800801a:	3701      	adds	r7, #1
 800801c:	1064      	asrs	r4, r4, #1
 800801e:	3608      	adds	r6, #8
 8008020:	e76d      	b.n	8007efe <_dtoa_r+0x3be>
 8008022:	2702      	movs	r7, #2
 8008024:	e770      	b.n	8007f08 <_dtoa_r+0x3c8>
 8008026:	46d8      	mov	r8, fp
 8008028:	9c08      	ldr	r4, [sp, #32]
 800802a:	e78f      	b.n	8007f4c <_dtoa_r+0x40c>
 800802c:	9903      	ldr	r1, [sp, #12]
 800802e:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <_dtoa_r+0x594>)
 8008030:	4421      	add	r1, r4
 8008032:	9112      	str	r1, [sp, #72]	; 0x48
 8008034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008036:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800803a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800803e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008042:	2900      	cmp	r1, #0
 8008044:	d054      	beq.n	80080f0 <_dtoa_r+0x5b0>
 8008046:	2000      	movs	r0, #0
 8008048:	4928      	ldr	r1, [pc, #160]	; (80080ec <_dtoa_r+0x5ac>)
 800804a:	f7f8 fb6f 	bl	800072c <__aeabi_ddiv>
 800804e:	463b      	mov	r3, r7
 8008050:	4632      	mov	r2, r6
 8008052:	f7f8 f889 	bl	8000168 <__aeabi_dsub>
 8008056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800805a:	9f03      	ldr	r7, [sp, #12]
 800805c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008060:	f7f8 fcea 	bl	8000a38 <__aeabi_d2iz>
 8008064:	4604      	mov	r4, r0
 8008066:	f7f8 f9cd 	bl	8000404 <__aeabi_i2d>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008072:	f7f8 f879 	bl	8000168 <__aeabi_dsub>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	3430      	adds	r4, #48	; 0x30
 800807c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008084:	f807 4b01 	strb.w	r4, [r7], #1
 8008088:	f7f8 fc98 	bl	80009bc <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	d173      	bne.n	8008178 <_dtoa_r+0x638>
 8008090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008094:	2000      	movs	r0, #0
 8008096:	4911      	ldr	r1, [pc, #68]	; (80080dc <_dtoa_r+0x59c>)
 8008098:	f7f8 f866 	bl	8000168 <__aeabi_dsub>
 800809c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080a0:	f7f8 fc8c 	bl	80009bc <__aeabi_dcmplt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	f040 80b6 	bne.w	8008216 <_dtoa_r+0x6d6>
 80080aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ac:	429f      	cmp	r7, r3
 80080ae:	f43f af7a 	beq.w	8007fa6 <_dtoa_r+0x466>
 80080b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <_dtoa_r+0x5a0>)
 80080ba:	f7f8 fa0d 	bl	80004d8 <__aeabi_dmul>
 80080be:	2200      	movs	r2, #0
 80080c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <_dtoa_r+0x5a0>)
 80080ca:	f7f8 fa05 	bl	80004d8 <__aeabi_dmul>
 80080ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080d2:	e7c3      	b.n	800805c <_dtoa_r+0x51c>
 80080d4:	0800b470 	.word	0x0800b470
 80080d8:	0800b448 	.word	0x0800b448
 80080dc:	3ff00000 	.word	0x3ff00000
 80080e0:	40240000 	.word	0x40240000
 80080e4:	401c0000 	.word	0x401c0000
 80080e8:	40140000 	.word	0x40140000
 80080ec:	3fe00000 	.word	0x3fe00000
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080fe:	9c03      	ldr	r4, [sp, #12]
 8008100:	9314      	str	r3, [sp, #80]	; 0x50
 8008102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008106:	f7f8 fc97 	bl	8000a38 <__aeabi_d2iz>
 800810a:	9015      	str	r0, [sp, #84]	; 0x54
 800810c:	f7f8 f97a 	bl	8000404 <__aeabi_i2d>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008118:	f7f8 f826 	bl	8000168 <__aeabi_dsub>
 800811c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800811e:	4606      	mov	r6, r0
 8008120:	3330      	adds	r3, #48	; 0x30
 8008122:	f804 3b01 	strb.w	r3, [r4], #1
 8008126:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008128:	460f      	mov	r7, r1
 800812a:	429c      	cmp	r4, r3
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	d124      	bne.n	800817c <_dtoa_r+0x63c>
 8008132:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008136:	4baf      	ldr	r3, [pc, #700]	; (80083f4 <_dtoa_r+0x8b4>)
 8008138:	f7f8 f818 	bl	800016c <__adddf3>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 fc58 	bl	80009f8 <__aeabi_dcmpgt>
 8008148:	2800      	cmp	r0, #0
 800814a:	d163      	bne.n	8008214 <_dtoa_r+0x6d4>
 800814c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008150:	2000      	movs	r0, #0
 8008152:	49a8      	ldr	r1, [pc, #672]	; (80083f4 <_dtoa_r+0x8b4>)
 8008154:	f7f8 f808 	bl	8000168 <__aeabi_dsub>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f7f8 fc2c 	bl	80009bc <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	f43f af1e 	beq.w	8007fa6 <_dtoa_r+0x466>
 800816a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800816c:	1e7b      	subs	r3, r7, #1
 800816e:	9314      	str	r3, [sp, #80]	; 0x50
 8008170:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d0f8      	beq.n	800816a <_dtoa_r+0x62a>
 8008178:	46c3      	mov	fp, r8
 800817a:	e03b      	b.n	80081f4 <_dtoa_r+0x6b4>
 800817c:	4b9e      	ldr	r3, [pc, #632]	; (80083f8 <_dtoa_r+0x8b8>)
 800817e:	f7f8 f9ab 	bl	80004d8 <__aeabi_dmul>
 8008182:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008186:	e7bc      	b.n	8008102 <_dtoa_r+0x5c2>
 8008188:	9f03      	ldr	r7, [sp, #12]
 800818a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800818e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008192:	4640      	mov	r0, r8
 8008194:	4649      	mov	r1, r9
 8008196:	f7f8 fac9 	bl	800072c <__aeabi_ddiv>
 800819a:	f7f8 fc4d 	bl	8000a38 <__aeabi_d2iz>
 800819e:	4604      	mov	r4, r0
 80081a0:	f7f8 f930 	bl	8000404 <__aeabi_i2d>
 80081a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081a8:	f7f8 f996 	bl	80004d8 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f7 ffd8 	bl	8000168 <__aeabi_dsub>
 80081b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80081bc:	f807 6b01 	strb.w	r6, [r7], #1
 80081c0:	9e03      	ldr	r6, [sp, #12]
 80081c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80081c6:	1bbe      	subs	r6, r7, r6
 80081c8:	45b4      	cmp	ip, r6
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	d136      	bne.n	800823e <_dtoa_r+0x6fe>
 80081d0:	f7f7 ffcc 	bl	800016c <__adddf3>
 80081d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081d8:	4680      	mov	r8, r0
 80081da:	4689      	mov	r9, r1
 80081dc:	f7f8 fc0c 	bl	80009f8 <__aeabi_dcmpgt>
 80081e0:	bb58      	cbnz	r0, 800823a <_dtoa_r+0x6fa>
 80081e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081e6:	4640      	mov	r0, r8
 80081e8:	4649      	mov	r1, r9
 80081ea:	f7f8 fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 80081ee:	b108      	cbz	r0, 80081f4 <_dtoa_r+0x6b4>
 80081f0:	07e3      	lsls	r3, r4, #31
 80081f2:	d422      	bmi.n	800823a <_dtoa_r+0x6fa>
 80081f4:	4651      	mov	r1, sl
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 fbc2 	bl	8008980 <_Bfree>
 80081fc:	2300      	movs	r3, #0
 80081fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008200:	703b      	strb	r3, [r7, #0]
 8008202:	f10b 0301 	add.w	r3, fp, #1
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800820a:	2b00      	cmp	r3, #0
 800820c:	f43f ace6 	beq.w	8007bdc <_dtoa_r+0x9c>
 8008210:	601f      	str	r7, [r3, #0]
 8008212:	e4e3      	b.n	8007bdc <_dtoa_r+0x9c>
 8008214:	4627      	mov	r7, r4
 8008216:	463b      	mov	r3, r7
 8008218:	461f      	mov	r7, r3
 800821a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821e:	2a39      	cmp	r2, #57	; 0x39
 8008220:	d107      	bne.n	8008232 <_dtoa_r+0x6f2>
 8008222:	9a03      	ldr	r2, [sp, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d1f7      	bne.n	8008218 <_dtoa_r+0x6d8>
 8008228:	2230      	movs	r2, #48	; 0x30
 800822a:	9903      	ldr	r1, [sp, #12]
 800822c:	f108 0801 	add.w	r8, r8, #1
 8008230:	700a      	strb	r2, [r1, #0]
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	3201      	adds	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e79e      	b.n	8008178 <_dtoa_r+0x638>
 800823a:	46d8      	mov	r8, fp
 800823c:	e7eb      	b.n	8008216 <_dtoa_r+0x6d6>
 800823e:	2200      	movs	r2, #0
 8008240:	4b6d      	ldr	r3, [pc, #436]	; (80083f8 <_dtoa_r+0x8b8>)
 8008242:	f7f8 f949 	bl	80004d8 <__aeabi_dmul>
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4680      	mov	r8, r0
 800824c:	4689      	mov	r9, r1
 800824e:	f7f8 fbab 	bl	80009a8 <__aeabi_dcmpeq>
 8008252:	2800      	cmp	r0, #0
 8008254:	d09b      	beq.n	800818e <_dtoa_r+0x64e>
 8008256:	e7cd      	b.n	80081f4 <_dtoa_r+0x6b4>
 8008258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800825a:	2a00      	cmp	r2, #0
 800825c:	f000 80c4 	beq.w	80083e8 <_dtoa_r+0x8a8>
 8008260:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008262:	2a01      	cmp	r2, #1
 8008264:	f300 80a8 	bgt.w	80083b8 <_dtoa_r+0x878>
 8008268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800826a:	2a00      	cmp	r2, #0
 800826c:	f000 80a0 	beq.w	80083b0 <_dtoa_r+0x870>
 8008270:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008274:	464f      	mov	r7, r9
 8008276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800827a:	2101      	movs	r1, #1
 800827c:	441a      	add	r2, r3
 800827e:	4628      	mov	r0, r5
 8008280:	4499      	add	r9, r3
 8008282:	9209      	str	r2, [sp, #36]	; 0x24
 8008284:	f000 fc7c 	bl	8008b80 <__i2b>
 8008288:	4606      	mov	r6, r0
 800828a:	b15f      	cbz	r7, 80082a4 <_dtoa_r+0x764>
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd08      	ble.n	80082a4 <_dtoa_r+0x764>
 8008292:	42bb      	cmp	r3, r7
 8008294:	bfa8      	it	ge
 8008296:	463b      	movge	r3, r7
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	eba9 0903 	sub.w	r9, r9, r3
 800829e:	1aff      	subs	r7, r7, r3
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	9309      	str	r3, [sp, #36]	; 0x24
 80082a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a6:	b1f3      	cbz	r3, 80082e6 <_dtoa_r+0x7a6>
 80082a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80a0 	beq.w	80083f0 <_dtoa_r+0x8b0>
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	dd10      	ble.n	80082d6 <_dtoa_r+0x796>
 80082b4:	4631      	mov	r1, r6
 80082b6:	4622      	mov	r2, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fd1f 	bl	8008cfc <__pow5mult>
 80082be:	4652      	mov	r2, sl
 80082c0:	4601      	mov	r1, r0
 80082c2:	4606      	mov	r6, r0
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 fc71 	bl	8008bac <__multiply>
 80082ca:	4680      	mov	r8, r0
 80082cc:	4651      	mov	r1, sl
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 fb56 	bl	8008980 <_Bfree>
 80082d4:	46c2      	mov	sl, r8
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	1b1a      	subs	r2, r3, r4
 80082da:	d004      	beq.n	80082e6 <_dtoa_r+0x7a6>
 80082dc:	4651      	mov	r1, sl
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 fd0c 	bl	8008cfc <__pow5mult>
 80082e4:	4682      	mov	sl, r0
 80082e6:	2101      	movs	r1, #1
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 fc49 	bl	8008b80 <__i2b>
 80082ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f0:	4604      	mov	r4, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f340 8082 	ble.w	80083fc <_dtoa_r+0x8bc>
 80082f8:	461a      	mov	r2, r3
 80082fa:	4601      	mov	r1, r0
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 fcfd 	bl	8008cfc <__pow5mult>
 8008302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008304:	4604      	mov	r4, r0
 8008306:	2b01      	cmp	r3, #1
 8008308:	dd7b      	ble.n	8008402 <_dtoa_r+0x8c2>
 800830a:	f04f 0800 	mov.w	r8, #0
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008314:	6918      	ldr	r0, [r3, #16]
 8008316:	f000 fbe5 	bl	8008ae4 <__hi0bits>
 800831a:	f1c0 0020 	rsb	r0, r0, #32
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	4418      	add	r0, r3
 8008322:	f010 001f 	ands.w	r0, r0, #31
 8008326:	f000 8092 	beq.w	800844e <_dtoa_r+0x90e>
 800832a:	f1c0 0320 	rsb	r3, r0, #32
 800832e:	2b04      	cmp	r3, #4
 8008330:	f340 8085 	ble.w	800843e <_dtoa_r+0x8fe>
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	f1c0 001c 	rsb	r0, r0, #28
 800833a:	4403      	add	r3, r0
 800833c:	4481      	add	r9, r0
 800833e:	4407      	add	r7, r0
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	dd05      	ble.n	8008354 <_dtoa_r+0x814>
 8008348:	4651      	mov	r1, sl
 800834a:	464a      	mov	r2, r9
 800834c:	4628      	mov	r0, r5
 800834e:	f000 fd2f 	bl	8008db0 <__lshift>
 8008352:	4682      	mov	sl, r0
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd05      	ble.n	8008366 <_dtoa_r+0x826>
 800835a:	4621      	mov	r1, r4
 800835c:	461a      	mov	r2, r3
 800835e:	4628      	mov	r0, r5
 8008360:	f000 fd26 	bl	8008db0 <__lshift>
 8008364:	4604      	mov	r4, r0
 8008366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d072      	beq.n	8008452 <_dtoa_r+0x912>
 800836c:	4621      	mov	r1, r4
 800836e:	4650      	mov	r0, sl
 8008370:	f000 fd8a 	bl	8008e88 <__mcmp>
 8008374:	2800      	cmp	r0, #0
 8008376:	da6c      	bge.n	8008452 <_dtoa_r+0x912>
 8008378:	2300      	movs	r3, #0
 800837a:	4651      	mov	r1, sl
 800837c:	220a      	movs	r2, #10
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fb20 	bl	80089c4 <__multadd>
 8008384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008386:	4682      	mov	sl, r0
 8008388:	f10b 3bff 	add.w	fp, fp, #4294967295
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 81ac 	beq.w	80086ea <_dtoa_r+0xbaa>
 8008392:	2300      	movs	r3, #0
 8008394:	4631      	mov	r1, r6
 8008396:	220a      	movs	r2, #10
 8008398:	4628      	mov	r0, r5
 800839a:	f000 fb13 	bl	80089c4 <__multadd>
 800839e:	9b06      	ldr	r3, [sp, #24]
 80083a0:	4606      	mov	r6, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f300 8093 	bgt.w	80084ce <_dtoa_r+0x98e>
 80083a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	dc59      	bgt.n	8008462 <_dtoa_r+0x922>
 80083ae:	e08e      	b.n	80084ce <_dtoa_r+0x98e>
 80083b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083b6:	e75d      	b.n	8008274 <_dtoa_r+0x734>
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	1e5c      	subs	r4, r3, #1
 80083bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083be:	42a3      	cmp	r3, r4
 80083c0:	bfbf      	itttt	lt
 80083c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80083c6:	1ae3      	sublt	r3, r4, r3
 80083c8:	18d2      	addlt	r2, r2, r3
 80083ca:	bfa8      	it	ge
 80083cc:	1b1c      	subge	r4, r3, r4
 80083ce:	9b08      	ldr	r3, [sp, #32]
 80083d0:	bfbe      	ittt	lt
 80083d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80083d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80083d6:	2400      	movlt	r4, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfb5      	itete	lt
 80083dc:	eba9 0703 	sublt.w	r7, r9, r3
 80083e0:	464f      	movge	r7, r9
 80083e2:	2300      	movlt	r3, #0
 80083e4:	9b08      	ldrge	r3, [sp, #32]
 80083e6:	e747      	b.n	8008278 <_dtoa_r+0x738>
 80083e8:	464f      	mov	r7, r9
 80083ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80083ee:	e74c      	b.n	800828a <_dtoa_r+0x74a>
 80083f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f2:	e773      	b.n	80082dc <_dtoa_r+0x79c>
 80083f4:	3fe00000 	.word	0x3fe00000
 80083f8:	40240000 	.word	0x40240000
 80083fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083fe:	2b01      	cmp	r3, #1
 8008400:	dc18      	bgt.n	8008434 <_dtoa_r+0x8f4>
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	b9b3      	cbnz	r3, 8008434 <_dtoa_r+0x8f4>
 8008406:	9b05      	ldr	r3, [sp, #20]
 8008408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800840c:	b993      	cbnz	r3, 8008434 <_dtoa_r+0x8f4>
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008414:	0d1b      	lsrs	r3, r3, #20
 8008416:	051b      	lsls	r3, r3, #20
 8008418:	b17b      	cbz	r3, 800843a <_dtoa_r+0x8fa>
 800841a:	f04f 0801 	mov.w	r8, #1
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	f109 0901 	add.w	r9, r9, #1
 8008424:	3301      	adds	r3, #1
 8008426:	9309      	str	r3, [sp, #36]	; 0x24
 8008428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	f47f af6f 	bne.w	800830e <_dtoa_r+0x7ce>
 8008430:	2001      	movs	r0, #1
 8008432:	e774      	b.n	800831e <_dtoa_r+0x7de>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	e7f6      	b.n	8008428 <_dtoa_r+0x8e8>
 800843a:	4698      	mov	r8, r3
 800843c:	e7f4      	b.n	8008428 <_dtoa_r+0x8e8>
 800843e:	d080      	beq.n	8008342 <_dtoa_r+0x802>
 8008440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008442:	331c      	adds	r3, #28
 8008444:	441a      	add	r2, r3
 8008446:	4499      	add	r9, r3
 8008448:	441f      	add	r7, r3
 800844a:	9209      	str	r2, [sp, #36]	; 0x24
 800844c:	e779      	b.n	8008342 <_dtoa_r+0x802>
 800844e:	4603      	mov	r3, r0
 8008450:	e7f6      	b.n	8008440 <_dtoa_r+0x900>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	2b00      	cmp	r3, #0
 8008456:	dc34      	bgt.n	80084c2 <_dtoa_r+0x982>
 8008458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800845a:	2b02      	cmp	r3, #2
 800845c:	dd31      	ble.n	80084c2 <_dtoa_r+0x982>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	9306      	str	r3, [sp, #24]
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	b963      	cbnz	r3, 8008480 <_dtoa_r+0x940>
 8008466:	4621      	mov	r1, r4
 8008468:	2205      	movs	r2, #5
 800846a:	4628      	mov	r0, r5
 800846c:	f000 faaa 	bl	80089c4 <__multadd>
 8008470:	4601      	mov	r1, r0
 8008472:	4604      	mov	r4, r0
 8008474:	4650      	mov	r0, sl
 8008476:	f000 fd07 	bl	8008e88 <__mcmp>
 800847a:	2800      	cmp	r0, #0
 800847c:	f73f adbf 	bgt.w	8007ffe <_dtoa_r+0x4be>
 8008480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008482:	9f03      	ldr	r7, [sp, #12]
 8008484:	ea6f 0b03 	mvn.w	fp, r3
 8008488:	f04f 0800 	mov.w	r8, #0
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f000 fa76 	bl	8008980 <_Bfree>
 8008494:	2e00      	cmp	r6, #0
 8008496:	f43f aead 	beq.w	80081f4 <_dtoa_r+0x6b4>
 800849a:	f1b8 0f00 	cmp.w	r8, #0
 800849e:	d005      	beq.n	80084ac <_dtoa_r+0x96c>
 80084a0:	45b0      	cmp	r8, r6
 80084a2:	d003      	beq.n	80084ac <_dtoa_r+0x96c>
 80084a4:	4641      	mov	r1, r8
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 fa6a 	bl	8008980 <_Bfree>
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fa66 	bl	8008980 <_Bfree>
 80084b4:	e69e      	b.n	80081f4 <_dtoa_r+0x6b4>
 80084b6:	2400      	movs	r4, #0
 80084b8:	4626      	mov	r6, r4
 80084ba:	e7e1      	b.n	8008480 <_dtoa_r+0x940>
 80084bc:	46c3      	mov	fp, r8
 80084be:	4626      	mov	r6, r4
 80084c0:	e59d      	b.n	8007ffe <_dtoa_r+0x4be>
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80c8 	beq.w	800865a <_dtoa_r+0xb1a>
 80084ca:	9b08      	ldr	r3, [sp, #32]
 80084cc:	9306      	str	r3, [sp, #24]
 80084ce:	2f00      	cmp	r7, #0
 80084d0:	dd05      	ble.n	80084de <_dtoa_r+0x99e>
 80084d2:	4631      	mov	r1, r6
 80084d4:	463a      	mov	r2, r7
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 fc6a 	bl	8008db0 <__lshift>
 80084dc:	4606      	mov	r6, r0
 80084de:	f1b8 0f00 	cmp.w	r8, #0
 80084e2:	d05b      	beq.n	800859c <_dtoa_r+0xa5c>
 80084e4:	4628      	mov	r0, r5
 80084e6:	6871      	ldr	r1, [r6, #4]
 80084e8:	f000 fa0a 	bl	8008900 <_Balloc>
 80084ec:	4607      	mov	r7, r0
 80084ee:	b928      	cbnz	r0, 80084fc <_dtoa_r+0x9bc>
 80084f0:	4602      	mov	r2, r0
 80084f2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80084f6:	4b81      	ldr	r3, [pc, #516]	; (80086fc <_dtoa_r+0xbbc>)
 80084f8:	f7ff bb36 	b.w	8007b68 <_dtoa_r+0x28>
 80084fc:	6932      	ldr	r2, [r6, #16]
 80084fe:	f106 010c 	add.w	r1, r6, #12
 8008502:	3202      	adds	r2, #2
 8008504:	0092      	lsls	r2, r2, #2
 8008506:	300c      	adds	r0, #12
 8008508:	f7ff fa7d 	bl	8007a06 <memcpy>
 800850c:	2201      	movs	r2, #1
 800850e:	4639      	mov	r1, r7
 8008510:	4628      	mov	r0, r5
 8008512:	f000 fc4d 	bl	8008db0 <__lshift>
 8008516:	46b0      	mov	r8, r6
 8008518:	4606      	mov	r6, r0
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	9a03      	ldr	r2, [sp, #12]
 800851e:	3301      	adds	r3, #1
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	9b06      	ldr	r3, [sp, #24]
 8008524:	4413      	add	r3, r2
 8008526:	930b      	str	r3, [sp, #44]	; 0x2c
 8008528:	9b04      	ldr	r3, [sp, #16]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	4621      	mov	r1, r4
 8008534:	3b01      	subs	r3, #1
 8008536:	4650      	mov	r0, sl
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	f7ff fa77 	bl	8007a2c <quorem>
 800853e:	4641      	mov	r1, r8
 8008540:	9006      	str	r0, [sp, #24]
 8008542:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008546:	4650      	mov	r0, sl
 8008548:	f000 fc9e 	bl	8008e88 <__mcmp>
 800854c:	4632      	mov	r2, r6
 800854e:	9009      	str	r0, [sp, #36]	; 0x24
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 fcb4 	bl	8008ec0 <__mdiff>
 8008558:	68c2      	ldr	r2, [r0, #12]
 800855a:	4607      	mov	r7, r0
 800855c:	bb02      	cbnz	r2, 80085a0 <_dtoa_r+0xa60>
 800855e:	4601      	mov	r1, r0
 8008560:	4650      	mov	r0, sl
 8008562:	f000 fc91 	bl	8008e88 <__mcmp>
 8008566:	4602      	mov	r2, r0
 8008568:	4639      	mov	r1, r7
 800856a:	4628      	mov	r0, r5
 800856c:	920c      	str	r2, [sp, #48]	; 0x30
 800856e:	f000 fa07 	bl	8008980 <_Bfree>
 8008572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008576:	9f08      	ldr	r7, [sp, #32]
 8008578:	ea43 0102 	orr.w	r1, r3, r2
 800857c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857e:	4319      	orrs	r1, r3
 8008580:	d110      	bne.n	80085a4 <_dtoa_r+0xa64>
 8008582:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008586:	d029      	beq.n	80085dc <_dtoa_r+0xa9c>
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	dd02      	ble.n	8008594 <_dtoa_r+0xa54>
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	f883 9000 	strb.w	r9, [r3]
 800859a:	e777      	b.n	800848c <_dtoa_r+0x94c>
 800859c:	4630      	mov	r0, r6
 800859e:	e7ba      	b.n	8008516 <_dtoa_r+0x9d6>
 80085a0:	2201      	movs	r2, #1
 80085a2:	e7e1      	b.n	8008568 <_dtoa_r+0xa28>
 80085a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	db04      	blt.n	80085b4 <_dtoa_r+0xa74>
 80085aa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80085ac:	430b      	orrs	r3, r1
 80085ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085b0:	430b      	orrs	r3, r1
 80085b2:	d120      	bne.n	80085f6 <_dtoa_r+0xab6>
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	dded      	ble.n	8008594 <_dtoa_r+0xa54>
 80085b8:	4651      	mov	r1, sl
 80085ba:	2201      	movs	r2, #1
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 fbf7 	bl	8008db0 <__lshift>
 80085c2:	4621      	mov	r1, r4
 80085c4:	4682      	mov	sl, r0
 80085c6:	f000 fc5f 	bl	8008e88 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	dc03      	bgt.n	80085d6 <_dtoa_r+0xa96>
 80085ce:	d1e1      	bne.n	8008594 <_dtoa_r+0xa54>
 80085d0:	f019 0f01 	tst.w	r9, #1
 80085d4:	d0de      	beq.n	8008594 <_dtoa_r+0xa54>
 80085d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085da:	d1d8      	bne.n	800858e <_dtoa_r+0xa4e>
 80085dc:	2339      	movs	r3, #57	; 0x39
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	7013      	strb	r3, [r2, #0]
 80085e2:	463b      	mov	r3, r7
 80085e4:	461f      	mov	r7, r3
 80085e6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	2a39      	cmp	r2, #57	; 0x39
 80085ee:	d06b      	beq.n	80086c8 <_dtoa_r+0xb88>
 80085f0:	3201      	adds	r2, #1
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	e74a      	b.n	800848c <_dtoa_r+0x94c>
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	dd07      	ble.n	800860a <_dtoa_r+0xaca>
 80085fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085fe:	d0ed      	beq.n	80085dc <_dtoa_r+0xa9c>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	f109 0301 	add.w	r3, r9, #1
 8008606:	7013      	strb	r3, [r2, #0]
 8008608:	e740      	b.n	800848c <_dtoa_r+0x94c>
 800860a:	9b08      	ldr	r3, [sp, #32]
 800860c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800860e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008612:	4293      	cmp	r3, r2
 8008614:	d042      	beq.n	800869c <_dtoa_r+0xb5c>
 8008616:	4651      	mov	r1, sl
 8008618:	2300      	movs	r3, #0
 800861a:	220a      	movs	r2, #10
 800861c:	4628      	mov	r0, r5
 800861e:	f000 f9d1 	bl	80089c4 <__multadd>
 8008622:	45b0      	cmp	r8, r6
 8008624:	4682      	mov	sl, r0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 020a 	mov.w	r2, #10
 800862e:	4641      	mov	r1, r8
 8008630:	4628      	mov	r0, r5
 8008632:	d107      	bne.n	8008644 <_dtoa_r+0xb04>
 8008634:	f000 f9c6 	bl	80089c4 <__multadd>
 8008638:	4680      	mov	r8, r0
 800863a:	4606      	mov	r6, r0
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	3301      	adds	r3, #1
 8008640:	9308      	str	r3, [sp, #32]
 8008642:	e775      	b.n	8008530 <_dtoa_r+0x9f0>
 8008644:	f000 f9be 	bl	80089c4 <__multadd>
 8008648:	4631      	mov	r1, r6
 800864a:	4680      	mov	r8, r0
 800864c:	2300      	movs	r3, #0
 800864e:	220a      	movs	r2, #10
 8008650:	4628      	mov	r0, r5
 8008652:	f000 f9b7 	bl	80089c4 <__multadd>
 8008656:	4606      	mov	r6, r0
 8008658:	e7f0      	b.n	800863c <_dtoa_r+0xafc>
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	9306      	str	r3, [sp, #24]
 800865e:	9f03      	ldr	r7, [sp, #12]
 8008660:	4621      	mov	r1, r4
 8008662:	4650      	mov	r0, sl
 8008664:	f7ff f9e2 	bl	8007a2c <quorem>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800866e:	f807 9b01 	strb.w	r9, [r7], #1
 8008672:	1afa      	subs	r2, r7, r3
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	4293      	cmp	r3, r2
 8008678:	dd07      	ble.n	800868a <_dtoa_r+0xb4a>
 800867a:	4651      	mov	r1, sl
 800867c:	2300      	movs	r3, #0
 800867e:	220a      	movs	r2, #10
 8008680:	4628      	mov	r0, r5
 8008682:	f000 f99f 	bl	80089c4 <__multadd>
 8008686:	4682      	mov	sl, r0
 8008688:	e7ea      	b.n	8008660 <_dtoa_r+0xb20>
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	f04f 0800 	mov.w	r8, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfcc      	ite	gt
 8008694:	461f      	movgt	r7, r3
 8008696:	2701      	movle	r7, #1
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	441f      	add	r7, r3
 800869c:	4651      	mov	r1, sl
 800869e:	2201      	movs	r2, #1
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 fb85 	bl	8008db0 <__lshift>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4682      	mov	sl, r0
 80086aa:	f000 fbed 	bl	8008e88 <__mcmp>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	dc97      	bgt.n	80085e2 <_dtoa_r+0xaa2>
 80086b2:	d102      	bne.n	80086ba <_dtoa_r+0xb7a>
 80086b4:	f019 0f01 	tst.w	r9, #1
 80086b8:	d193      	bne.n	80085e2 <_dtoa_r+0xaa2>
 80086ba:	463b      	mov	r3, r7
 80086bc:	461f      	mov	r7, r3
 80086be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c2:	2a30      	cmp	r2, #48	; 0x30
 80086c4:	d0fa      	beq.n	80086bc <_dtoa_r+0xb7c>
 80086c6:	e6e1      	b.n	800848c <_dtoa_r+0x94c>
 80086c8:	9a03      	ldr	r2, [sp, #12]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d18a      	bne.n	80085e4 <_dtoa_r+0xaa4>
 80086ce:	2331      	movs	r3, #49	; 0x31
 80086d0:	f10b 0b01 	add.w	fp, fp, #1
 80086d4:	e797      	b.n	8008606 <_dtoa_r+0xac6>
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <_dtoa_r+0xbc0>)
 80086d8:	f7ff ba9f 	b.w	8007c1a <_dtoa_r+0xda>
 80086dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f47f aa77 	bne.w	8007bd2 <_dtoa_r+0x92>
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <_dtoa_r+0xbc4>)
 80086e6:	f7ff ba98 	b.w	8007c1a <_dtoa_r+0xda>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dcb6      	bgt.n	800865e <_dtoa_r+0xb1e>
 80086f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	f73f aeb5 	bgt.w	8008462 <_dtoa_r+0x922>
 80086f8:	e7b1      	b.n	800865e <_dtoa_r+0xb1e>
 80086fa:	bf00      	nop
 80086fc:	0800b3db 	.word	0x0800b3db
 8008700:	0800b336 	.word	0x0800b336
 8008704:	0800b35f 	.word	0x0800b35f

08008708 <_free_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4605      	mov	r5, r0
 800870c:	2900      	cmp	r1, #0
 800870e:	d040      	beq.n	8008792 <_free_r+0x8a>
 8008710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008714:	1f0c      	subs	r4, r1, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	bfb8      	it	lt
 800871a:	18e4      	addlt	r4, r4, r3
 800871c:	f000 f8e4 	bl	80088e8 <__malloc_lock>
 8008720:	4a1c      	ldr	r2, [pc, #112]	; (8008794 <_free_r+0x8c>)
 8008722:	6813      	ldr	r3, [r2, #0]
 8008724:	b933      	cbnz	r3, 8008734 <_free_r+0x2c>
 8008726:	6063      	str	r3, [r4, #4]
 8008728:	6014      	str	r4, [r2, #0]
 800872a:	4628      	mov	r0, r5
 800872c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008730:	f000 b8e0 	b.w	80088f4 <__malloc_unlock>
 8008734:	42a3      	cmp	r3, r4
 8008736:	d908      	bls.n	800874a <_free_r+0x42>
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	1821      	adds	r1, r4, r0
 800873c:	428b      	cmp	r3, r1
 800873e:	bf01      	itttt	eq
 8008740:	6819      	ldreq	r1, [r3, #0]
 8008742:	685b      	ldreq	r3, [r3, #4]
 8008744:	1809      	addeq	r1, r1, r0
 8008746:	6021      	streq	r1, [r4, #0]
 8008748:	e7ed      	b.n	8008726 <_free_r+0x1e>
 800874a:	461a      	mov	r2, r3
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	b10b      	cbz	r3, 8008754 <_free_r+0x4c>
 8008750:	42a3      	cmp	r3, r4
 8008752:	d9fa      	bls.n	800874a <_free_r+0x42>
 8008754:	6811      	ldr	r1, [r2, #0]
 8008756:	1850      	adds	r0, r2, r1
 8008758:	42a0      	cmp	r0, r4
 800875a:	d10b      	bne.n	8008774 <_free_r+0x6c>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	4401      	add	r1, r0
 8008760:	1850      	adds	r0, r2, r1
 8008762:	4283      	cmp	r3, r0
 8008764:	6011      	str	r1, [r2, #0]
 8008766:	d1e0      	bne.n	800872a <_free_r+0x22>
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4408      	add	r0, r1
 800876e:	6010      	str	r0, [r2, #0]
 8008770:	6053      	str	r3, [r2, #4]
 8008772:	e7da      	b.n	800872a <_free_r+0x22>
 8008774:	d902      	bls.n	800877c <_free_r+0x74>
 8008776:	230c      	movs	r3, #12
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	e7d6      	b.n	800872a <_free_r+0x22>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	1821      	adds	r1, r4, r0
 8008780:	428b      	cmp	r3, r1
 8008782:	bf01      	itttt	eq
 8008784:	6819      	ldreq	r1, [r3, #0]
 8008786:	685b      	ldreq	r3, [r3, #4]
 8008788:	1809      	addeq	r1, r1, r0
 800878a:	6021      	streq	r1, [r4, #0]
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	6054      	str	r4, [r2, #4]
 8008790:	e7cb      	b.n	800872a <_free_r+0x22>
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20000cf8 	.word	0x20000cf8

08008798 <malloc>:
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <malloc+0xc>)
 800879a:	4601      	mov	r1, r0
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f000 b823 	b.w	80087e8 <_malloc_r>
 80087a2:	bf00      	nop
 80087a4:	20000068 	.word	0x20000068

080087a8 <sbrk_aligned>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4e0e      	ldr	r6, [pc, #56]	; (80087e4 <sbrk_aligned+0x3c>)
 80087ac:	460c      	mov	r4, r1
 80087ae:	6831      	ldr	r1, [r6, #0]
 80087b0:	4605      	mov	r5, r0
 80087b2:	b911      	cbnz	r1, 80087ba <sbrk_aligned+0x12>
 80087b4:	f001 fff4 	bl	800a7a0 <_sbrk_r>
 80087b8:	6030      	str	r0, [r6, #0]
 80087ba:	4621      	mov	r1, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	f001 ffef 	bl	800a7a0 <_sbrk_r>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d00a      	beq.n	80087dc <sbrk_aligned+0x34>
 80087c6:	1cc4      	adds	r4, r0, #3
 80087c8:	f024 0403 	bic.w	r4, r4, #3
 80087cc:	42a0      	cmp	r0, r4
 80087ce:	d007      	beq.n	80087e0 <sbrk_aligned+0x38>
 80087d0:	1a21      	subs	r1, r4, r0
 80087d2:	4628      	mov	r0, r5
 80087d4:	f001 ffe4 	bl	800a7a0 <_sbrk_r>
 80087d8:	3001      	adds	r0, #1
 80087da:	d101      	bne.n	80087e0 <sbrk_aligned+0x38>
 80087dc:	f04f 34ff 	mov.w	r4, #4294967295
 80087e0:	4620      	mov	r0, r4
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	20000cfc 	.word	0x20000cfc

080087e8 <_malloc_r>:
 80087e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ec:	1ccd      	adds	r5, r1, #3
 80087ee:	f025 0503 	bic.w	r5, r5, #3
 80087f2:	3508      	adds	r5, #8
 80087f4:	2d0c      	cmp	r5, #12
 80087f6:	bf38      	it	cc
 80087f8:	250c      	movcc	r5, #12
 80087fa:	2d00      	cmp	r5, #0
 80087fc:	4607      	mov	r7, r0
 80087fe:	db01      	blt.n	8008804 <_malloc_r+0x1c>
 8008800:	42a9      	cmp	r1, r5
 8008802:	d905      	bls.n	8008810 <_malloc_r+0x28>
 8008804:	230c      	movs	r3, #12
 8008806:	2600      	movs	r6, #0
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	4630      	mov	r0, r6
 800880c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008810:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088e4 <_malloc_r+0xfc>
 8008814:	f000 f868 	bl	80088e8 <__malloc_lock>
 8008818:	f8d8 3000 	ldr.w	r3, [r8]
 800881c:	461c      	mov	r4, r3
 800881e:	bb5c      	cbnz	r4, 8008878 <_malloc_r+0x90>
 8008820:	4629      	mov	r1, r5
 8008822:	4638      	mov	r0, r7
 8008824:	f7ff ffc0 	bl	80087a8 <sbrk_aligned>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	4604      	mov	r4, r0
 800882c:	d155      	bne.n	80088da <_malloc_r+0xf2>
 800882e:	f8d8 4000 	ldr.w	r4, [r8]
 8008832:	4626      	mov	r6, r4
 8008834:	2e00      	cmp	r6, #0
 8008836:	d145      	bne.n	80088c4 <_malloc_r+0xdc>
 8008838:	2c00      	cmp	r4, #0
 800883a:	d048      	beq.n	80088ce <_malloc_r+0xe6>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	4631      	mov	r1, r6
 8008840:	4638      	mov	r0, r7
 8008842:	eb04 0903 	add.w	r9, r4, r3
 8008846:	f001 ffab 	bl	800a7a0 <_sbrk_r>
 800884a:	4581      	cmp	r9, r0
 800884c:	d13f      	bne.n	80088ce <_malloc_r+0xe6>
 800884e:	6821      	ldr	r1, [r4, #0]
 8008850:	4638      	mov	r0, r7
 8008852:	1a6d      	subs	r5, r5, r1
 8008854:	4629      	mov	r1, r5
 8008856:	f7ff ffa7 	bl	80087a8 <sbrk_aligned>
 800885a:	3001      	adds	r0, #1
 800885c:	d037      	beq.n	80088ce <_malloc_r+0xe6>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	442b      	add	r3, r5
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	f8d8 3000 	ldr.w	r3, [r8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d038      	beq.n	80088de <_malloc_r+0xf6>
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	42a2      	cmp	r2, r4
 8008870:	d12b      	bne.n	80088ca <_malloc_r+0xe2>
 8008872:	2200      	movs	r2, #0
 8008874:	605a      	str	r2, [r3, #4]
 8008876:	e00f      	b.n	8008898 <_malloc_r+0xb0>
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	1b52      	subs	r2, r2, r5
 800887c:	d41f      	bmi.n	80088be <_malloc_r+0xd6>
 800887e:	2a0b      	cmp	r2, #11
 8008880:	d917      	bls.n	80088b2 <_malloc_r+0xca>
 8008882:	1961      	adds	r1, r4, r5
 8008884:	42a3      	cmp	r3, r4
 8008886:	6025      	str	r5, [r4, #0]
 8008888:	bf18      	it	ne
 800888a:	6059      	strne	r1, [r3, #4]
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	bf08      	it	eq
 8008890:	f8c8 1000 	streq.w	r1, [r8]
 8008894:	5162      	str	r2, [r4, r5]
 8008896:	604b      	str	r3, [r1, #4]
 8008898:	4638      	mov	r0, r7
 800889a:	f104 060b 	add.w	r6, r4, #11
 800889e:	f000 f829 	bl	80088f4 <__malloc_unlock>
 80088a2:	f026 0607 	bic.w	r6, r6, #7
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	1af2      	subs	r2, r6, r3
 80088aa:	d0ae      	beq.n	800880a <_malloc_r+0x22>
 80088ac:	1b9b      	subs	r3, r3, r6
 80088ae:	50a3      	str	r3, [r4, r2]
 80088b0:	e7ab      	b.n	800880a <_malloc_r+0x22>
 80088b2:	42a3      	cmp	r3, r4
 80088b4:	6862      	ldr	r2, [r4, #4]
 80088b6:	d1dd      	bne.n	8008874 <_malloc_r+0x8c>
 80088b8:	f8c8 2000 	str.w	r2, [r8]
 80088bc:	e7ec      	b.n	8008898 <_malloc_r+0xb0>
 80088be:	4623      	mov	r3, r4
 80088c0:	6864      	ldr	r4, [r4, #4]
 80088c2:	e7ac      	b.n	800881e <_malloc_r+0x36>
 80088c4:	4634      	mov	r4, r6
 80088c6:	6876      	ldr	r6, [r6, #4]
 80088c8:	e7b4      	b.n	8008834 <_malloc_r+0x4c>
 80088ca:	4613      	mov	r3, r2
 80088cc:	e7cc      	b.n	8008868 <_malloc_r+0x80>
 80088ce:	230c      	movs	r3, #12
 80088d0:	4638      	mov	r0, r7
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	f000 f80e 	bl	80088f4 <__malloc_unlock>
 80088d8:	e797      	b.n	800880a <_malloc_r+0x22>
 80088da:	6025      	str	r5, [r4, #0]
 80088dc:	e7dc      	b.n	8008898 <_malloc_r+0xb0>
 80088de:	605b      	str	r3, [r3, #4]
 80088e0:	deff      	udf	#255	; 0xff
 80088e2:	bf00      	nop
 80088e4:	20000cf8 	.word	0x20000cf8

080088e8 <__malloc_lock>:
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <__malloc_lock+0x8>)
 80088ea:	f7ff b87c 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 80088ee:	bf00      	nop
 80088f0:	20000cf4 	.word	0x20000cf4

080088f4 <__malloc_unlock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_unlock+0x8>)
 80088f6:	f7ff b877 	b.w	80079e8 <__retarget_lock_release_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000cf4 	.word	0x20000cf4

08008900 <_Balloc>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	69c6      	ldr	r6, [r0, #28]
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	b976      	cbnz	r6, 8008928 <_Balloc+0x28>
 800890a:	2010      	movs	r0, #16
 800890c:	f7ff ff44 	bl	8008798 <malloc>
 8008910:	4602      	mov	r2, r0
 8008912:	61e0      	str	r0, [r4, #28]
 8008914:	b920      	cbnz	r0, 8008920 <_Balloc+0x20>
 8008916:	216b      	movs	r1, #107	; 0x6b
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <_Balloc+0x78>)
 800891a:	4818      	ldr	r0, [pc, #96]	; (800897c <_Balloc+0x7c>)
 800891c:	f001 ff56 	bl	800a7cc <__assert_func>
 8008920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008924:	6006      	str	r6, [r0, #0]
 8008926:	60c6      	str	r6, [r0, #12]
 8008928:	69e6      	ldr	r6, [r4, #28]
 800892a:	68f3      	ldr	r3, [r6, #12]
 800892c:	b183      	cbz	r3, 8008950 <_Balloc+0x50>
 800892e:	69e3      	ldr	r3, [r4, #28]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008936:	b9b8      	cbnz	r0, 8008968 <_Balloc+0x68>
 8008938:	2101      	movs	r1, #1
 800893a:	fa01 f605 	lsl.w	r6, r1, r5
 800893e:	1d72      	adds	r2, r6, #5
 8008940:	4620      	mov	r0, r4
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	f001 ff60 	bl	800a808 <_calloc_r>
 8008948:	b160      	cbz	r0, 8008964 <_Balloc+0x64>
 800894a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800894e:	e00e      	b.n	800896e <_Balloc+0x6e>
 8008950:	2221      	movs	r2, #33	; 0x21
 8008952:	2104      	movs	r1, #4
 8008954:	4620      	mov	r0, r4
 8008956:	f001 ff57 	bl	800a808 <_calloc_r>
 800895a:	69e3      	ldr	r3, [r4, #28]
 800895c:	60f0      	str	r0, [r6, #12]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e4      	bne.n	800892e <_Balloc+0x2e>
 8008964:	2000      	movs	r0, #0
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	6802      	ldr	r2, [r0, #0]
 800896a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800896e:	2300      	movs	r3, #0
 8008970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008974:	e7f7      	b.n	8008966 <_Balloc+0x66>
 8008976:	bf00      	nop
 8008978:	0800b36c 	.word	0x0800b36c
 800897c:	0800b3ec 	.word	0x0800b3ec

08008980 <_Bfree>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	69c6      	ldr	r6, [r0, #28]
 8008984:	4605      	mov	r5, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b976      	cbnz	r6, 80089a8 <_Bfree+0x28>
 800898a:	2010      	movs	r0, #16
 800898c:	f7ff ff04 	bl	8008798 <malloc>
 8008990:	4602      	mov	r2, r0
 8008992:	61e8      	str	r0, [r5, #28]
 8008994:	b920      	cbnz	r0, 80089a0 <_Bfree+0x20>
 8008996:	218f      	movs	r1, #143	; 0x8f
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <_Bfree+0x3c>)
 800899a:	4809      	ldr	r0, [pc, #36]	; (80089c0 <_Bfree+0x40>)
 800899c:	f001 ff16 	bl	800a7cc <__assert_func>
 80089a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089a4:	6006      	str	r6, [r0, #0]
 80089a6:	60c6      	str	r6, [r0, #12]
 80089a8:	b13c      	cbz	r4, 80089ba <_Bfree+0x3a>
 80089aa:	69eb      	ldr	r3, [r5, #28]
 80089ac:	6862      	ldr	r2, [r4, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089b4:	6021      	str	r1, [r4, #0]
 80089b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	0800b36c 	.word	0x0800b36c
 80089c0:	0800b3ec 	.word	0x0800b3ec

080089c4 <__multadd>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	4607      	mov	r7, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	461e      	mov	r6, r3
 80089ce:	2000      	movs	r0, #0
 80089d0:	690d      	ldr	r5, [r1, #16]
 80089d2:	f101 0c14 	add.w	ip, r1, #20
 80089d6:	f8dc 3000 	ldr.w	r3, [ip]
 80089da:	3001      	adds	r0, #1
 80089dc:	b299      	uxth	r1, r3
 80089de:	fb02 6101 	mla	r1, r2, r1, r6
 80089e2:	0c1e      	lsrs	r6, r3, #16
 80089e4:	0c0b      	lsrs	r3, r1, #16
 80089e6:	fb02 3306 	mla	r3, r2, r6, r3
 80089ea:	b289      	uxth	r1, r1
 80089ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089f0:	4285      	cmp	r5, r0
 80089f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089f6:	f84c 1b04 	str.w	r1, [ip], #4
 80089fa:	dcec      	bgt.n	80089d6 <__multadd+0x12>
 80089fc:	b30e      	cbz	r6, 8008a42 <__multadd+0x7e>
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dc19      	bgt.n	8008a38 <__multadd+0x74>
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	4638      	mov	r0, r7
 8008a08:	3101      	adds	r1, #1
 8008a0a:	f7ff ff79 	bl	8008900 <_Balloc>
 8008a0e:	4680      	mov	r8, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <__multadd+0x5a>
 8008a12:	4602      	mov	r2, r0
 8008a14:	21ba      	movs	r1, #186	; 0xba
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <__multadd+0x84>)
 8008a18:	480c      	ldr	r0, [pc, #48]	; (8008a4c <__multadd+0x88>)
 8008a1a:	f001 fed7 	bl	800a7cc <__assert_func>
 8008a1e:	6922      	ldr	r2, [r4, #16]
 8008a20:	f104 010c 	add.w	r1, r4, #12
 8008a24:	3202      	adds	r2, #2
 8008a26:	0092      	lsls	r2, r2, #2
 8008a28:	300c      	adds	r0, #12
 8008a2a:	f7fe ffec 	bl	8007a06 <memcpy>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ffa5 	bl	8008980 <_Bfree>
 8008a36:	4644      	mov	r4, r8
 8008a38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	615e      	str	r6, [r3, #20]
 8008a40:	6125      	str	r5, [r4, #16]
 8008a42:	4620      	mov	r0, r4
 8008a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a48:	0800b3db 	.word	0x0800b3db
 8008a4c:	0800b3ec 	.word	0x0800b3ec

08008a50 <__s2b>:
 8008a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	4615      	mov	r5, r2
 8008a56:	2209      	movs	r2, #9
 8008a58:	461f      	mov	r7, r3
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a62:	4606      	mov	r6, r0
 8008a64:	2201      	movs	r2, #1
 8008a66:	2100      	movs	r1, #0
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	db09      	blt.n	8008a80 <__s2b+0x30>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff ff47 	bl	8008900 <_Balloc>
 8008a72:	b940      	cbnz	r0, 8008a86 <__s2b+0x36>
 8008a74:	4602      	mov	r2, r0
 8008a76:	21d3      	movs	r1, #211	; 0xd3
 8008a78:	4b18      	ldr	r3, [pc, #96]	; (8008adc <__s2b+0x8c>)
 8008a7a:	4819      	ldr	r0, [pc, #100]	; (8008ae0 <__s2b+0x90>)
 8008a7c:	f001 fea6 	bl	800a7cc <__assert_func>
 8008a80:	0052      	lsls	r2, r2, #1
 8008a82:	3101      	adds	r1, #1
 8008a84:	e7f0      	b.n	8008a68 <__s2b+0x18>
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	2d09      	cmp	r5, #9
 8008a8a:	6143      	str	r3, [r0, #20]
 8008a8c:	f04f 0301 	mov.w	r3, #1
 8008a90:	6103      	str	r3, [r0, #16]
 8008a92:	dd16      	ble.n	8008ac2 <__s2b+0x72>
 8008a94:	f104 0909 	add.w	r9, r4, #9
 8008a98:	46c8      	mov	r8, r9
 8008a9a:	442c      	add	r4, r5
 8008a9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	3b30      	subs	r3, #48	; 0x30
 8008aa8:	f7ff ff8c 	bl	80089c4 <__multadd>
 8008aac:	45a0      	cmp	r8, r4
 8008aae:	d1f5      	bne.n	8008a9c <__s2b+0x4c>
 8008ab0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ab4:	444c      	add	r4, r9
 8008ab6:	1b2d      	subs	r5, r5, r4
 8008ab8:	1963      	adds	r3, r4, r5
 8008aba:	42bb      	cmp	r3, r7
 8008abc:	db04      	blt.n	8008ac8 <__s2b+0x78>
 8008abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac2:	2509      	movs	r5, #9
 8008ac4:	340a      	adds	r4, #10
 8008ac6:	e7f6      	b.n	8008ab6 <__s2b+0x66>
 8008ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008acc:	4601      	mov	r1, r0
 8008ace:	220a      	movs	r2, #10
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	3b30      	subs	r3, #48	; 0x30
 8008ad4:	f7ff ff76 	bl	80089c4 <__multadd>
 8008ad8:	e7ee      	b.n	8008ab8 <__s2b+0x68>
 8008ada:	bf00      	nop
 8008adc:	0800b3db 	.word	0x0800b3db
 8008ae0:	0800b3ec 	.word	0x0800b3ec

08008ae4 <__hi0bits>:
 8008ae4:	0c02      	lsrs	r2, r0, #16
 8008ae6:	0412      	lsls	r2, r2, #16
 8008ae8:	4603      	mov	r3, r0
 8008aea:	b9ca      	cbnz	r2, 8008b20 <__hi0bits+0x3c>
 8008aec:	0403      	lsls	r3, r0, #16
 8008aee:	2010      	movs	r0, #16
 8008af0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008af4:	bf04      	itt	eq
 8008af6:	021b      	lsleq	r3, r3, #8
 8008af8:	3008      	addeq	r0, #8
 8008afa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008afe:	bf04      	itt	eq
 8008b00:	011b      	lsleq	r3, r3, #4
 8008b02:	3004      	addeq	r0, #4
 8008b04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b08:	bf04      	itt	eq
 8008b0a:	009b      	lsleq	r3, r3, #2
 8008b0c:	3002      	addeq	r0, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	db05      	blt.n	8008b1e <__hi0bits+0x3a>
 8008b12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	bf08      	it	eq
 8008b1c:	2020      	moveq	r0, #32
 8008b1e:	4770      	bx	lr
 8008b20:	2000      	movs	r0, #0
 8008b22:	e7e5      	b.n	8008af0 <__hi0bits+0xc>

08008b24 <__lo0bits>:
 8008b24:	6803      	ldr	r3, [r0, #0]
 8008b26:	4602      	mov	r2, r0
 8008b28:	f013 0007 	ands.w	r0, r3, #7
 8008b2c:	d00b      	beq.n	8008b46 <__lo0bits+0x22>
 8008b2e:	07d9      	lsls	r1, r3, #31
 8008b30:	d421      	bmi.n	8008b76 <__lo0bits+0x52>
 8008b32:	0798      	lsls	r0, r3, #30
 8008b34:	bf49      	itett	mi
 8008b36:	085b      	lsrmi	r3, r3, #1
 8008b38:	089b      	lsrpl	r3, r3, #2
 8008b3a:	2001      	movmi	r0, #1
 8008b3c:	6013      	strmi	r3, [r2, #0]
 8008b3e:	bf5c      	itt	pl
 8008b40:	2002      	movpl	r0, #2
 8008b42:	6013      	strpl	r3, [r2, #0]
 8008b44:	4770      	bx	lr
 8008b46:	b299      	uxth	r1, r3
 8008b48:	b909      	cbnz	r1, 8008b4e <__lo0bits+0x2a>
 8008b4a:	2010      	movs	r0, #16
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	b2d9      	uxtb	r1, r3
 8008b50:	b909      	cbnz	r1, 8008b56 <__lo0bits+0x32>
 8008b52:	3008      	adds	r0, #8
 8008b54:	0a1b      	lsrs	r3, r3, #8
 8008b56:	0719      	lsls	r1, r3, #28
 8008b58:	bf04      	itt	eq
 8008b5a:	091b      	lsreq	r3, r3, #4
 8008b5c:	3004      	addeq	r0, #4
 8008b5e:	0799      	lsls	r1, r3, #30
 8008b60:	bf04      	itt	eq
 8008b62:	089b      	lsreq	r3, r3, #2
 8008b64:	3002      	addeq	r0, #2
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d403      	bmi.n	8008b72 <__lo0bits+0x4e>
 8008b6a:	085b      	lsrs	r3, r3, #1
 8008b6c:	f100 0001 	add.w	r0, r0, #1
 8008b70:	d003      	beq.n	8008b7a <__lo0bits+0x56>
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	4770      	bx	lr
 8008b76:	2000      	movs	r0, #0
 8008b78:	4770      	bx	lr
 8008b7a:	2020      	movs	r0, #32
 8008b7c:	4770      	bx	lr
	...

08008b80 <__i2b>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	2101      	movs	r1, #1
 8008b86:	f7ff febb 	bl	8008900 <_Balloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <__i2b+0x1a>
 8008b8e:	f240 1145 	movw	r1, #325	; 0x145
 8008b92:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <__i2b+0x24>)
 8008b94:	4804      	ldr	r0, [pc, #16]	; (8008ba8 <__i2b+0x28>)
 8008b96:	f001 fe19 	bl	800a7cc <__assert_func>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	6144      	str	r4, [r0, #20]
 8008b9e:	6103      	str	r3, [r0, #16]
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop
 8008ba4:	0800b3db 	.word	0x0800b3db
 8008ba8:	0800b3ec 	.word	0x0800b3ec

08008bac <__multiply>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4691      	mov	r9, r2
 8008bb2:	690a      	ldr	r2, [r1, #16]
 8008bb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bb8:	460c      	mov	r4, r1
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	bfbe      	ittt	lt
 8008bbe:	460b      	movlt	r3, r1
 8008bc0:	464c      	movlt	r4, r9
 8008bc2:	4699      	movlt	r9, r3
 8008bc4:	6927      	ldr	r7, [r4, #16]
 8008bc6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	eb07 060a 	add.w	r6, r7, sl
 8008bd2:	42b3      	cmp	r3, r6
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	bfb8      	it	lt
 8008bd8:	3101      	addlt	r1, #1
 8008bda:	f7ff fe91 	bl	8008900 <_Balloc>
 8008bde:	b930      	cbnz	r0, 8008bee <__multiply+0x42>
 8008be0:	4602      	mov	r2, r0
 8008be2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008be6:	4b43      	ldr	r3, [pc, #268]	; (8008cf4 <__multiply+0x148>)
 8008be8:	4843      	ldr	r0, [pc, #268]	; (8008cf8 <__multiply+0x14c>)
 8008bea:	f001 fdef 	bl	800a7cc <__assert_func>
 8008bee:	f100 0514 	add.w	r5, r0, #20
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bfa:	4543      	cmp	r3, r8
 8008bfc:	d321      	bcc.n	8008c42 <__multiply+0x96>
 8008bfe:	f104 0314 	add.w	r3, r4, #20
 8008c02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c06:	f109 0314 	add.w	r3, r9, #20
 8008c0a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c0e:	9202      	str	r2, [sp, #8]
 8008c10:	1b3a      	subs	r2, r7, r4
 8008c12:	3a15      	subs	r2, #21
 8008c14:	f022 0203 	bic.w	r2, r2, #3
 8008c18:	3204      	adds	r2, #4
 8008c1a:	f104 0115 	add.w	r1, r4, #21
 8008c1e:	428f      	cmp	r7, r1
 8008c20:	bf38      	it	cc
 8008c22:	2204      	movcc	r2, #4
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	9a02      	ldr	r2, [sp, #8]
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d80c      	bhi.n	8008c48 <__multiply+0x9c>
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	dd03      	ble.n	8008c3a <__multiply+0x8e>
 8008c32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d05a      	beq.n	8008cf0 <__multiply+0x144>
 8008c3a:	6106      	str	r6, [r0, #16]
 8008c3c:	b005      	add	sp, #20
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	f843 2b04 	str.w	r2, [r3], #4
 8008c46:	e7d8      	b.n	8008bfa <__multiply+0x4e>
 8008c48:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c4c:	f1ba 0f00 	cmp.w	sl, #0
 8008c50:	d023      	beq.n	8008c9a <__multiply+0xee>
 8008c52:	46a9      	mov	r9, r5
 8008c54:	f04f 0c00 	mov.w	ip, #0
 8008c58:	f104 0e14 	add.w	lr, r4, #20
 8008c5c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c60:	f8d9 1000 	ldr.w	r1, [r9]
 8008c64:	fa1f fb82 	uxth.w	fp, r2
 8008c68:	b289      	uxth	r1, r1
 8008c6a:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c6e:	4461      	add	r1, ip
 8008c70:	f8d9 c000 	ldr.w	ip, [r9]
 8008c74:	0c12      	lsrs	r2, r2, #16
 8008c76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c7a:	fb0a c202 	mla	r2, sl, r2, ip
 8008c7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c82:	b289      	uxth	r1, r1
 8008c84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c88:	4577      	cmp	r7, lr
 8008c8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c8e:	f849 1b04 	str.w	r1, [r9], #4
 8008c92:	d8e3      	bhi.n	8008c5c <__multiply+0xb0>
 8008c94:	9a01      	ldr	r2, [sp, #4]
 8008c96:	f845 c002 	str.w	ip, [r5, r2]
 8008c9a:	9a03      	ldr	r2, [sp, #12]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ca2:	f1b9 0f00 	cmp.w	r9, #0
 8008ca6:	d021      	beq.n	8008cec <__multiply+0x140>
 8008ca8:	46ae      	mov	lr, r5
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	6829      	ldr	r1, [r5, #0]
 8008cb0:	f104 0c14 	add.w	ip, r4, #20
 8008cb4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cbc:	b289      	uxth	r1, r1
 8008cbe:	fb09 220b 	mla	r2, r9, fp, r2
 8008cc2:	4452      	add	r2, sl
 8008cc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cc8:	f84e 1b04 	str.w	r1, [lr], #4
 8008ccc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cd4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cd8:	4567      	cmp	r7, ip
 8008cda:	fb09 110a 	mla	r1, r9, sl, r1
 8008cde:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ce2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ce6:	d8e5      	bhi.n	8008cb4 <__multiply+0x108>
 8008ce8:	9a01      	ldr	r2, [sp, #4]
 8008cea:	50a9      	str	r1, [r5, r2]
 8008cec:	3504      	adds	r5, #4
 8008cee:	e79a      	b.n	8008c26 <__multiply+0x7a>
 8008cf0:	3e01      	subs	r6, #1
 8008cf2:	e79c      	b.n	8008c2e <__multiply+0x82>
 8008cf4:	0800b3db 	.word	0x0800b3db
 8008cf8:	0800b3ec 	.word	0x0800b3ec

08008cfc <__pow5mult>:
 8008cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	4615      	mov	r5, r2
 8008d02:	f012 0203 	ands.w	r2, r2, #3
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	d007      	beq.n	8008d1c <__pow5mult+0x20>
 8008d0c:	4c25      	ldr	r4, [pc, #148]	; (8008da4 <__pow5mult+0xa8>)
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	2300      	movs	r3, #0
 8008d12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d16:	f7ff fe55 	bl	80089c4 <__multadd>
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	10ad      	asrs	r5, r5, #2
 8008d1e:	d03d      	beq.n	8008d9c <__pow5mult+0xa0>
 8008d20:	69f4      	ldr	r4, [r6, #28]
 8008d22:	b97c      	cbnz	r4, 8008d44 <__pow5mult+0x48>
 8008d24:	2010      	movs	r0, #16
 8008d26:	f7ff fd37 	bl	8008798 <malloc>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	61f0      	str	r0, [r6, #28]
 8008d2e:	b928      	cbnz	r0, 8008d3c <__pow5mult+0x40>
 8008d30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <__pow5mult+0xac>)
 8008d36:	481d      	ldr	r0, [pc, #116]	; (8008dac <__pow5mult+0xb0>)
 8008d38:	f001 fd48 	bl	800a7cc <__assert_func>
 8008d3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d40:	6004      	str	r4, [r0, #0]
 8008d42:	60c4      	str	r4, [r0, #12]
 8008d44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d4c:	b94c      	cbnz	r4, 8008d62 <__pow5mult+0x66>
 8008d4e:	f240 2171 	movw	r1, #625	; 0x271
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ff14 	bl	8008b80 <__i2b>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d60:	6003      	str	r3, [r0, #0]
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	07eb      	lsls	r3, r5, #31
 8008d68:	d50a      	bpl.n	8008d80 <__pow5mult+0x84>
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ff1c 	bl	8008bac <__multiply>
 8008d74:	4680      	mov	r8, r0
 8008d76:	4639      	mov	r1, r7
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7ff fe01 	bl	8008980 <_Bfree>
 8008d7e:	4647      	mov	r7, r8
 8008d80:	106d      	asrs	r5, r5, #1
 8008d82:	d00b      	beq.n	8008d9c <__pow5mult+0xa0>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	b938      	cbnz	r0, 8008d98 <__pow5mult+0x9c>
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ff0d 	bl	8008bac <__multiply>
 8008d92:	6020      	str	r0, [r4, #0]
 8008d94:	f8c0 9000 	str.w	r9, [r0]
 8008d98:	4604      	mov	r4, r0
 8008d9a:	e7e4      	b.n	8008d66 <__pow5mult+0x6a>
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da2:	bf00      	nop
 8008da4:	0800b538 	.word	0x0800b538
 8008da8:	0800b36c 	.word	0x0800b36c
 8008dac:	0800b3ec 	.word	0x0800b3ec

08008db0 <__lshift>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	460c      	mov	r4, r1
 8008db6:	4607      	mov	r7, r0
 8008db8:	4691      	mov	r9, r2
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	6849      	ldr	r1, [r1, #4]
 8008dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dc2:	68a3      	ldr	r3, [r4, #8]
 8008dc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dc8:	f108 0601 	add.w	r6, r8, #1
 8008dcc:	42b3      	cmp	r3, r6
 8008dce:	db0b      	blt.n	8008de8 <__lshift+0x38>
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff fd95 	bl	8008900 <_Balloc>
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	b948      	cbnz	r0, 8008dee <__lshift+0x3e>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008de0:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <__lshift+0xd0>)
 8008de2:	4828      	ldr	r0, [pc, #160]	; (8008e84 <__lshift+0xd4>)
 8008de4:	f001 fcf2 	bl	800a7cc <__assert_func>
 8008de8:	3101      	adds	r1, #1
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	e7ee      	b.n	8008dcc <__lshift+0x1c>
 8008dee:	2300      	movs	r3, #0
 8008df0:	f100 0114 	add.w	r1, r0, #20
 8008df4:	f100 0210 	add.w	r2, r0, #16
 8008df8:	4618      	mov	r0, r3
 8008dfa:	4553      	cmp	r3, sl
 8008dfc:	db33      	blt.n	8008e66 <__lshift+0xb6>
 8008dfe:	6920      	ldr	r0, [r4, #16]
 8008e00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e04:	f104 0314 	add.w	r3, r4, #20
 8008e08:	f019 091f 	ands.w	r9, r9, #31
 8008e0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e14:	d02b      	beq.n	8008e6e <__lshift+0xbe>
 8008e16:	468a      	mov	sl, r1
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	fa00 f009 	lsl.w	r0, r0, r9
 8008e24:	4310      	orrs	r0, r2
 8008e26:	f84a 0b04 	str.w	r0, [sl], #4
 8008e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2e:	459c      	cmp	ip, r3
 8008e30:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e34:	d8f3      	bhi.n	8008e1e <__lshift+0x6e>
 8008e36:	ebac 0304 	sub.w	r3, ip, r4
 8008e3a:	3b15      	subs	r3, #21
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3304      	adds	r3, #4
 8008e42:	f104 0015 	add.w	r0, r4, #21
 8008e46:	4584      	cmp	ip, r0
 8008e48:	bf38      	it	cc
 8008e4a:	2304      	movcc	r3, #4
 8008e4c:	50ca      	str	r2, [r1, r3]
 8008e4e:	b10a      	cbz	r2, 8008e54 <__lshift+0xa4>
 8008e50:	f108 0602 	add.w	r6, r8, #2
 8008e54:	3e01      	subs	r6, #1
 8008e56:	4638      	mov	r0, r7
 8008e58:	4621      	mov	r1, r4
 8008e5a:	612e      	str	r6, [r5, #16]
 8008e5c:	f7ff fd90 	bl	8008980 <_Bfree>
 8008e60:	4628      	mov	r0, r5
 8008e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	e7c5      	b.n	8008dfa <__lshift+0x4a>
 8008e6e:	3904      	subs	r1, #4
 8008e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e74:	459c      	cmp	ip, r3
 8008e76:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e7a:	d8f9      	bhi.n	8008e70 <__lshift+0xc0>
 8008e7c:	e7ea      	b.n	8008e54 <__lshift+0xa4>
 8008e7e:	bf00      	nop
 8008e80:	0800b3db 	.word	0x0800b3db
 8008e84:	0800b3ec 	.word	0x0800b3ec

08008e88 <__mcmp>:
 8008e88:	4603      	mov	r3, r0
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	6900      	ldr	r0, [r0, #16]
 8008e8e:	b530      	push	{r4, r5, lr}
 8008e90:	1a80      	subs	r0, r0, r2
 8008e92:	d10d      	bne.n	8008eb0 <__mcmp+0x28>
 8008e94:	3314      	adds	r3, #20
 8008e96:	3114      	adds	r1, #20
 8008e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ea8:	4295      	cmp	r5, r2
 8008eaa:	d002      	beq.n	8008eb2 <__mcmp+0x2a>
 8008eac:	d304      	bcc.n	8008eb8 <__mcmp+0x30>
 8008eae:	2001      	movs	r0, #1
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	d3f4      	bcc.n	8008ea0 <__mcmp+0x18>
 8008eb6:	e7fb      	b.n	8008eb0 <__mcmp+0x28>
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	e7f8      	b.n	8008eb0 <__mcmp+0x28>
	...

08008ec0 <__mdiff>:
 8008ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4614      	mov	r4, r2
 8008ece:	f7ff ffdb 	bl	8008e88 <__mcmp>
 8008ed2:	1e06      	subs	r6, r0, #0
 8008ed4:	d111      	bne.n	8008efa <__mdiff+0x3a>
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff fd11 	bl	8008900 <_Balloc>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	b928      	cbnz	r0, 8008eee <__mdiff+0x2e>
 8008ee2:	f240 2137 	movw	r1, #567	; 0x237
 8008ee6:	4b3a      	ldr	r3, [pc, #232]	; (8008fd0 <__mdiff+0x110>)
 8008ee8:	483a      	ldr	r0, [pc, #232]	; (8008fd4 <__mdiff+0x114>)
 8008eea:	f001 fc6f 	bl	800a7cc <__assert_func>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	bfa4      	itt	ge
 8008efc:	4623      	movge	r3, r4
 8008efe:	462c      	movge	r4, r5
 8008f00:	4638      	mov	r0, r7
 8008f02:	6861      	ldr	r1, [r4, #4]
 8008f04:	bfa6      	itte	ge
 8008f06:	461d      	movge	r5, r3
 8008f08:	2600      	movge	r6, #0
 8008f0a:	2601      	movlt	r6, #1
 8008f0c:	f7ff fcf8 	bl	8008900 <_Balloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	b918      	cbnz	r0, 8008f1c <__mdiff+0x5c>
 8008f14:	f240 2145 	movw	r1, #581	; 0x245
 8008f18:	4b2d      	ldr	r3, [pc, #180]	; (8008fd0 <__mdiff+0x110>)
 8008f1a:	e7e5      	b.n	8008ee8 <__mdiff+0x28>
 8008f1c:	f102 0814 	add.w	r8, r2, #20
 8008f20:	46c2      	mov	sl, r8
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	6927      	ldr	r7, [r4, #16]
 8008f28:	60c6      	str	r6, [r0, #12]
 8008f2a:	692e      	ldr	r6, [r5, #16]
 8008f2c:	f104 0014 	add.w	r0, r4, #20
 8008f30:	f105 0914 	add.w	r9, r5, #20
 8008f34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008f38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f3c:	3410      	adds	r4, #16
 8008f3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008f42:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f46:	fa1f f18b 	uxth.w	r1, fp
 8008f4a:	4461      	add	r1, ip
 8008f4c:	fa1f fc83 	uxth.w	ip, r3
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	eba1 010c 	sub.w	r1, r1, ip
 8008f56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f5e:	b289      	uxth	r1, r1
 8008f60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f64:	454e      	cmp	r6, r9
 8008f66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008f6a:	f84a 1b04 	str.w	r1, [sl], #4
 8008f6e:	d8e6      	bhi.n	8008f3e <__mdiff+0x7e>
 8008f70:	1b73      	subs	r3, r6, r5
 8008f72:	3b15      	subs	r3, #21
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	3515      	adds	r5, #21
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	42ae      	cmp	r6, r5
 8008f7e:	bf38      	it	cc
 8008f80:	2304      	movcc	r3, #4
 8008f82:	4418      	add	r0, r3
 8008f84:	4443      	add	r3, r8
 8008f86:	461e      	mov	r6, r3
 8008f88:	4605      	mov	r5, r0
 8008f8a:	4575      	cmp	r5, lr
 8008f8c:	d30e      	bcc.n	8008fac <__mdiff+0xec>
 8008f8e:	f10e 0103 	add.w	r1, lr, #3
 8008f92:	1a09      	subs	r1, r1, r0
 8008f94:	f021 0103 	bic.w	r1, r1, #3
 8008f98:	3803      	subs	r0, #3
 8008f9a:	4586      	cmp	lr, r0
 8008f9c:	bf38      	it	cc
 8008f9e:	2100      	movcc	r1, #0
 8008fa0:	440b      	add	r3, r1
 8008fa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fa6:	b189      	cbz	r1, 8008fcc <__mdiff+0x10c>
 8008fa8:	6117      	str	r7, [r2, #16]
 8008faa:	e7a3      	b.n	8008ef4 <__mdiff+0x34>
 8008fac:	f855 8b04 	ldr.w	r8, [r5], #4
 8008fb0:	fa1f f188 	uxth.w	r1, r8
 8008fb4:	4461      	add	r1, ip
 8008fb6:	140c      	asrs	r4, r1, #16
 8008fb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fbc:	b289      	uxth	r1, r1
 8008fbe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fc2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008fc6:	f846 1b04 	str.w	r1, [r6], #4
 8008fca:	e7de      	b.n	8008f8a <__mdiff+0xca>
 8008fcc:	3f01      	subs	r7, #1
 8008fce:	e7e8      	b.n	8008fa2 <__mdiff+0xe2>
 8008fd0:	0800b3db 	.word	0x0800b3db
 8008fd4:	0800b3ec 	.word	0x0800b3ec

08008fd8 <__ulp>:
 8008fd8:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <__ulp+0x3c>)
 8008fda:	400b      	ands	r3, r1
 8008fdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dc08      	bgt.n	8008ff6 <__ulp+0x1e>
 8008fe4:	425b      	negs	r3, r3
 8008fe6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008fea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fee:	da04      	bge.n	8008ffa <__ulp+0x22>
 8008ff0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ff4:	4113      	asrs	r3, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	e008      	b.n	800900c <__ulp+0x34>
 8008ffa:	f1a2 0314 	sub.w	r3, r2, #20
 8008ffe:	2b1e      	cmp	r3, #30
 8009000:	bfd6      	itet	le
 8009002:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009006:	2201      	movgt	r2, #1
 8009008:	40da      	lsrle	r2, r3
 800900a:	2300      	movs	r3, #0
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	7ff00000 	.word	0x7ff00000

08009018 <__b2d>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	6905      	ldr	r5, [r0, #16]
 800901c:	f100 0714 	add.w	r7, r0, #20
 8009020:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009024:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009028:	1f2e      	subs	r6, r5, #4
 800902a:	4620      	mov	r0, r4
 800902c:	f7ff fd5a 	bl	8008ae4 <__hi0bits>
 8009030:	f1c0 0220 	rsb	r2, r0, #32
 8009034:	280a      	cmp	r0, #10
 8009036:	4603      	mov	r3, r0
 8009038:	f8df c068 	ldr.w	ip, [pc, #104]	; 80090a4 <__b2d+0x8c>
 800903c:	600a      	str	r2, [r1, #0]
 800903e:	dc12      	bgt.n	8009066 <__b2d+0x4e>
 8009040:	f1c0 0e0b 	rsb	lr, r0, #11
 8009044:	fa24 f20e 	lsr.w	r2, r4, lr
 8009048:	42b7      	cmp	r7, r6
 800904a:	ea42 010c 	orr.w	r1, r2, ip
 800904e:	bf2c      	ite	cs
 8009050:	2200      	movcs	r2, #0
 8009052:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009056:	3315      	adds	r3, #21
 8009058:	fa04 f303 	lsl.w	r3, r4, r3
 800905c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009060:	431a      	orrs	r2, r3
 8009062:	4610      	mov	r0, r2
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009066:	42b7      	cmp	r7, r6
 8009068:	bf2e      	itee	cs
 800906a:	2200      	movcs	r2, #0
 800906c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009070:	f1a5 0608 	subcc.w	r6, r5, #8
 8009074:	3b0b      	subs	r3, #11
 8009076:	d012      	beq.n	800909e <__b2d+0x86>
 8009078:	f1c3 0520 	rsb	r5, r3, #32
 800907c:	fa22 f105 	lsr.w	r1, r2, r5
 8009080:	409c      	lsls	r4, r3
 8009082:	430c      	orrs	r4, r1
 8009084:	42be      	cmp	r6, r7
 8009086:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800908a:	bf94      	ite	ls
 800908c:	2400      	movls	r4, #0
 800908e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009092:	409a      	lsls	r2, r3
 8009094:	40ec      	lsrs	r4, r5
 8009096:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800909a:	4322      	orrs	r2, r4
 800909c:	e7e1      	b.n	8009062 <__b2d+0x4a>
 800909e:	ea44 010c 	orr.w	r1, r4, ip
 80090a2:	e7de      	b.n	8009062 <__b2d+0x4a>
 80090a4:	3ff00000 	.word	0x3ff00000

080090a8 <__d2b>:
 80090a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090aa:	2101      	movs	r1, #1
 80090ac:	4617      	mov	r7, r2
 80090ae:	461c      	mov	r4, r3
 80090b0:	9e08      	ldr	r6, [sp, #32]
 80090b2:	f7ff fc25 	bl	8008900 <_Balloc>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b930      	cbnz	r0, 80090c8 <__d2b+0x20>
 80090ba:	4602      	mov	r2, r0
 80090bc:	f240 310f 	movw	r1, #783	; 0x30f
 80090c0:	4b22      	ldr	r3, [pc, #136]	; (800914c <__d2b+0xa4>)
 80090c2:	4823      	ldr	r0, [pc, #140]	; (8009150 <__d2b+0xa8>)
 80090c4:	f001 fb82 	bl	800a7cc <__assert_func>
 80090c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80090cc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80090d0:	bb24      	cbnz	r4, 800911c <__d2b+0x74>
 80090d2:	2f00      	cmp	r7, #0
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	d026      	beq.n	8009126 <__d2b+0x7e>
 80090d8:	4668      	mov	r0, sp
 80090da:	9700      	str	r7, [sp, #0]
 80090dc:	f7ff fd22 	bl	8008b24 <__lo0bits>
 80090e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090e4:	b1e8      	cbz	r0, 8009122 <__d2b+0x7a>
 80090e6:	f1c0 0320 	rsb	r3, r0, #32
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	430b      	orrs	r3, r1
 80090f0:	40c2      	lsrs	r2, r0
 80090f2:	616b      	str	r3, [r5, #20]
 80090f4:	9201      	str	r2, [sp, #4]
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf14      	ite	ne
 80090fc:	2102      	movne	r1, #2
 80090fe:	2101      	moveq	r1, #1
 8009100:	61ab      	str	r3, [r5, #24]
 8009102:	6129      	str	r1, [r5, #16]
 8009104:	b1bc      	cbz	r4, 8009136 <__d2b+0x8e>
 8009106:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800910a:	4404      	add	r4, r0
 800910c:	6034      	str	r4, [r6, #0]
 800910e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009114:	6018      	str	r0, [r3, #0]
 8009116:	4628      	mov	r0, r5
 8009118:	b003      	add	sp, #12
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009120:	e7d7      	b.n	80090d2 <__d2b+0x2a>
 8009122:	6169      	str	r1, [r5, #20]
 8009124:	e7e7      	b.n	80090f6 <__d2b+0x4e>
 8009126:	a801      	add	r0, sp, #4
 8009128:	f7ff fcfc 	bl	8008b24 <__lo0bits>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	2101      	movs	r1, #1
 8009130:	616b      	str	r3, [r5, #20]
 8009132:	3020      	adds	r0, #32
 8009134:	e7e5      	b.n	8009102 <__d2b+0x5a>
 8009136:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800913a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800913e:	6030      	str	r0, [r6, #0]
 8009140:	6918      	ldr	r0, [r3, #16]
 8009142:	f7ff fccf 	bl	8008ae4 <__hi0bits>
 8009146:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800914a:	e7e2      	b.n	8009112 <__d2b+0x6a>
 800914c:	0800b3db 	.word	0x0800b3db
 8009150:	0800b3ec 	.word	0x0800b3ec

08009154 <__ratio>:
 8009154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	4688      	mov	r8, r1
 800915a:	4669      	mov	r1, sp
 800915c:	4681      	mov	r9, r0
 800915e:	f7ff ff5b 	bl	8009018 <__b2d>
 8009162:	460f      	mov	r7, r1
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	4640      	mov	r0, r8
 800916a:	a901      	add	r1, sp, #4
 800916c:	f7ff ff54 	bl	8009018 <__b2d>
 8009170:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009174:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009178:	468b      	mov	fp, r1
 800917a:	eba3 0c02 	sub.w	ip, r3, r2
 800917e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009188:	2b00      	cmp	r3, #0
 800918a:	bfd5      	itete	le
 800918c:	460a      	movle	r2, r1
 800918e:	462a      	movgt	r2, r5
 8009190:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009194:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009198:	bfd8      	it	le
 800919a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800919e:	465b      	mov	r3, fp
 80091a0:	4602      	mov	r2, r0
 80091a2:	4639      	mov	r1, r7
 80091a4:	4620      	mov	r0, r4
 80091a6:	f7f7 fac1 	bl	800072c <__aeabi_ddiv>
 80091aa:	b003      	add	sp, #12
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091b0 <__copybits>:
 80091b0:	3901      	subs	r1, #1
 80091b2:	b570      	push	{r4, r5, r6, lr}
 80091b4:	1149      	asrs	r1, r1, #5
 80091b6:	6914      	ldr	r4, [r2, #16]
 80091b8:	3101      	adds	r1, #1
 80091ba:	f102 0314 	add.w	r3, r2, #20
 80091be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091c6:	1f05      	subs	r5, r0, #4
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d30c      	bcc.n	80091e6 <__copybits+0x36>
 80091cc:	1aa3      	subs	r3, r4, r2
 80091ce:	3b11      	subs	r3, #17
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3211      	adds	r2, #17
 80091d6:	42a2      	cmp	r2, r4
 80091d8:	bf88      	it	hi
 80091da:	2300      	movhi	r3, #0
 80091dc:	4418      	add	r0, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	4288      	cmp	r0, r1
 80091e2:	d305      	bcc.n	80091f0 <__copybits+0x40>
 80091e4:	bd70      	pop	{r4, r5, r6, pc}
 80091e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80091ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80091ee:	e7eb      	b.n	80091c8 <__copybits+0x18>
 80091f0:	f840 3b04 	str.w	r3, [r0], #4
 80091f4:	e7f4      	b.n	80091e0 <__copybits+0x30>

080091f6 <__any_on>:
 80091f6:	f100 0214 	add.w	r2, r0, #20
 80091fa:	6900      	ldr	r0, [r0, #16]
 80091fc:	114b      	asrs	r3, r1, #5
 80091fe:	4298      	cmp	r0, r3
 8009200:	b510      	push	{r4, lr}
 8009202:	db11      	blt.n	8009228 <__any_on+0x32>
 8009204:	dd0a      	ble.n	800921c <__any_on+0x26>
 8009206:	f011 011f 	ands.w	r1, r1, #31
 800920a:	d007      	beq.n	800921c <__any_on+0x26>
 800920c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009210:	fa24 f001 	lsr.w	r0, r4, r1
 8009214:	fa00 f101 	lsl.w	r1, r0, r1
 8009218:	428c      	cmp	r4, r1
 800921a:	d10b      	bne.n	8009234 <__any_on+0x3e>
 800921c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009220:	4293      	cmp	r3, r2
 8009222:	d803      	bhi.n	800922c <__any_on+0x36>
 8009224:	2000      	movs	r0, #0
 8009226:	bd10      	pop	{r4, pc}
 8009228:	4603      	mov	r3, r0
 800922a:	e7f7      	b.n	800921c <__any_on+0x26>
 800922c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009230:	2900      	cmp	r1, #0
 8009232:	d0f5      	beq.n	8009220 <__any_on+0x2a>
 8009234:	2001      	movs	r0, #1
 8009236:	e7f6      	b.n	8009226 <__any_on+0x30>

08009238 <sulp>:
 8009238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923c:	460f      	mov	r7, r1
 800923e:	4690      	mov	r8, r2
 8009240:	f7ff feca 	bl	8008fd8 <__ulp>
 8009244:	4604      	mov	r4, r0
 8009246:	460d      	mov	r5, r1
 8009248:	f1b8 0f00 	cmp.w	r8, #0
 800924c:	d011      	beq.n	8009272 <sulp+0x3a>
 800924e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009256:	2b00      	cmp	r3, #0
 8009258:	dd0b      	ble.n	8009272 <sulp+0x3a>
 800925a:	2400      	movs	r4, #0
 800925c:	051b      	lsls	r3, r3, #20
 800925e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009262:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009266:	4622      	mov	r2, r4
 8009268:	462b      	mov	r3, r5
 800926a:	f7f7 f935 	bl	80004d8 <__aeabi_dmul>
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	4620      	mov	r0, r4
 8009274:	4629      	mov	r1, r5
 8009276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800927a:	0000      	movs	r0, r0
 800927c:	0000      	movs	r0, r0
	...

08009280 <_strtod_l>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	b09f      	sub	sp, #124	; 0x7c
 8009286:	9217      	str	r2, [sp, #92]	; 0x5c
 8009288:	2200      	movs	r2, #0
 800928a:	4604      	mov	r4, r0
 800928c:	921a      	str	r2, [sp, #104]	; 0x68
 800928e:	460d      	mov	r5, r1
 8009290:	f04f 0800 	mov.w	r8, #0
 8009294:	f04f 0900 	mov.w	r9, #0
 8009298:	460a      	mov	r2, r1
 800929a:	9219      	str	r2, [sp, #100]	; 0x64
 800929c:	7811      	ldrb	r1, [r2, #0]
 800929e:	292b      	cmp	r1, #43	; 0x2b
 80092a0:	d04a      	beq.n	8009338 <_strtod_l+0xb8>
 80092a2:	d838      	bhi.n	8009316 <_strtod_l+0x96>
 80092a4:	290d      	cmp	r1, #13
 80092a6:	d832      	bhi.n	800930e <_strtod_l+0x8e>
 80092a8:	2908      	cmp	r1, #8
 80092aa:	d832      	bhi.n	8009312 <_strtod_l+0x92>
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d03b      	beq.n	8009328 <_strtod_l+0xa8>
 80092b0:	2200      	movs	r2, #0
 80092b2:	920e      	str	r2, [sp, #56]	; 0x38
 80092b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80092b6:	7832      	ldrb	r2, [r6, #0]
 80092b8:	2a30      	cmp	r2, #48	; 0x30
 80092ba:	f040 80b2 	bne.w	8009422 <_strtod_l+0x1a2>
 80092be:	7872      	ldrb	r2, [r6, #1]
 80092c0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80092c4:	2a58      	cmp	r2, #88	; 0x58
 80092c6:	d16e      	bne.n	80093a6 <_strtod_l+0x126>
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092cc:	4620      	mov	r0, r4
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	ab1a      	add	r3, sp, #104	; 0x68
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4a8c      	ldr	r2, [pc, #560]	; (8009508 <_strtod_l+0x288>)
 80092d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80092d8:	a919      	add	r1, sp, #100	; 0x64
 80092da:	f001 fb11 	bl	800a900 <__gethex>
 80092de:	f010 070f 	ands.w	r7, r0, #15
 80092e2:	4605      	mov	r5, r0
 80092e4:	d005      	beq.n	80092f2 <_strtod_l+0x72>
 80092e6:	2f06      	cmp	r7, #6
 80092e8:	d128      	bne.n	800933c <_strtod_l+0xbc>
 80092ea:	2300      	movs	r3, #0
 80092ec:	3601      	adds	r6, #1
 80092ee:	9619      	str	r6, [sp, #100]	; 0x64
 80092f0:	930e      	str	r3, [sp, #56]	; 0x38
 80092f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 85a0 	bne.w	8009e3a <_strtod_l+0xbba>
 80092fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fc:	b1cb      	cbz	r3, 8009332 <_strtod_l+0xb2>
 80092fe:	4642      	mov	r2, r8
 8009300:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009304:	4610      	mov	r0, r2
 8009306:	4619      	mov	r1, r3
 8009308:	b01f      	add	sp, #124	; 0x7c
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	2920      	cmp	r1, #32
 8009310:	d1ce      	bne.n	80092b0 <_strtod_l+0x30>
 8009312:	3201      	adds	r2, #1
 8009314:	e7c1      	b.n	800929a <_strtod_l+0x1a>
 8009316:	292d      	cmp	r1, #45	; 0x2d
 8009318:	d1ca      	bne.n	80092b0 <_strtod_l+0x30>
 800931a:	2101      	movs	r1, #1
 800931c:	910e      	str	r1, [sp, #56]	; 0x38
 800931e:	1c51      	adds	r1, r2, #1
 8009320:	9119      	str	r1, [sp, #100]	; 0x64
 8009322:	7852      	ldrb	r2, [r2, #1]
 8009324:	2a00      	cmp	r2, #0
 8009326:	d1c5      	bne.n	80092b4 <_strtod_l+0x34>
 8009328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800932a:	9519      	str	r5, [sp, #100]	; 0x64
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 8582 	bne.w	8009e36 <_strtod_l+0xbb6>
 8009332:	4642      	mov	r2, r8
 8009334:	464b      	mov	r3, r9
 8009336:	e7e5      	b.n	8009304 <_strtod_l+0x84>
 8009338:	2100      	movs	r1, #0
 800933a:	e7ef      	b.n	800931c <_strtod_l+0x9c>
 800933c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800933e:	b13a      	cbz	r2, 8009350 <_strtod_l+0xd0>
 8009340:	2135      	movs	r1, #53	; 0x35
 8009342:	a81c      	add	r0, sp, #112	; 0x70
 8009344:	f7ff ff34 	bl	80091b0 <__copybits>
 8009348:	4620      	mov	r0, r4
 800934a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800934c:	f7ff fb18 	bl	8008980 <_Bfree>
 8009350:	3f01      	subs	r7, #1
 8009352:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009354:	2f04      	cmp	r7, #4
 8009356:	d806      	bhi.n	8009366 <_strtod_l+0xe6>
 8009358:	e8df f007 	tbb	[pc, r7]
 800935c:	201d0314 	.word	0x201d0314
 8009360:	14          	.byte	0x14
 8009361:	00          	.byte	0x00
 8009362:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009366:	05e9      	lsls	r1, r5, #23
 8009368:	bf48      	it	mi
 800936a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800936e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009372:	0d1b      	lsrs	r3, r3, #20
 8009374:	051b      	lsls	r3, r3, #20
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1bb      	bne.n	80092f2 <_strtod_l+0x72>
 800937a:	f7fe fb09 	bl	8007990 <__errno>
 800937e:	2322      	movs	r3, #34	; 0x22
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	e7b6      	b.n	80092f2 <_strtod_l+0x72>
 8009384:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009388:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800938c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009390:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009394:	e7e7      	b.n	8009366 <_strtod_l+0xe6>
 8009396:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800950c <_strtod_l+0x28c>
 800939a:	e7e4      	b.n	8009366 <_strtod_l+0xe6>
 800939c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093a0:	f04f 38ff 	mov.w	r8, #4294967295
 80093a4:	e7df      	b.n	8009366 <_strtod_l+0xe6>
 80093a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	9219      	str	r2, [sp, #100]	; 0x64
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b30      	cmp	r3, #48	; 0x30
 80093b0:	d0f9      	beq.n	80093a6 <_strtod_l+0x126>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d09d      	beq.n	80092f2 <_strtod_l+0x72>
 80093b6:	2301      	movs	r3, #1
 80093b8:	f04f 0a00 	mov.w	sl, #0
 80093bc:	220a      	movs	r2, #10
 80093be:	46d3      	mov	fp, sl
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80093c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80093cc:	7806      	ldrb	r6, [r0, #0]
 80093ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093d2:	b2d9      	uxtb	r1, r3
 80093d4:	2909      	cmp	r1, #9
 80093d6:	d926      	bls.n	8009426 <_strtod_l+0x1a6>
 80093d8:	2201      	movs	r2, #1
 80093da:	494d      	ldr	r1, [pc, #308]	; (8009510 <_strtod_l+0x290>)
 80093dc:	f7fe fa66 	bl	80078ac <strncmp>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d030      	beq.n	8009446 <_strtod_l+0x1c6>
 80093e4:	2000      	movs	r0, #0
 80093e6:	4632      	mov	r2, r6
 80093e8:	4603      	mov	r3, r0
 80093ea:	465e      	mov	r6, fp
 80093ec:	9008      	str	r0, [sp, #32]
 80093ee:	2a65      	cmp	r2, #101	; 0x65
 80093f0:	d001      	beq.n	80093f6 <_strtod_l+0x176>
 80093f2:	2a45      	cmp	r2, #69	; 0x45
 80093f4:	d113      	bne.n	800941e <_strtod_l+0x19e>
 80093f6:	b91e      	cbnz	r6, 8009400 <_strtod_l+0x180>
 80093f8:	9a05      	ldr	r2, [sp, #20]
 80093fa:	4302      	orrs	r2, r0
 80093fc:	d094      	beq.n	8009328 <_strtod_l+0xa8>
 80093fe:	2600      	movs	r6, #0
 8009400:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009402:	1c6a      	adds	r2, r5, #1
 8009404:	9219      	str	r2, [sp, #100]	; 0x64
 8009406:	786a      	ldrb	r2, [r5, #1]
 8009408:	2a2b      	cmp	r2, #43	; 0x2b
 800940a:	d074      	beq.n	80094f6 <_strtod_l+0x276>
 800940c:	2a2d      	cmp	r2, #45	; 0x2d
 800940e:	d078      	beq.n	8009502 <_strtod_l+0x282>
 8009410:	f04f 0c00 	mov.w	ip, #0
 8009414:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009418:	2909      	cmp	r1, #9
 800941a:	d97f      	bls.n	800951c <_strtod_l+0x29c>
 800941c:	9519      	str	r5, [sp, #100]	; 0x64
 800941e:	2700      	movs	r7, #0
 8009420:	e09e      	b.n	8009560 <_strtod_l+0x2e0>
 8009422:	2300      	movs	r3, #0
 8009424:	e7c8      	b.n	80093b8 <_strtod_l+0x138>
 8009426:	f1bb 0f08 	cmp.w	fp, #8
 800942a:	bfd8      	it	le
 800942c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800942e:	f100 0001 	add.w	r0, r0, #1
 8009432:	bfd6      	itet	le
 8009434:	fb02 3301 	mlale	r3, r2, r1, r3
 8009438:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800943c:	930a      	strle	r3, [sp, #40]	; 0x28
 800943e:	f10b 0b01 	add.w	fp, fp, #1
 8009442:	9019      	str	r0, [sp, #100]	; 0x64
 8009444:	e7c1      	b.n	80093ca <_strtod_l+0x14a>
 8009446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	9219      	str	r2, [sp, #100]	; 0x64
 800944c:	785a      	ldrb	r2, [r3, #1]
 800944e:	f1bb 0f00 	cmp.w	fp, #0
 8009452:	d037      	beq.n	80094c4 <_strtod_l+0x244>
 8009454:	465e      	mov	r6, fp
 8009456:	9008      	str	r0, [sp, #32]
 8009458:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800945c:	2b09      	cmp	r3, #9
 800945e:	d912      	bls.n	8009486 <_strtod_l+0x206>
 8009460:	2301      	movs	r3, #1
 8009462:	e7c4      	b.n	80093ee <_strtod_l+0x16e>
 8009464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009466:	3001      	adds	r0, #1
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	9219      	str	r2, [sp, #100]	; 0x64
 800946c:	785a      	ldrb	r2, [r3, #1]
 800946e:	2a30      	cmp	r2, #48	; 0x30
 8009470:	d0f8      	beq.n	8009464 <_strtod_l+0x1e4>
 8009472:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009476:	2b08      	cmp	r3, #8
 8009478:	f200 84e4 	bhi.w	8009e44 <_strtod_l+0xbc4>
 800947c:	9008      	str	r0, [sp, #32]
 800947e:	2000      	movs	r0, #0
 8009480:	4606      	mov	r6, r0
 8009482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009484:	930b      	str	r3, [sp, #44]	; 0x2c
 8009486:	3a30      	subs	r2, #48	; 0x30
 8009488:	f100 0301 	add.w	r3, r0, #1
 800948c:	d014      	beq.n	80094b8 <_strtod_l+0x238>
 800948e:	9908      	ldr	r1, [sp, #32]
 8009490:	eb00 0c06 	add.w	ip, r0, r6
 8009494:	4419      	add	r1, r3
 8009496:	9108      	str	r1, [sp, #32]
 8009498:	4633      	mov	r3, r6
 800949a:	210a      	movs	r1, #10
 800949c:	4563      	cmp	r3, ip
 800949e:	d113      	bne.n	80094c8 <_strtod_l+0x248>
 80094a0:	1833      	adds	r3, r6, r0
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	f106 0601 	add.w	r6, r6, #1
 80094a8:	4406      	add	r6, r0
 80094aa:	dc1a      	bgt.n	80094e2 <_strtod_l+0x262>
 80094ac:	230a      	movs	r3, #10
 80094ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094b0:	fb03 2301 	mla	r3, r3, r1, r2
 80094b4:	930a      	str	r3, [sp, #40]	; 0x28
 80094b6:	2300      	movs	r3, #0
 80094b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094ba:	4618      	mov	r0, r3
 80094bc:	1c51      	adds	r1, r2, #1
 80094be:	9119      	str	r1, [sp, #100]	; 0x64
 80094c0:	7852      	ldrb	r2, [r2, #1]
 80094c2:	e7c9      	b.n	8009458 <_strtod_l+0x1d8>
 80094c4:	4658      	mov	r0, fp
 80094c6:	e7d2      	b.n	800946e <_strtod_l+0x1ee>
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	f103 0301 	add.w	r3, r3, #1
 80094ce:	dc03      	bgt.n	80094d8 <_strtod_l+0x258>
 80094d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80094d2:	434f      	muls	r7, r1
 80094d4:	970a      	str	r7, [sp, #40]	; 0x28
 80094d6:	e7e1      	b.n	800949c <_strtod_l+0x21c>
 80094d8:	2b10      	cmp	r3, #16
 80094da:	bfd8      	it	le
 80094dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80094e0:	e7dc      	b.n	800949c <_strtod_l+0x21c>
 80094e2:	2e10      	cmp	r6, #16
 80094e4:	bfdc      	itt	le
 80094e6:	230a      	movle	r3, #10
 80094e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80094ec:	e7e3      	b.n	80094b6 <_strtod_l+0x236>
 80094ee:	2300      	movs	r3, #0
 80094f0:	9308      	str	r3, [sp, #32]
 80094f2:	2301      	movs	r3, #1
 80094f4:	e780      	b.n	80093f8 <_strtod_l+0x178>
 80094f6:	f04f 0c00 	mov.w	ip, #0
 80094fa:	1caa      	adds	r2, r5, #2
 80094fc:	9219      	str	r2, [sp, #100]	; 0x64
 80094fe:	78aa      	ldrb	r2, [r5, #2]
 8009500:	e788      	b.n	8009414 <_strtod_l+0x194>
 8009502:	f04f 0c01 	mov.w	ip, #1
 8009506:	e7f8      	b.n	80094fa <_strtod_l+0x27a>
 8009508:	0800b548 	.word	0x0800b548
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	0800b544 	.word	0x0800b544
 8009514:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009516:	1c51      	adds	r1, r2, #1
 8009518:	9119      	str	r1, [sp, #100]	; 0x64
 800951a:	7852      	ldrb	r2, [r2, #1]
 800951c:	2a30      	cmp	r2, #48	; 0x30
 800951e:	d0f9      	beq.n	8009514 <_strtod_l+0x294>
 8009520:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009524:	2908      	cmp	r1, #8
 8009526:	f63f af7a 	bhi.w	800941e <_strtod_l+0x19e>
 800952a:	3a30      	subs	r2, #48	; 0x30
 800952c:	9209      	str	r2, [sp, #36]	; 0x24
 800952e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009530:	920c      	str	r2, [sp, #48]	; 0x30
 8009532:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009534:	1c57      	adds	r7, r2, #1
 8009536:	9719      	str	r7, [sp, #100]	; 0x64
 8009538:	7852      	ldrb	r2, [r2, #1]
 800953a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800953e:	f1be 0f09 	cmp.w	lr, #9
 8009542:	d938      	bls.n	80095b6 <_strtod_l+0x336>
 8009544:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009546:	1a7f      	subs	r7, r7, r1
 8009548:	2f08      	cmp	r7, #8
 800954a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800954e:	dc03      	bgt.n	8009558 <_strtod_l+0x2d8>
 8009550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009552:	428f      	cmp	r7, r1
 8009554:	bfa8      	it	ge
 8009556:	460f      	movge	r7, r1
 8009558:	f1bc 0f00 	cmp.w	ip, #0
 800955c:	d000      	beq.n	8009560 <_strtod_l+0x2e0>
 800955e:	427f      	negs	r7, r7
 8009560:	2e00      	cmp	r6, #0
 8009562:	d14f      	bne.n	8009604 <_strtod_l+0x384>
 8009564:	9905      	ldr	r1, [sp, #20]
 8009566:	4301      	orrs	r1, r0
 8009568:	f47f aec3 	bne.w	80092f2 <_strtod_l+0x72>
 800956c:	2b00      	cmp	r3, #0
 800956e:	f47f aedb 	bne.w	8009328 <_strtod_l+0xa8>
 8009572:	2a69      	cmp	r2, #105	; 0x69
 8009574:	d029      	beq.n	80095ca <_strtod_l+0x34a>
 8009576:	dc26      	bgt.n	80095c6 <_strtod_l+0x346>
 8009578:	2a49      	cmp	r2, #73	; 0x49
 800957a:	d026      	beq.n	80095ca <_strtod_l+0x34a>
 800957c:	2a4e      	cmp	r2, #78	; 0x4e
 800957e:	f47f aed3 	bne.w	8009328 <_strtod_l+0xa8>
 8009582:	499a      	ldr	r1, [pc, #616]	; (80097ec <_strtod_l+0x56c>)
 8009584:	a819      	add	r0, sp, #100	; 0x64
 8009586:	f001 fbfd 	bl	800ad84 <__match>
 800958a:	2800      	cmp	r0, #0
 800958c:	f43f aecc 	beq.w	8009328 <_strtod_l+0xa8>
 8009590:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b28      	cmp	r3, #40	; 0x28
 8009596:	d12f      	bne.n	80095f8 <_strtod_l+0x378>
 8009598:	4995      	ldr	r1, [pc, #596]	; (80097f0 <_strtod_l+0x570>)
 800959a:	aa1c      	add	r2, sp, #112	; 0x70
 800959c:	a819      	add	r0, sp, #100	; 0x64
 800959e:	f001 fc05 	bl	800adac <__hexnan>
 80095a2:	2805      	cmp	r0, #5
 80095a4:	d128      	bne.n	80095f8 <_strtod_l+0x378>
 80095a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80095ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095b4:	e69d      	b.n	80092f2 <_strtod_l+0x72>
 80095b6:	210a      	movs	r1, #10
 80095b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095ba:	fb01 2107 	mla	r1, r1, r7, r2
 80095be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80095c2:	9209      	str	r2, [sp, #36]	; 0x24
 80095c4:	e7b5      	b.n	8009532 <_strtod_l+0x2b2>
 80095c6:	2a6e      	cmp	r2, #110	; 0x6e
 80095c8:	e7d9      	b.n	800957e <_strtod_l+0x2fe>
 80095ca:	498a      	ldr	r1, [pc, #552]	; (80097f4 <_strtod_l+0x574>)
 80095cc:	a819      	add	r0, sp, #100	; 0x64
 80095ce:	f001 fbd9 	bl	800ad84 <__match>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f aea8 	beq.w	8009328 <_strtod_l+0xa8>
 80095d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095da:	4987      	ldr	r1, [pc, #540]	; (80097f8 <_strtod_l+0x578>)
 80095dc:	3b01      	subs	r3, #1
 80095de:	a819      	add	r0, sp, #100	; 0x64
 80095e0:	9319      	str	r3, [sp, #100]	; 0x64
 80095e2:	f001 fbcf 	bl	800ad84 <__match>
 80095e6:	b910      	cbnz	r0, 80095ee <_strtod_l+0x36e>
 80095e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095ea:	3301      	adds	r3, #1
 80095ec:	9319      	str	r3, [sp, #100]	; 0x64
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80097fc <_strtod_l+0x57c>
 80095f6:	e67c      	b.n	80092f2 <_strtod_l+0x72>
 80095f8:	4881      	ldr	r0, [pc, #516]	; (8009800 <_strtod_l+0x580>)
 80095fa:	f001 f8e1 	bl	800a7c0 <nan>
 80095fe:	4680      	mov	r8, r0
 8009600:	4689      	mov	r9, r1
 8009602:	e676      	b.n	80092f2 <_strtod_l+0x72>
 8009604:	9b08      	ldr	r3, [sp, #32]
 8009606:	f1bb 0f00 	cmp.w	fp, #0
 800960a:	bf08      	it	eq
 800960c:	46b3      	moveq	fp, r6
 800960e:	1afb      	subs	r3, r7, r3
 8009610:	2e10      	cmp	r6, #16
 8009612:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009614:	4635      	mov	r5, r6
 8009616:	9309      	str	r3, [sp, #36]	; 0x24
 8009618:	bfa8      	it	ge
 800961a:	2510      	movge	r5, #16
 800961c:	f7f6 fee2 	bl	80003e4 <__aeabi_ui2d>
 8009620:	2e09      	cmp	r6, #9
 8009622:	4680      	mov	r8, r0
 8009624:	4689      	mov	r9, r1
 8009626:	dd13      	ble.n	8009650 <_strtod_l+0x3d0>
 8009628:	4b76      	ldr	r3, [pc, #472]	; (8009804 <_strtod_l+0x584>)
 800962a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800962e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009632:	f7f6 ff51 	bl	80004d8 <__aeabi_dmul>
 8009636:	4680      	mov	r8, r0
 8009638:	4650      	mov	r0, sl
 800963a:	4689      	mov	r9, r1
 800963c:	f7f6 fed2 	bl	80003e4 <__aeabi_ui2d>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f6 fd90 	bl	800016c <__adddf3>
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	2e0f      	cmp	r6, #15
 8009652:	dc36      	bgt.n	80096c2 <_strtod_l+0x442>
 8009654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009656:	2b00      	cmp	r3, #0
 8009658:	f43f ae4b 	beq.w	80092f2 <_strtod_l+0x72>
 800965c:	dd22      	ble.n	80096a4 <_strtod_l+0x424>
 800965e:	2b16      	cmp	r3, #22
 8009660:	dc09      	bgt.n	8009676 <_strtod_l+0x3f6>
 8009662:	4968      	ldr	r1, [pc, #416]	; (8009804 <_strtod_l+0x584>)
 8009664:	4642      	mov	r2, r8
 8009666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966a:	464b      	mov	r3, r9
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	f7f6 ff32 	bl	80004d8 <__aeabi_dmul>
 8009674:	e7c3      	b.n	80095fe <_strtod_l+0x37e>
 8009676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009678:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800967c:	4293      	cmp	r3, r2
 800967e:	db20      	blt.n	80096c2 <_strtod_l+0x442>
 8009680:	4c60      	ldr	r4, [pc, #384]	; (8009804 <_strtod_l+0x584>)
 8009682:	f1c6 060f 	rsb	r6, r6, #15
 8009686:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800968a:	4642      	mov	r2, r8
 800968c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009690:	464b      	mov	r3, r9
 8009692:	f7f6 ff21 	bl	80004d8 <__aeabi_dmul>
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	1b9e      	subs	r6, r3, r6
 800969a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800969e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096a2:	e7e5      	b.n	8009670 <_strtod_l+0x3f0>
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	3316      	adds	r3, #22
 80096a8:	db0b      	blt.n	80096c2 <_strtod_l+0x442>
 80096aa:	9b08      	ldr	r3, [sp, #32]
 80096ac:	4640      	mov	r0, r8
 80096ae:	1bdf      	subs	r7, r3, r7
 80096b0:	4b54      	ldr	r3, [pc, #336]	; (8009804 <_strtod_l+0x584>)
 80096b2:	4649      	mov	r1, r9
 80096b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80096b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096bc:	f7f7 f836 	bl	800072c <__aeabi_ddiv>
 80096c0:	e79d      	b.n	80095fe <_strtod_l+0x37e>
 80096c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c4:	1b75      	subs	r5, r6, r5
 80096c6:	441d      	add	r5, r3
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	dd70      	ble.n	80097ae <_strtod_l+0x52e>
 80096cc:	f015 030f 	ands.w	r3, r5, #15
 80096d0:	d00a      	beq.n	80096e8 <_strtod_l+0x468>
 80096d2:	494c      	ldr	r1, [pc, #304]	; (8009804 <_strtod_l+0x584>)
 80096d4:	4642      	mov	r2, r8
 80096d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096de:	464b      	mov	r3, r9
 80096e0:	f7f6 fefa 	bl	80004d8 <__aeabi_dmul>
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	f035 050f 	bics.w	r5, r5, #15
 80096ec:	d04d      	beq.n	800978a <_strtod_l+0x50a>
 80096ee:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80096f2:	dd22      	ble.n	800973a <_strtod_l+0x4ba>
 80096f4:	2600      	movs	r6, #0
 80096f6:	46b3      	mov	fp, r6
 80096f8:	960b      	str	r6, [sp, #44]	; 0x2c
 80096fa:	9608      	str	r6, [sp, #32]
 80096fc:	2322      	movs	r3, #34	; 0x22
 80096fe:	f04f 0800 	mov.w	r8, #0
 8009702:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80097fc <_strtod_l+0x57c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800970a:	2b00      	cmp	r3, #0
 800970c:	f43f adf1 	beq.w	80092f2 <_strtod_l+0x72>
 8009710:	4620      	mov	r0, r4
 8009712:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009714:	f7ff f934 	bl	8008980 <_Bfree>
 8009718:	4620      	mov	r0, r4
 800971a:	9908      	ldr	r1, [sp, #32]
 800971c:	f7ff f930 	bl	8008980 <_Bfree>
 8009720:	4659      	mov	r1, fp
 8009722:	4620      	mov	r0, r4
 8009724:	f7ff f92c 	bl	8008980 <_Bfree>
 8009728:	4620      	mov	r0, r4
 800972a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800972c:	f7ff f928 	bl	8008980 <_Bfree>
 8009730:	4631      	mov	r1, r6
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff f924 	bl	8008980 <_Bfree>
 8009738:	e5db      	b.n	80092f2 <_strtod_l+0x72>
 800973a:	4b33      	ldr	r3, [pc, #204]	; (8009808 <_strtod_l+0x588>)
 800973c:	4640      	mov	r0, r8
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	2300      	movs	r3, #0
 8009742:	4649      	mov	r1, r9
 8009744:	469a      	mov	sl, r3
 8009746:	112d      	asrs	r5, r5, #4
 8009748:	2d01      	cmp	r5, #1
 800974a:	dc21      	bgt.n	8009790 <_strtod_l+0x510>
 800974c:	b10b      	cbz	r3, 8009752 <_strtod_l+0x4d2>
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	492d      	ldr	r1, [pc, #180]	; (8009808 <_strtod_l+0x588>)
 8009754:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009758:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800975c:	4642      	mov	r2, r8
 800975e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009762:	464b      	mov	r3, r9
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	4b24      	ldr	r3, [pc, #144]	; (80097fc <_strtod_l+0x57c>)
 800976a:	460a      	mov	r2, r1
 800976c:	400b      	ands	r3, r1
 800976e:	4927      	ldr	r1, [pc, #156]	; (800980c <_strtod_l+0x58c>)
 8009770:	4680      	mov	r8, r0
 8009772:	428b      	cmp	r3, r1
 8009774:	d8be      	bhi.n	80096f4 <_strtod_l+0x474>
 8009776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800977a:	428b      	cmp	r3, r1
 800977c:	bf86      	itte	hi
 800977e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009782:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009810 <_strtod_l+0x590>
 8009786:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800978a:	2300      	movs	r3, #0
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	e07b      	b.n	8009888 <_strtod_l+0x608>
 8009790:	07ea      	lsls	r2, r5, #31
 8009792:	d505      	bpl.n	80097a0 <_strtod_l+0x520>
 8009794:	9b05      	ldr	r3, [sp, #20]
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fe9d 	bl	80004d8 <__aeabi_dmul>
 800979e:	2301      	movs	r3, #1
 80097a0:	9a05      	ldr	r2, [sp, #20]
 80097a2:	f10a 0a01 	add.w	sl, sl, #1
 80097a6:	3208      	adds	r2, #8
 80097a8:	106d      	asrs	r5, r5, #1
 80097aa:	9205      	str	r2, [sp, #20]
 80097ac:	e7cc      	b.n	8009748 <_strtod_l+0x4c8>
 80097ae:	d0ec      	beq.n	800978a <_strtod_l+0x50a>
 80097b0:	426d      	negs	r5, r5
 80097b2:	f015 020f 	ands.w	r2, r5, #15
 80097b6:	d00a      	beq.n	80097ce <_strtod_l+0x54e>
 80097b8:	4b12      	ldr	r3, [pc, #72]	; (8009804 <_strtod_l+0x584>)
 80097ba:	4640      	mov	r0, r8
 80097bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c0:	4649      	mov	r1, r9
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 ffb1 	bl	800072c <__aeabi_ddiv>
 80097ca:	4680      	mov	r8, r0
 80097cc:	4689      	mov	r9, r1
 80097ce:	112d      	asrs	r5, r5, #4
 80097d0:	d0db      	beq.n	800978a <_strtod_l+0x50a>
 80097d2:	2d1f      	cmp	r5, #31
 80097d4:	dd1e      	ble.n	8009814 <_strtod_l+0x594>
 80097d6:	2600      	movs	r6, #0
 80097d8:	46b3      	mov	fp, r6
 80097da:	960b      	str	r6, [sp, #44]	; 0x2c
 80097dc:	9608      	str	r6, [sp, #32]
 80097de:	2322      	movs	r3, #34	; 0x22
 80097e0:	f04f 0800 	mov.w	r8, #0
 80097e4:	f04f 0900 	mov.w	r9, #0
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	e78d      	b.n	8009708 <_strtod_l+0x488>
 80097ec:	0800b333 	.word	0x0800b333
 80097f0:	0800b55c 	.word	0x0800b55c
 80097f4:	0800b32b 	.word	0x0800b32b
 80097f8:	0800b362 	.word	0x0800b362
 80097fc:	7ff00000 	.word	0x7ff00000
 8009800:	0800b6ed 	.word	0x0800b6ed
 8009804:	0800b470 	.word	0x0800b470
 8009808:	0800b448 	.word	0x0800b448
 800980c:	7ca00000 	.word	0x7ca00000
 8009810:	7fefffff 	.word	0x7fefffff
 8009814:	f015 0310 	ands.w	r3, r5, #16
 8009818:	bf18      	it	ne
 800981a:	236a      	movne	r3, #106	; 0x6a
 800981c:	4640      	mov	r0, r8
 800981e:	9305      	str	r3, [sp, #20]
 8009820:	4649      	mov	r1, r9
 8009822:	2300      	movs	r3, #0
 8009824:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009af0 <_strtod_l+0x870>
 8009828:	07ea      	lsls	r2, r5, #31
 800982a:	d504      	bpl.n	8009836 <_strtod_l+0x5b6>
 800982c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009830:	f7f6 fe52 	bl	80004d8 <__aeabi_dmul>
 8009834:	2301      	movs	r3, #1
 8009836:	106d      	asrs	r5, r5, #1
 8009838:	f10a 0a08 	add.w	sl, sl, #8
 800983c:	d1f4      	bne.n	8009828 <_strtod_l+0x5a8>
 800983e:	b10b      	cbz	r3, 8009844 <_strtod_l+0x5c4>
 8009840:	4680      	mov	r8, r0
 8009842:	4689      	mov	r9, r1
 8009844:	9b05      	ldr	r3, [sp, #20]
 8009846:	b1bb      	cbz	r3, 8009878 <_strtod_l+0x5f8>
 8009848:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800984c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009850:	2b00      	cmp	r3, #0
 8009852:	4649      	mov	r1, r9
 8009854:	dd10      	ble.n	8009878 <_strtod_l+0x5f8>
 8009856:	2b1f      	cmp	r3, #31
 8009858:	f340 8128 	ble.w	8009aac <_strtod_l+0x82c>
 800985c:	2b34      	cmp	r3, #52	; 0x34
 800985e:	bfd8      	it	le
 8009860:	f04f 33ff 	movle.w	r3, #4294967295
 8009864:	f04f 0800 	mov.w	r8, #0
 8009868:	bfcf      	iteee	gt
 800986a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800986e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009872:	4093      	lslle	r3, r2
 8009874:	ea03 0901 	andle.w	r9, r3, r1
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f7 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8009884:	2800      	cmp	r0, #0
 8009886:	d1a6      	bne.n	80097d6 <_strtod_l+0x556>
 8009888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988a:	465a      	mov	r2, fp
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4620      	mov	r0, r4
 8009890:	4633      	mov	r3, r6
 8009892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009894:	f7ff f8dc 	bl	8008a50 <__s2b>
 8009898:	900b      	str	r0, [sp, #44]	; 0x2c
 800989a:	2800      	cmp	r0, #0
 800989c:	f43f af2a 	beq.w	80096f4 <_strtod_l+0x474>
 80098a0:	2600      	movs	r6, #0
 80098a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	eba3 0307 	sub.w	r3, r3, r7
 80098ac:	bfa8      	it	ge
 80098ae:	2300      	movge	r3, #0
 80098b0:	46b3      	mov	fp, r6
 80098b2:	9312      	str	r3, [sp, #72]	; 0x48
 80098b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098b8:	9316      	str	r3, [sp, #88]	; 0x58
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	4620      	mov	r0, r4
 80098be:	6859      	ldr	r1, [r3, #4]
 80098c0:	f7ff f81e 	bl	8008900 <_Balloc>
 80098c4:	9008      	str	r0, [sp, #32]
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f43f af18 	beq.w	80096fc <_strtod_l+0x47c>
 80098cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ce:	300c      	adds	r0, #12
 80098d0:	691a      	ldr	r2, [r3, #16]
 80098d2:	f103 010c 	add.w	r1, r3, #12
 80098d6:	3202      	adds	r2, #2
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	f7fe f894 	bl	8007a06 <memcpy>
 80098de:	ab1c      	add	r3, sp, #112	; 0x70
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	ab1b      	add	r3, sp, #108	; 0x6c
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4642      	mov	r2, r8
 80098e8:	464b      	mov	r3, r9
 80098ea:	4620      	mov	r0, r4
 80098ec:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80098f0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80098f4:	f7ff fbd8 	bl	80090a8 <__d2b>
 80098f8:	901a      	str	r0, [sp, #104]	; 0x68
 80098fa:	2800      	cmp	r0, #0
 80098fc:	f43f aefe 	beq.w	80096fc <_strtod_l+0x47c>
 8009900:	2101      	movs	r1, #1
 8009902:	4620      	mov	r0, r4
 8009904:	f7ff f93c 	bl	8008b80 <__i2b>
 8009908:	4683      	mov	fp, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	f43f aef6 	beq.w	80096fc <_strtod_l+0x47c>
 8009910:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009912:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009914:	2f00      	cmp	r7, #0
 8009916:	bfab      	itete	ge
 8009918:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800991a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800991c:	eb07 0a03 	addge.w	sl, r7, r3
 8009920:	1bdd      	sublt	r5, r3, r7
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	bfa8      	it	ge
 8009926:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009928:	eba7 0703 	sub.w	r7, r7, r3
 800992c:	4417      	add	r7, r2
 800992e:	4b71      	ldr	r3, [pc, #452]	; (8009af4 <_strtod_l+0x874>)
 8009930:	f107 37ff 	add.w	r7, r7, #4294967295
 8009934:	bfb8      	it	lt
 8009936:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800993a:	429f      	cmp	r7, r3
 800993c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009940:	f280 80c7 	bge.w	8009ad2 <_strtod_l+0x852>
 8009944:	1bdb      	subs	r3, r3, r7
 8009946:	2b1f      	cmp	r3, #31
 8009948:	f04f 0101 	mov.w	r1, #1
 800994c:	eba2 0203 	sub.w	r2, r2, r3
 8009950:	f300 80b3 	bgt.w	8009aba <_strtod_l+0x83a>
 8009954:	fa01 f303 	lsl.w	r3, r1, r3
 8009958:	9313      	str	r3, [sp, #76]	; 0x4c
 800995a:	2300      	movs	r3, #0
 800995c:	9310      	str	r3, [sp, #64]	; 0x40
 800995e:	eb0a 0702 	add.w	r7, sl, r2
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	45ba      	cmp	sl, r7
 8009966:	4415      	add	r5, r2
 8009968:	441d      	add	r5, r3
 800996a:	4653      	mov	r3, sl
 800996c:	bfa8      	it	ge
 800996e:	463b      	movge	r3, r7
 8009970:	42ab      	cmp	r3, r5
 8009972:	bfa8      	it	ge
 8009974:	462b      	movge	r3, r5
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfc2      	ittt	gt
 800997a:	1aff      	subgt	r7, r7, r3
 800997c:	1aed      	subgt	r5, r5, r3
 800997e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd17      	ble.n	80099b8 <_strtod_l+0x738>
 8009988:	4659      	mov	r1, fp
 800998a:	461a      	mov	r2, r3
 800998c:	4620      	mov	r0, r4
 800998e:	f7ff f9b5 	bl	8008cfc <__pow5mult>
 8009992:	4683      	mov	fp, r0
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f aeb1 	beq.w	80096fc <_strtod_l+0x47c>
 800999a:	4601      	mov	r1, r0
 800999c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff f904 	bl	8008bac <__multiply>
 80099a4:	900a      	str	r0, [sp, #40]	; 0x28
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f43f aea8 	beq.w	80096fc <_strtod_l+0x47c>
 80099ac:	4620      	mov	r0, r4
 80099ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099b0:	f7fe ffe6 	bl	8008980 <_Bfree>
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	931a      	str	r3, [sp, #104]	; 0x68
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	f300 808f 	bgt.w	8009adc <_strtod_l+0x85c>
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dd08      	ble.n	80099d6 <_strtod_l+0x756>
 80099c4:	4620      	mov	r0, r4
 80099c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099c8:	9908      	ldr	r1, [sp, #32]
 80099ca:	f7ff f997 	bl	8008cfc <__pow5mult>
 80099ce:	9008      	str	r0, [sp, #32]
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f ae93 	beq.w	80096fc <_strtod_l+0x47c>
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	dd08      	ble.n	80099ec <_strtod_l+0x76c>
 80099da:	462a      	mov	r2, r5
 80099dc:	4620      	mov	r0, r4
 80099de:	9908      	ldr	r1, [sp, #32]
 80099e0:	f7ff f9e6 	bl	8008db0 <__lshift>
 80099e4:	9008      	str	r0, [sp, #32]
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae88 	beq.w	80096fc <_strtod_l+0x47c>
 80099ec:	f1ba 0f00 	cmp.w	sl, #0
 80099f0:	dd08      	ble.n	8009a04 <_strtod_l+0x784>
 80099f2:	4659      	mov	r1, fp
 80099f4:	4652      	mov	r2, sl
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff f9da 	bl	8008db0 <__lshift>
 80099fc:	4683      	mov	fp, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f ae7c 	beq.w	80096fc <_strtod_l+0x47c>
 8009a04:	4620      	mov	r0, r4
 8009a06:	9a08      	ldr	r2, [sp, #32]
 8009a08:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a0a:	f7ff fa59 	bl	8008ec0 <__mdiff>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f43f ae73 	beq.w	80096fc <_strtod_l+0x47c>
 8009a16:	2500      	movs	r5, #0
 8009a18:	68c3      	ldr	r3, [r0, #12]
 8009a1a:	4659      	mov	r1, fp
 8009a1c:	60c5      	str	r5, [r0, #12]
 8009a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a20:	f7ff fa32 	bl	8008e88 <__mcmp>
 8009a24:	42a8      	cmp	r0, r5
 8009a26:	da6b      	bge.n	8009b00 <_strtod_l+0x880>
 8009a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8009a2e:	f040 808f 	bne.w	8009b50 <_strtod_l+0x8d0>
 8009a32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f040 808a 	bne.w	8009b50 <_strtod_l+0x8d0>
 8009a3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a40:	0d1b      	lsrs	r3, r3, #20
 8009a42:	051b      	lsls	r3, r3, #20
 8009a44:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a48:	f240 8082 	bls.w	8009b50 <_strtod_l+0x8d0>
 8009a4c:	6973      	ldr	r3, [r6, #20]
 8009a4e:	b913      	cbnz	r3, 8009a56 <_strtod_l+0x7d6>
 8009a50:	6933      	ldr	r3, [r6, #16]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	dd7c      	ble.n	8009b50 <_strtod_l+0x8d0>
 8009a56:	4631      	mov	r1, r6
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff f9a8 	bl	8008db0 <__lshift>
 8009a60:	4659      	mov	r1, fp
 8009a62:	4606      	mov	r6, r0
 8009a64:	f7ff fa10 	bl	8008e88 <__mcmp>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	dd71      	ble.n	8009b50 <_strtod_l+0x8d0>
 8009a6c:	9905      	ldr	r1, [sp, #20]
 8009a6e:	464b      	mov	r3, r9
 8009a70:	4a21      	ldr	r2, [pc, #132]	; (8009af8 <_strtod_l+0x878>)
 8009a72:	2900      	cmp	r1, #0
 8009a74:	f000 808d 	beq.w	8009b92 <_strtod_l+0x912>
 8009a78:	ea02 0109 	and.w	r1, r2, r9
 8009a7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a80:	f300 8087 	bgt.w	8009b92 <_strtod_l+0x912>
 8009a84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a88:	f77f aea9 	ble.w	80097de <_strtod_l+0x55e>
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <_strtod_l+0x87c>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <_strtod_l+0x878>)
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	400b      	ands	r3, r1
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f47f ae35 	bne.w	8009710 <_strtod_l+0x490>
 8009aa6:	2322      	movs	r3, #34	; 0x22
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	e631      	b.n	8009710 <_strtod_l+0x490>
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	ea03 0808 	and.w	r8, r3, r8
 8009ab8:	e6de      	b.n	8009878 <_strtod_l+0x5f8>
 8009aba:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009abe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009ac2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009ac6:	37e2      	adds	r7, #226	; 0xe2
 8009ac8:	fa01 f307 	lsl.w	r3, r1, r7
 8009acc:	9310      	str	r3, [sp, #64]	; 0x40
 8009ace:	9113      	str	r1, [sp, #76]	; 0x4c
 8009ad0:	e745      	b.n	800995e <_strtod_l+0x6de>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ada:	e740      	b.n	800995e <_strtod_l+0x6de>
 8009adc:	463a      	mov	r2, r7
 8009ade:	4620      	mov	r0, r4
 8009ae0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ae2:	f7ff f965 	bl	8008db0 <__lshift>
 8009ae6:	901a      	str	r0, [sp, #104]	; 0x68
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f47f af68 	bne.w	80099be <_strtod_l+0x73e>
 8009aee:	e605      	b.n	80096fc <_strtod_l+0x47c>
 8009af0:	0800b570 	.word	0x0800b570
 8009af4:	fffffc02 	.word	0xfffffc02
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	39500000 	.word	0x39500000
 8009b00:	46ca      	mov	sl, r9
 8009b02:	d165      	bne.n	8009bd0 <_strtod_l+0x950>
 8009b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b0a:	b352      	cbz	r2, 8009b62 <_strtod_l+0x8e2>
 8009b0c:	4a9e      	ldr	r2, [pc, #632]	; (8009d88 <_strtod_l+0xb08>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d12a      	bne.n	8009b68 <_strtod_l+0x8e8>
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	4641      	mov	r1, r8
 8009b16:	b1fb      	cbz	r3, 8009b58 <_strtod_l+0x8d8>
 8009b18:	4b9c      	ldr	r3, [pc, #624]	; (8009d8c <_strtod_l+0xb0c>)
 8009b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1e:	ea09 0303 	and.w	r3, r9, r3
 8009b22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b26:	d81a      	bhi.n	8009b5e <_strtod_l+0x8de>
 8009b28:	0d1b      	lsrs	r3, r3, #20
 8009b2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d118      	bne.n	8009b68 <_strtod_l+0x8e8>
 8009b36:	4b96      	ldr	r3, [pc, #600]	; (8009d90 <_strtod_l+0xb10>)
 8009b38:	459a      	cmp	sl, r3
 8009b3a:	d102      	bne.n	8009b42 <_strtod_l+0x8c2>
 8009b3c:	3101      	adds	r1, #1
 8009b3e:	f43f addd 	beq.w	80096fc <_strtod_l+0x47c>
 8009b42:	f04f 0800 	mov.w	r8, #0
 8009b46:	4b91      	ldr	r3, [pc, #580]	; (8009d8c <_strtod_l+0xb0c>)
 8009b48:	ea0a 0303 	and.w	r3, sl, r3
 8009b4c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009b50:	9b05      	ldr	r3, [sp, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d19a      	bne.n	8009a8c <_strtod_l+0x80c>
 8009b56:	e5db      	b.n	8009710 <_strtod_l+0x490>
 8009b58:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5c:	e7e9      	b.n	8009b32 <_strtod_l+0x8b2>
 8009b5e:	4613      	mov	r3, r2
 8009b60:	e7e7      	b.n	8009b32 <_strtod_l+0x8b2>
 8009b62:	ea53 0308 	orrs.w	r3, r3, r8
 8009b66:	d081      	beq.n	8009a6c <_strtod_l+0x7ec>
 8009b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b6a:	b1e3      	cbz	r3, 8009ba6 <_strtod_l+0x926>
 8009b6c:	ea13 0f0a 	tst.w	r3, sl
 8009b70:	d0ee      	beq.n	8009b50 <_strtod_l+0x8d0>
 8009b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b74:	4640      	mov	r0, r8
 8009b76:	4649      	mov	r1, r9
 8009b78:	9a05      	ldr	r2, [sp, #20]
 8009b7a:	b1c3      	cbz	r3, 8009bae <_strtod_l+0x92e>
 8009b7c:	f7ff fb5c 	bl	8009238 <sulp>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b88:	f7f6 faf0 	bl	800016c <__adddf3>
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	e7de      	b.n	8009b50 <_strtod_l+0x8d0>
 8009b92:	4013      	ands	r3, r2
 8009b94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009b9c:	f04f 38ff 	mov.w	r8, #4294967295
 8009ba0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ba4:	e7d4      	b.n	8009b50 <_strtod_l+0x8d0>
 8009ba6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ba8:	ea13 0f08 	tst.w	r3, r8
 8009bac:	e7e0      	b.n	8009b70 <_strtod_l+0x8f0>
 8009bae:	f7ff fb43 	bl	8009238 <sulp>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bba:	f7f6 fad5 	bl	8000168 <__aeabi_dsub>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	4689      	mov	r9, r1
 8009bc6:	f7f6 feef 	bl	80009a8 <__aeabi_dcmpeq>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d0c0      	beq.n	8009b50 <_strtod_l+0x8d0>
 8009bce:	e606      	b.n	80097de <_strtod_l+0x55e>
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff fabe 	bl	8009154 <__ratio>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009be0:	2200      	movs	r2, #0
 8009be2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009be6:	f7f6 fef3 	bl	80009d0 <__aeabi_dcmple>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d06f      	beq.n	8009cce <_strtod_l+0xa4e>
 8009bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d17c      	bne.n	8009cee <_strtod_l+0xa6e>
 8009bf4:	f1b8 0f00 	cmp.w	r8, #0
 8009bf8:	d159      	bne.n	8009cae <_strtod_l+0xa2e>
 8009bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d17b      	bne.n	8009cfa <_strtod_l+0xa7a>
 8009c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c06:	2200      	movs	r2, #0
 8009c08:	4b62      	ldr	r3, [pc, #392]	; (8009d94 <_strtod_l+0xb14>)
 8009c0a:	f7f6 fed7 	bl	80009bc <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d15a      	bne.n	8009cc8 <_strtod_l+0xa48>
 8009c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c16:	2200      	movs	r2, #0
 8009c18:	4b5f      	ldr	r3, [pc, #380]	; (8009d98 <_strtod_l+0xb18>)
 8009c1a:	f7f6 fc5d 	bl	80004d8 <__aeabi_dmul>
 8009c1e:	4605      	mov	r5, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009c26:	9506      	str	r5, [sp, #24]
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009c32:	4b56      	ldr	r3, [pc, #344]	; (8009d8c <_strtod_l+0xb0c>)
 8009c34:	4a55      	ldr	r2, [pc, #340]	; (8009d8c <_strtod_l+0xb0c>)
 8009c36:	ea0a 0303 	and.w	r3, sl, r3
 8009c3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c3c:	4b57      	ldr	r3, [pc, #348]	; (8009d9c <_strtod_l+0xb1c>)
 8009c3e:	ea0a 0202 	and.w	r2, sl, r2
 8009c42:	429a      	cmp	r2, r3
 8009c44:	f040 80b0 	bne.w	8009da8 <_strtod_l+0xb28>
 8009c48:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7ff f9c2 	bl	8008fd8 <__ulp>
 8009c54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c58:	f7f6 fc3e 	bl	80004d8 <__aeabi_dmul>
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	f7f6 fa84 	bl	800016c <__adddf3>
 8009c64:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009d8c <_strtod_l+0xb0c>
 8009c68:	4a4d      	ldr	r2, [pc, #308]	; (8009da0 <_strtod_l+0xb20>)
 8009c6a:	ea01 0a0a 	and.w	sl, r1, sl
 8009c6e:	4592      	cmp	sl, r2
 8009c70:	4680      	mov	r8, r0
 8009c72:	d948      	bls.n	8009d06 <_strtod_l+0xa86>
 8009c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c76:	4b46      	ldr	r3, [pc, #280]	; (8009d90 <_strtod_l+0xb10>)
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d103      	bne.n	8009c84 <_strtod_l+0xa04>
 8009c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f43f ad3c 	beq.w	80096fc <_strtod_l+0x47c>
 8009c84:	f04f 38ff 	mov.w	r8, #4294967295
 8009c88:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009d90 <_strtod_l+0xb10>
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c90:	f7fe fe76 	bl	8008980 <_Bfree>
 8009c94:	4620      	mov	r0, r4
 8009c96:	9908      	ldr	r1, [sp, #32]
 8009c98:	f7fe fe72 	bl	8008980 <_Bfree>
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7fe fe6e 	bl	8008980 <_Bfree>
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7fe fe6a 	bl	8008980 <_Bfree>
 8009cac:	e605      	b.n	80098ba <_strtod_l+0x63a>
 8009cae:	f1b8 0f01 	cmp.w	r8, #1
 8009cb2:	d103      	bne.n	8009cbc <_strtod_l+0xa3c>
 8009cb4:	f1b9 0f00 	cmp.w	r9, #0
 8009cb8:	f43f ad91 	beq.w	80097de <_strtod_l+0x55e>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <_strtod_l+0xb24>)
 8009cc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cc6:	e016      	b.n	8009cf6 <_strtod_l+0xa76>
 8009cc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009cca:	4f33      	ldr	r7, [pc, #204]	; (8009d98 <_strtod_l+0xb18>)
 8009ccc:	e7a9      	b.n	8009c22 <_strtod_l+0x9a2>
 8009cce:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <_strtod_l+0xb18>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cd6:	f7f6 fbff 	bl	80004d8 <__aeabi_dmul>
 8009cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cdc:	4605      	mov	r5, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d09e      	beq.n	8009c22 <_strtod_l+0x9a2>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cec:	e79d      	b.n	8009c2a <_strtod_l+0x9aa>
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <_strtod_l+0xb14>)
 8009cf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cf6:	4f27      	ldr	r7, [pc, #156]	; (8009d94 <_strtod_l+0xb14>)
 8009cf8:	e797      	b.n	8009c2a <_strtod_l+0x9aa>
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <_strtod_l+0xb24>)
 8009cfe:	4645      	mov	r5, r8
 8009d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d04:	e7f7      	b.n	8009cf6 <_strtod_l+0xa76>
 8009d06:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009d0a:	9b05      	ldr	r3, [sp, #20]
 8009d0c:	46ca      	mov	sl, r9
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1bc      	bne.n	8009c8c <_strtod_l+0xa0c>
 8009d12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d18:	0d1b      	lsrs	r3, r3, #20
 8009d1a:	051b      	lsls	r3, r3, #20
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d1b5      	bne.n	8009c8c <_strtod_l+0xa0c>
 8009d20:	4628      	mov	r0, r5
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f7 fa14 	bl	8001150 <__aeabi_d2lz>
 8009d28:	f7f6 fba8 	bl	800047c <__aeabi_l2d>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4628      	mov	r0, r5
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fa18 	bl	8000168 <__aeabi_dsub>
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009d40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d46:	ea4a 0a08 	orr.w	sl, sl, r8
 8009d4a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009d4e:	d06c      	beq.n	8009e2a <_strtod_l+0xbaa>
 8009d50:	a309      	add	r3, pc, #36	; (adr r3, 8009d78 <_strtod_l+0xaf8>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fe31 	bl	80009bc <__aeabi_dcmplt>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f47f acd8 	bne.w	8009710 <_strtod_l+0x490>
 8009d60:	a307      	add	r3, pc, #28	; (adr r3, 8009d80 <_strtod_l+0xb00>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d6a:	f7f6 fe45 	bl	80009f8 <__aeabi_dcmpgt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d08c      	beq.n	8009c8c <_strtod_l+0xa0c>
 8009d72:	e4cd      	b.n	8009710 <_strtod_l+0x490>
 8009d74:	f3af 8000 	nop.w
 8009d78:	94a03595 	.word	0x94a03595
 8009d7c:	3fdfffff 	.word	0x3fdfffff
 8009d80:	35afe535 	.word	0x35afe535
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	000fffff 	.word	0x000fffff
 8009d8c:	7ff00000 	.word	0x7ff00000
 8009d90:	7fefffff 	.word	0x7fefffff
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	3fe00000 	.word	0x3fe00000
 8009d9c:	7fe00000 	.word	0x7fe00000
 8009da0:	7c9fffff 	.word	0x7c9fffff
 8009da4:	bff00000 	.word	0xbff00000
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	b333      	cbz	r3, 8009dfa <_strtod_l+0xb7a>
 8009dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009db2:	d822      	bhi.n	8009dfa <_strtod_l+0xb7a>
 8009db4:	a328      	add	r3, pc, #160	; (adr r3, 8009e58 <_strtod_l+0xbd8>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	4628      	mov	r0, r5
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7f6 fe07 	bl	80009d0 <__aeabi_dcmple>
 8009dc2:	b1a0      	cbz	r0, 8009dee <_strtod_l+0xb6e>
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fe5e 	bl	8000a88 <__aeabi_d2uiz>
 8009dcc:	2801      	cmp	r0, #1
 8009dce:	bf38      	it	cc
 8009dd0:	2001      	movcc	r0, #1
 8009dd2:	f7f6 fb07 	bl	80003e4 <__aeabi_ui2d>
 8009dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460f      	mov	r7, r1
 8009ddc:	bb03      	cbnz	r3, 8009e20 <_strtod_l+0xba0>
 8009dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de2:	9014      	str	r0, [sp, #80]	; 0x50
 8009de4:	9315      	str	r3, [sp, #84]	; 0x54
 8009de6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009dea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009df0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009df2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	9311      	str	r3, [sp, #68]	; 0x44
 8009dfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009dfe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009e02:	f7ff f8e9 	bl	8008fd8 <__ulp>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fb63 	bl	80004d8 <__aeabi_dmul>
 8009e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e16:	f7f6 f9a9 	bl	800016c <__adddf3>
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	e774      	b.n	8009d0a <_strtod_l+0xa8a>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009e28:	e7dd      	b.n	8009de6 <_strtod_l+0xb66>
 8009e2a:	a30d      	add	r3, pc, #52	; (adr r3, 8009e60 <_strtod_l+0xbe0>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fdc4 	bl	80009bc <__aeabi_dcmplt>
 8009e34:	e79b      	b.n	8009d6e <_strtod_l+0xaee>
 8009e36:	2300      	movs	r3, #0
 8009e38:	930e      	str	r3, [sp, #56]	; 0x38
 8009e3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	f7ff ba5b 	b.w	80092fa <_strtod_l+0x7a>
 8009e44:	2a65      	cmp	r2, #101	; 0x65
 8009e46:	f43f ab52 	beq.w	80094ee <_strtod_l+0x26e>
 8009e4a:	2a45      	cmp	r2, #69	; 0x45
 8009e4c:	f43f ab4f 	beq.w	80094ee <_strtod_l+0x26e>
 8009e50:	2301      	movs	r3, #1
 8009e52:	f7ff bb87 	b.w	8009564 <_strtod_l+0x2e4>
 8009e56:	bf00      	nop
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff

08009e68 <_strtod_r>:
 8009e68:	4b01      	ldr	r3, [pc, #4]	; (8009e70 <_strtod_r+0x8>)
 8009e6a:	f7ff ba09 	b.w	8009280 <_strtod_l>
 8009e6e:	bf00      	nop
 8009e70:	2000006c 	.word	0x2000006c

08009e74 <_strtol_l.constprop.0>:
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7a:	4686      	mov	lr, r0
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	d001      	beq.n	8009e84 <_strtol_l.constprop.0+0x10>
 8009e80:	2b24      	cmp	r3, #36	; 0x24
 8009e82:	d906      	bls.n	8009e92 <_strtol_l.constprop.0+0x1e>
 8009e84:	f7fd fd84 	bl	8007990 <__errno>
 8009e88:	2316      	movs	r3, #22
 8009e8a:	6003      	str	r3, [r0, #0]
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	460d      	mov	r5, r1
 8009e94:	4835      	ldr	r0, [pc, #212]	; (8009f6c <_strtol_l.constprop.0+0xf8>)
 8009e96:	462a      	mov	r2, r5
 8009e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9c:	5d06      	ldrb	r6, [r0, r4]
 8009e9e:	f016 0608 	ands.w	r6, r6, #8
 8009ea2:	d1f8      	bne.n	8009e96 <_strtol_l.constprop.0+0x22>
 8009ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8009ea6:	d12e      	bne.n	8009f06 <_strtol_l.constprop.0+0x92>
 8009ea8:	2601      	movs	r6, #1
 8009eaa:	782c      	ldrb	r4, [r5, #0]
 8009eac:	1c95      	adds	r5, r2, #2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d057      	beq.n	8009f62 <_strtol_l.constprop.0+0xee>
 8009eb2:	2b10      	cmp	r3, #16
 8009eb4:	d109      	bne.n	8009eca <_strtol_l.constprop.0+0x56>
 8009eb6:	2c30      	cmp	r4, #48	; 0x30
 8009eb8:	d107      	bne.n	8009eca <_strtol_l.constprop.0+0x56>
 8009eba:	782a      	ldrb	r2, [r5, #0]
 8009ebc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ec0:	2a58      	cmp	r2, #88	; 0x58
 8009ec2:	d149      	bne.n	8009f58 <_strtol_l.constprop.0+0xe4>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	786c      	ldrb	r4, [r5, #1]
 8009ec8:	3502      	adds	r5, #2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009ed0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ed4:	fbbc f9f3 	udiv	r9, ip, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ede:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009ee2:	2f09      	cmp	r7, #9
 8009ee4:	d814      	bhi.n	8009f10 <_strtol_l.constprop.0+0x9c>
 8009ee6:	463c      	mov	r4, r7
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	dd20      	ble.n	8009f2e <_strtol_l.constprop.0+0xba>
 8009eec:	1c57      	adds	r7, r2, #1
 8009eee:	d007      	beq.n	8009f00 <_strtol_l.constprop.0+0x8c>
 8009ef0:	4581      	cmp	r9, r0
 8009ef2:	d319      	bcc.n	8009f28 <_strtol_l.constprop.0+0xb4>
 8009ef4:	d101      	bne.n	8009efa <_strtol_l.constprop.0+0x86>
 8009ef6:	45a2      	cmp	sl, r4
 8009ef8:	db16      	blt.n	8009f28 <_strtol_l.constprop.0+0xb4>
 8009efa:	2201      	movs	r2, #1
 8009efc:	fb00 4003 	mla	r0, r0, r3, r4
 8009f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f04:	e7eb      	b.n	8009ede <_strtol_l.constprop.0+0x6a>
 8009f06:	2c2b      	cmp	r4, #43	; 0x2b
 8009f08:	bf04      	itt	eq
 8009f0a:	782c      	ldrbeq	r4, [r5, #0]
 8009f0c:	1c95      	addeq	r5, r2, #2
 8009f0e:	e7ce      	b.n	8009eae <_strtol_l.constprop.0+0x3a>
 8009f10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009f14:	2f19      	cmp	r7, #25
 8009f16:	d801      	bhi.n	8009f1c <_strtol_l.constprop.0+0xa8>
 8009f18:	3c37      	subs	r4, #55	; 0x37
 8009f1a:	e7e5      	b.n	8009ee8 <_strtol_l.constprop.0+0x74>
 8009f1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009f20:	2f19      	cmp	r7, #25
 8009f22:	d804      	bhi.n	8009f2e <_strtol_l.constprop.0+0xba>
 8009f24:	3c57      	subs	r4, #87	; 0x57
 8009f26:	e7df      	b.n	8009ee8 <_strtol_l.constprop.0+0x74>
 8009f28:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2c:	e7e8      	b.n	8009f00 <_strtol_l.constprop.0+0x8c>
 8009f2e:	1c53      	adds	r3, r2, #1
 8009f30:	d108      	bne.n	8009f44 <_strtol_l.constprop.0+0xd0>
 8009f32:	2322      	movs	r3, #34	; 0x22
 8009f34:	4660      	mov	r0, ip
 8009f36:	f8ce 3000 	str.w	r3, [lr]
 8009f3a:	f1b8 0f00 	cmp.w	r8, #0
 8009f3e:	d0a6      	beq.n	8009e8e <_strtol_l.constprop.0+0x1a>
 8009f40:	1e69      	subs	r1, r5, #1
 8009f42:	e006      	b.n	8009f52 <_strtol_l.constprop.0+0xde>
 8009f44:	b106      	cbz	r6, 8009f48 <_strtol_l.constprop.0+0xd4>
 8009f46:	4240      	negs	r0, r0
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	d09f      	beq.n	8009e8e <_strtol_l.constprop.0+0x1a>
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d1f6      	bne.n	8009f40 <_strtol_l.constprop.0+0xcc>
 8009f52:	f8c8 1000 	str.w	r1, [r8]
 8009f56:	e79a      	b.n	8009e8e <_strtol_l.constprop.0+0x1a>
 8009f58:	2430      	movs	r4, #48	; 0x30
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1b5      	bne.n	8009eca <_strtol_l.constprop.0+0x56>
 8009f5e:	2308      	movs	r3, #8
 8009f60:	e7b3      	b.n	8009eca <_strtol_l.constprop.0+0x56>
 8009f62:	2c30      	cmp	r4, #48	; 0x30
 8009f64:	d0a9      	beq.n	8009eba <_strtol_l.constprop.0+0x46>
 8009f66:	230a      	movs	r3, #10
 8009f68:	e7af      	b.n	8009eca <_strtol_l.constprop.0+0x56>
 8009f6a:	bf00      	nop
 8009f6c:	0800b599 	.word	0x0800b599

08009f70 <_strtol_r>:
 8009f70:	f7ff bf80 	b.w	8009e74 <_strtol_l.constprop.0>

08009f74 <__ssputs_r>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	461f      	mov	r7, r3
 8009f7a:	688e      	ldr	r6, [r1, #8]
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	42be      	cmp	r6, r7
 8009f80:	460c      	mov	r4, r1
 8009f82:	4690      	mov	r8, r2
 8009f84:	680b      	ldr	r3, [r1, #0]
 8009f86:	d82c      	bhi.n	8009fe2 <__ssputs_r+0x6e>
 8009f88:	898a      	ldrh	r2, [r1, #12]
 8009f8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f8e:	d026      	beq.n	8009fde <__ssputs_r+0x6a>
 8009f90:	6965      	ldr	r5, [r4, #20]
 8009f92:	6909      	ldr	r1, [r1, #16]
 8009f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f98:	eba3 0901 	sub.w	r9, r3, r1
 8009f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa0:	1c7b      	adds	r3, r7, #1
 8009fa2:	444b      	add	r3, r9
 8009fa4:	106d      	asrs	r5, r5, #1
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	bf38      	it	cc
 8009faa:	461d      	movcc	r5, r3
 8009fac:	0553      	lsls	r3, r2, #21
 8009fae:	d527      	bpl.n	800a000 <__ssputs_r+0x8c>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7fe fc19 	bl	80087e8 <_malloc_r>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	b360      	cbz	r0, 800a014 <__ssputs_r+0xa0>
 8009fba:	464a      	mov	r2, r9
 8009fbc:	6921      	ldr	r1, [r4, #16]
 8009fbe:	f7fd fd22 	bl	8007a06 <memcpy>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	6126      	str	r6, [r4, #16]
 8009fd0:	444e      	add	r6, r9
 8009fd2:	6026      	str	r6, [r4, #0]
 8009fd4:	463e      	mov	r6, r7
 8009fd6:	6165      	str	r5, [r4, #20]
 8009fd8:	eba5 0509 	sub.w	r5, r5, r9
 8009fdc:	60a5      	str	r5, [r4, #8]
 8009fde:	42be      	cmp	r6, r7
 8009fe0:	d900      	bls.n	8009fe4 <__ssputs_r+0x70>
 8009fe2:	463e      	mov	r6, r7
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	6820      	ldr	r0, [r4, #0]
 8009fea:	f000 fb9c 	bl	800a726 <memmove>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	1b9b      	subs	r3, r3, r6
 8009ff4:	60a3      	str	r3, [r4, #8]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	4433      	add	r3, r6
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a000:	462a      	mov	r2, r5
 800a002:	f000 ff80 	bl	800af06 <_realloc_r>
 800a006:	4606      	mov	r6, r0
 800a008:	2800      	cmp	r0, #0
 800a00a:	d1e0      	bne.n	8009fce <__ssputs_r+0x5a>
 800a00c:	4650      	mov	r0, sl
 800a00e:	6921      	ldr	r1, [r4, #16]
 800a010:	f7fe fb7a 	bl	8008708 <_free_r>
 800a014:	230c      	movs	r3, #12
 800a016:	f8ca 3000 	str.w	r3, [sl]
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	e7e9      	b.n	8009ffc <__ssputs_r+0x88>

0800a028 <_svfiprintf_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4698      	mov	r8, r3
 800a02e:	898b      	ldrh	r3, [r1, #12]
 800a030:	4607      	mov	r7, r0
 800a032:	061b      	lsls	r3, r3, #24
 800a034:	460d      	mov	r5, r1
 800a036:	4614      	mov	r4, r2
 800a038:	b09d      	sub	sp, #116	; 0x74
 800a03a:	d50e      	bpl.n	800a05a <_svfiprintf_r+0x32>
 800a03c:	690b      	ldr	r3, [r1, #16]
 800a03e:	b963      	cbnz	r3, 800a05a <_svfiprintf_r+0x32>
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	f7fe fbd1 	bl	80087e8 <_malloc_r>
 800a046:	6028      	str	r0, [r5, #0]
 800a048:	6128      	str	r0, [r5, #16]
 800a04a:	b920      	cbnz	r0, 800a056 <_svfiprintf_r+0x2e>
 800a04c:	230c      	movs	r3, #12
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	e0d0      	b.n	800a1f8 <_svfiprintf_r+0x1d0>
 800a056:	2340      	movs	r3, #64	; 0x40
 800a058:	616b      	str	r3, [r5, #20]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9309      	str	r3, [sp, #36]	; 0x24
 800a05e:	2320      	movs	r3, #32
 800a060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a064:	2330      	movs	r3, #48	; 0x30
 800a066:	f04f 0901 	mov.w	r9, #1
 800a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a06e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a210 <_svfiprintf_r+0x1e8>
 800a072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a076:	4623      	mov	r3, r4
 800a078:	469a      	mov	sl, r3
 800a07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a07e:	b10a      	cbz	r2, 800a084 <_svfiprintf_r+0x5c>
 800a080:	2a25      	cmp	r2, #37	; 0x25
 800a082:	d1f9      	bne.n	800a078 <_svfiprintf_r+0x50>
 800a084:	ebba 0b04 	subs.w	fp, sl, r4
 800a088:	d00b      	beq.n	800a0a2 <_svfiprintf_r+0x7a>
 800a08a:	465b      	mov	r3, fp
 800a08c:	4622      	mov	r2, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ff6f 	bl	8009f74 <__ssputs_r>
 800a096:	3001      	adds	r0, #1
 800a098:	f000 80a9 	beq.w	800a1ee <_svfiprintf_r+0x1c6>
 800a09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a09e:	445a      	add	r2, fp
 800a0a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80a1 	beq.w	800a1ee <_svfiprintf_r+0x1c6>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0c4:	4654      	mov	r4, sl
 800a0c6:	2205      	movs	r2, #5
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	4850      	ldr	r0, [pc, #320]	; (800a210 <_svfiprintf_r+0x1e8>)
 800a0ce:	f7fd fc8c 	bl	80079ea <memchr>
 800a0d2:	9a04      	ldr	r2, [sp, #16]
 800a0d4:	b9d8      	cbnz	r0, 800a10e <_svfiprintf_r+0xe6>
 800a0d6:	06d0      	lsls	r0, r2, #27
 800a0d8:	bf44      	itt	mi
 800a0da:	2320      	movmi	r3, #32
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e0:	0711      	lsls	r1, r2, #28
 800a0e2:	bf44      	itt	mi
 800a0e4:	232b      	movmi	r3, #43	; 0x2b
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f0:	d015      	beq.n	800a11e <_svfiprintf_r+0xf6>
 800a0f2:	4654      	mov	r4, sl
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f04f 0c0a 	mov.w	ip, #10
 800a0fa:	9a07      	ldr	r2, [sp, #28]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a102:	3b30      	subs	r3, #48	; 0x30
 800a104:	2b09      	cmp	r3, #9
 800a106:	d94d      	bls.n	800a1a4 <_svfiprintf_r+0x17c>
 800a108:	b1b0      	cbz	r0, 800a138 <_svfiprintf_r+0x110>
 800a10a:	9207      	str	r2, [sp, #28]
 800a10c:	e014      	b.n	800a138 <_svfiprintf_r+0x110>
 800a10e:	eba0 0308 	sub.w	r3, r0, r8
 800a112:	fa09 f303 	lsl.w	r3, r9, r3
 800a116:	4313      	orrs	r3, r2
 800a118:	46a2      	mov	sl, r4
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	e7d2      	b.n	800a0c4 <_svfiprintf_r+0x9c>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	1d19      	adds	r1, r3, #4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	9103      	str	r1, [sp, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbb      	ittet	lt
 800a12a:	425b      	neglt	r3, r3
 800a12c:	f042 0202 	orrlt.w	r2, r2, #2
 800a130:	9307      	strge	r3, [sp, #28]
 800a132:	9307      	strlt	r3, [sp, #28]
 800a134:	bfb8      	it	lt
 800a136:	9204      	strlt	r2, [sp, #16]
 800a138:	7823      	ldrb	r3, [r4, #0]
 800a13a:	2b2e      	cmp	r3, #46	; 0x2e
 800a13c:	d10c      	bne.n	800a158 <_svfiprintf_r+0x130>
 800a13e:	7863      	ldrb	r3, [r4, #1]
 800a140:	2b2a      	cmp	r3, #42	; 0x2a
 800a142:	d134      	bne.n	800a1ae <_svfiprintf_r+0x186>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	3402      	adds	r4, #2
 800a148:	1d1a      	adds	r2, r3, #4
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	9203      	str	r2, [sp, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfb8      	it	lt
 800a152:	f04f 33ff 	movlt.w	r3, #4294967295
 800a156:	9305      	str	r3, [sp, #20]
 800a158:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a214 <_svfiprintf_r+0x1ec>
 800a15c:	2203      	movs	r2, #3
 800a15e:	4650      	mov	r0, sl
 800a160:	7821      	ldrb	r1, [r4, #0]
 800a162:	f7fd fc42 	bl	80079ea <memchr>
 800a166:	b138      	cbz	r0, 800a178 <_svfiprintf_r+0x150>
 800a168:	2240      	movs	r2, #64	; 0x40
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	eba0 000a 	sub.w	r0, r0, sl
 800a170:	4082      	lsls	r2, r0
 800a172:	4313      	orrs	r3, r2
 800a174:	3401      	adds	r4, #1
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17c:	2206      	movs	r2, #6
 800a17e:	4826      	ldr	r0, [pc, #152]	; (800a218 <_svfiprintf_r+0x1f0>)
 800a180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a184:	f7fd fc31 	bl	80079ea <memchr>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d038      	beq.n	800a1fe <_svfiprintf_r+0x1d6>
 800a18c:	4b23      	ldr	r3, [pc, #140]	; (800a21c <_svfiprintf_r+0x1f4>)
 800a18e:	bb1b      	cbnz	r3, 800a1d8 <_svfiprintf_r+0x1b0>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	3307      	adds	r3, #7
 800a194:	f023 0307 	bic.w	r3, r3, #7
 800a198:	3308      	adds	r3, #8
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19e:	4433      	add	r3, r6
 800a1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a2:	e768      	b.n	800a076 <_svfiprintf_r+0x4e>
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ac:	e7a6      	b.n	800a0fc <_svfiprintf_r+0xd4>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f04f 0c0a 	mov.w	ip, #10
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c0:	3a30      	subs	r2, #48	; 0x30
 800a1c2:	2a09      	cmp	r2, #9
 800a1c4:	d903      	bls.n	800a1ce <_svfiprintf_r+0x1a6>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c6      	beq.n	800a158 <_svfiprintf_r+0x130>
 800a1ca:	9105      	str	r1, [sp, #20]
 800a1cc:	e7c4      	b.n	800a158 <_svfiprintf_r+0x130>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d6:	e7f0      	b.n	800a1ba <_svfiprintf_r+0x192>
 800a1d8:	ab03      	add	r3, sp, #12
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4638      	mov	r0, r7
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <_svfiprintf_r+0x1f8>)
 800a1e2:	a904      	add	r1, sp, #16
 800a1e4:	f7fc faac 	bl	8006740 <_printf_float>
 800a1e8:	1c42      	adds	r2, r0, #1
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	d1d6      	bne.n	800a19c <_svfiprintf_r+0x174>
 800a1ee:	89ab      	ldrh	r3, [r5, #12]
 800a1f0:	065b      	lsls	r3, r3, #25
 800a1f2:	f53f af2d 	bmi.w	800a050 <_svfiprintf_r+0x28>
 800a1f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f8:	b01d      	add	sp, #116	; 0x74
 800a1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4638      	mov	r0, r7
 800a206:	4b06      	ldr	r3, [pc, #24]	; (800a220 <_svfiprintf_r+0x1f8>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	f7fc fd39 	bl	8006c80 <_printf_i>
 800a20e:	e7eb      	b.n	800a1e8 <_svfiprintf_r+0x1c0>
 800a210:	0800b699 	.word	0x0800b699
 800a214:	0800b69f 	.word	0x0800b69f
 800a218:	0800b6a3 	.word	0x0800b6a3
 800a21c:	08006741 	.word	0x08006741
 800a220:	08009f75 	.word	0x08009f75

0800a224 <__sfputc_r>:
 800a224:	6893      	ldr	r3, [r2, #8]
 800a226:	b410      	push	{r4}
 800a228:	3b01      	subs	r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	6093      	str	r3, [r2, #8]
 800a22e:	da07      	bge.n	800a240 <__sfputc_r+0x1c>
 800a230:	6994      	ldr	r4, [r2, #24]
 800a232:	42a3      	cmp	r3, r4
 800a234:	db01      	blt.n	800a23a <__sfputc_r+0x16>
 800a236:	290a      	cmp	r1, #10
 800a238:	d102      	bne.n	800a240 <__sfputc_r+0x1c>
 800a23a:	bc10      	pop	{r4}
 800a23c:	f7fd ba99 	b.w	8007772 <__swbuf_r>
 800a240:	6813      	ldr	r3, [r2, #0]
 800a242:	1c58      	adds	r0, r3, #1
 800a244:	6010      	str	r0, [r2, #0]
 800a246:	7019      	strb	r1, [r3, #0]
 800a248:	4608      	mov	r0, r1
 800a24a:	bc10      	pop	{r4}
 800a24c:	4770      	bx	lr

0800a24e <__sfputs_r>:
 800a24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a250:	4606      	mov	r6, r0
 800a252:	460f      	mov	r7, r1
 800a254:	4614      	mov	r4, r2
 800a256:	18d5      	adds	r5, r2, r3
 800a258:	42ac      	cmp	r4, r5
 800a25a:	d101      	bne.n	800a260 <__sfputs_r+0x12>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e007      	b.n	800a270 <__sfputs_r+0x22>
 800a260:	463a      	mov	r2, r7
 800a262:	4630      	mov	r0, r6
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	f7ff ffdc 	bl	800a224 <__sfputc_r>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d1f3      	bne.n	800a258 <__sfputs_r+0xa>
 800a270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a274 <_vfiprintf_r>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	460d      	mov	r5, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	4698      	mov	r8, r3
 800a27e:	4606      	mov	r6, r0
 800a280:	b09d      	sub	sp, #116	; 0x74
 800a282:	b118      	cbz	r0, 800a28c <_vfiprintf_r+0x18>
 800a284:	6a03      	ldr	r3, [r0, #32]
 800a286:	b90b      	cbnz	r3, 800a28c <_vfiprintf_r+0x18>
 800a288:	f7fd f8b6 	bl	80073f8 <__sinit>
 800a28c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a28e:	07d9      	lsls	r1, r3, #31
 800a290:	d405      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	059a      	lsls	r2, r3, #22
 800a296:	d402      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f7fd fba4 	bl	80079e6 <__retarget_lock_acquire_recursive>
 800a29e:	89ab      	ldrh	r3, [r5, #12]
 800a2a0:	071b      	lsls	r3, r3, #28
 800a2a2:	d501      	bpl.n	800a2a8 <_vfiprintf_r+0x34>
 800a2a4:	692b      	ldr	r3, [r5, #16]
 800a2a6:	b99b      	cbnz	r3, 800a2d0 <_vfiprintf_r+0x5c>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7fd fa9e 	bl	80077ec <__swsetup_r>
 800a2b0:	b170      	cbz	r0, 800a2d0 <_vfiprintf_r+0x5c>
 800a2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b4:	07dc      	lsls	r4, r3, #31
 800a2b6:	d504      	bpl.n	800a2c2 <_vfiprintf_r+0x4e>
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	b01d      	add	sp, #116	; 0x74
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	0598      	lsls	r0, r3, #22
 800a2c6:	d4f7      	bmi.n	800a2b8 <_vfiprintf_r+0x44>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ca:	f7fd fb8d 	bl	80079e8 <__retarget_lock_release_recursive>
 800a2ce:	e7f3      	b.n	800a2b8 <_vfiprintf_r+0x44>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2da:	2330      	movs	r3, #48	; 0x30
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a494 <_vfiprintf_r+0x220>
 800a2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f4:	b10a      	cbz	r2, 800a2fa <_vfiprintf_r+0x86>
 800a2f6:	2a25      	cmp	r2, #37	; 0x25
 800a2f8:	d1f9      	bne.n	800a2ee <_vfiprintf_r+0x7a>
 800a2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fe:	d00b      	beq.n	800a318 <_vfiprintf_r+0xa4>
 800a300:	465b      	mov	r3, fp
 800a302:	4622      	mov	r2, r4
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ffa1 	bl	800a24e <__sfputs_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	f000 80a9 	beq.w	800a464 <_vfiprintf_r+0x1f0>
 800a312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a314:	445a      	add	r2, fp
 800a316:	9209      	str	r2, [sp, #36]	; 0x24
 800a318:	f89a 3000 	ldrb.w	r3, [sl]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 80a1 	beq.w	800a464 <_vfiprintf_r+0x1f0>
 800a322:	2300      	movs	r3, #0
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a338:	931a      	str	r3, [sp, #104]	; 0x68
 800a33a:	4654      	mov	r4, sl
 800a33c:	2205      	movs	r2, #5
 800a33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a342:	4854      	ldr	r0, [pc, #336]	; (800a494 <_vfiprintf_r+0x220>)
 800a344:	f7fd fb51 	bl	80079ea <memchr>
 800a348:	9a04      	ldr	r2, [sp, #16]
 800a34a:	b9d8      	cbnz	r0, 800a384 <_vfiprintf_r+0x110>
 800a34c:	06d1      	lsls	r1, r2, #27
 800a34e:	bf44      	itt	mi
 800a350:	2320      	movmi	r3, #32
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a356:	0713      	lsls	r3, r2, #28
 800a358:	bf44      	itt	mi
 800a35a:	232b      	movmi	r3, #43	; 0x2b
 800a35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b2a      	cmp	r3, #42	; 0x2a
 800a366:	d015      	beq.n	800a394 <_vfiprintf_r+0x120>
 800a368:	4654      	mov	r4, sl
 800a36a:	2000      	movs	r0, #0
 800a36c:	f04f 0c0a 	mov.w	ip, #10
 800a370:	9a07      	ldr	r2, [sp, #28]
 800a372:	4621      	mov	r1, r4
 800a374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a378:	3b30      	subs	r3, #48	; 0x30
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d94d      	bls.n	800a41a <_vfiprintf_r+0x1a6>
 800a37e:	b1b0      	cbz	r0, 800a3ae <_vfiprintf_r+0x13a>
 800a380:	9207      	str	r2, [sp, #28]
 800a382:	e014      	b.n	800a3ae <_vfiprintf_r+0x13a>
 800a384:	eba0 0308 	sub.w	r3, r0, r8
 800a388:	fa09 f303 	lsl.w	r3, r9, r3
 800a38c:	4313      	orrs	r3, r2
 800a38e:	46a2      	mov	sl, r4
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	e7d2      	b.n	800a33a <_vfiprintf_r+0xc6>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d19      	adds	r1, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9103      	str	r1, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfbb      	ittet	lt
 800a3a0:	425b      	neglt	r3, r3
 800a3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a6:	9307      	strge	r3, [sp, #28]
 800a3a8:	9307      	strlt	r3, [sp, #28]
 800a3aa:	bfb8      	it	lt
 800a3ac:	9204      	strlt	r2, [sp, #16]
 800a3ae:	7823      	ldrb	r3, [r4, #0]
 800a3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b2:	d10c      	bne.n	800a3ce <_vfiprintf_r+0x15a>
 800a3b4:	7863      	ldrb	r3, [r4, #1]
 800a3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b8:	d134      	bne.n	800a424 <_vfiprintf_r+0x1b0>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	3402      	adds	r4, #2
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	bfb8      	it	lt
 800a3c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a498 <_vfiprintf_r+0x224>
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	7821      	ldrb	r1, [r4, #0]
 800a3d8:	f7fd fb07 	bl	80079ea <memchr>
 800a3dc:	b138      	cbz	r0, 800a3ee <_vfiprintf_r+0x17a>
 800a3de:	2240      	movs	r2, #64	; 0x40
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	eba0 000a 	sub.w	r0, r0, sl
 800a3e6:	4082      	lsls	r2, r0
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	3401      	adds	r4, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f2:	2206      	movs	r2, #6
 800a3f4:	4829      	ldr	r0, [pc, #164]	; (800a49c <_vfiprintf_r+0x228>)
 800a3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3fa:	f7fd faf6 	bl	80079ea <memchr>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d03f      	beq.n	800a482 <_vfiprintf_r+0x20e>
 800a402:	4b27      	ldr	r3, [pc, #156]	; (800a4a0 <_vfiprintf_r+0x22c>)
 800a404:	bb1b      	cbnz	r3, 800a44e <_vfiprintf_r+0x1da>
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	3307      	adds	r3, #7
 800a40a:	f023 0307 	bic.w	r3, r3, #7
 800a40e:	3308      	adds	r3, #8
 800a410:	9303      	str	r3, [sp, #12]
 800a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a414:	443b      	add	r3, r7
 800a416:	9309      	str	r3, [sp, #36]	; 0x24
 800a418:	e768      	b.n	800a2ec <_vfiprintf_r+0x78>
 800a41a:	460c      	mov	r4, r1
 800a41c:	2001      	movs	r0, #1
 800a41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a422:	e7a6      	b.n	800a372 <_vfiprintf_r+0xfe>
 800a424:	2300      	movs	r3, #0
 800a426:	f04f 0c0a 	mov.w	ip, #10
 800a42a:	4619      	mov	r1, r3
 800a42c:	3401      	adds	r4, #1
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	4620      	mov	r0, r4
 800a432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a436:	3a30      	subs	r2, #48	; 0x30
 800a438:	2a09      	cmp	r2, #9
 800a43a:	d903      	bls.n	800a444 <_vfiprintf_r+0x1d0>
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0c6      	beq.n	800a3ce <_vfiprintf_r+0x15a>
 800a440:	9105      	str	r1, [sp, #20]
 800a442:	e7c4      	b.n	800a3ce <_vfiprintf_r+0x15a>
 800a444:	4604      	mov	r4, r0
 800a446:	2301      	movs	r3, #1
 800a448:	fb0c 2101 	mla	r1, ip, r1, r2
 800a44c:	e7f0      	b.n	800a430 <_vfiprintf_r+0x1bc>
 800a44e:	ab03      	add	r3, sp, #12
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	462a      	mov	r2, r5
 800a454:	4630      	mov	r0, r6
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <_vfiprintf_r+0x230>)
 800a458:	a904      	add	r1, sp, #16
 800a45a:	f7fc f971 	bl	8006740 <_printf_float>
 800a45e:	4607      	mov	r7, r0
 800a460:	1c78      	adds	r0, r7, #1
 800a462:	d1d6      	bne.n	800a412 <_vfiprintf_r+0x19e>
 800a464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a466:	07d9      	lsls	r1, r3, #31
 800a468:	d405      	bmi.n	800a476 <_vfiprintf_r+0x202>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	059a      	lsls	r2, r3, #22
 800a46e:	d402      	bmi.n	800a476 <_vfiprintf_r+0x202>
 800a470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a472:	f7fd fab9 	bl	80079e8 <__retarget_lock_release_recursive>
 800a476:	89ab      	ldrh	r3, [r5, #12]
 800a478:	065b      	lsls	r3, r3, #25
 800a47a:	f53f af1d 	bmi.w	800a2b8 <_vfiprintf_r+0x44>
 800a47e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a480:	e71c      	b.n	800a2bc <_vfiprintf_r+0x48>
 800a482:	ab03      	add	r3, sp, #12
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	462a      	mov	r2, r5
 800a488:	4630      	mov	r0, r6
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <_vfiprintf_r+0x230>)
 800a48c:	a904      	add	r1, sp, #16
 800a48e:	f7fc fbf7 	bl	8006c80 <_printf_i>
 800a492:	e7e4      	b.n	800a45e <_vfiprintf_r+0x1ea>
 800a494:	0800b699 	.word	0x0800b699
 800a498:	0800b69f 	.word	0x0800b69f
 800a49c:	0800b6a3 	.word	0x0800b6a3
 800a4a0:	08006741 	.word	0x08006741
 800a4a4:	0800a24f 	.word	0x0800a24f

0800a4a8 <__sflush_r>:
 800a4a8:	898a      	ldrh	r2, [r1, #12]
 800a4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	0710      	lsls	r0, r2, #28
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	d457      	bmi.n	800a564 <__sflush_r+0xbc>
 800a4b4:	684b      	ldr	r3, [r1, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc04      	bgt.n	800a4c4 <__sflush_r+0x1c>
 800a4ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc01      	bgt.n	800a4c4 <__sflush_r+0x1c>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	d0fa      	beq.n	800a4c0 <__sflush_r+0x18>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4d0:	682f      	ldr	r7, [r5, #0]
 800a4d2:	6a21      	ldr	r1, [r4, #32]
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	d032      	beq.n	800a53e <__sflush_r+0x96>
 800a4d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	075a      	lsls	r2, r3, #29
 800a4de:	d505      	bpl.n	800a4ec <__sflush_r+0x44>
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	1ac0      	subs	r0, r0, r3
 800a4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4e6:	b10b      	cbz	r3, 800a4ec <__sflush_r+0x44>
 800a4e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4ea:	1ac0      	subs	r0, r0, r3
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	6a21      	ldr	r1, [r4, #32]
 800a4f6:	47b0      	blx	r6
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	d106      	bne.n	800a50c <__sflush_r+0x64>
 800a4fe:	6829      	ldr	r1, [r5, #0]
 800a500:	291d      	cmp	r1, #29
 800a502:	d82b      	bhi.n	800a55c <__sflush_r+0xb4>
 800a504:	4a28      	ldr	r2, [pc, #160]	; (800a5a8 <__sflush_r+0x100>)
 800a506:	410a      	asrs	r2, r1
 800a508:	07d6      	lsls	r6, r2, #31
 800a50a:	d427      	bmi.n	800a55c <__sflush_r+0xb4>
 800a50c:	2200      	movs	r2, #0
 800a50e:	6062      	str	r2, [r4, #4]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	04d9      	lsls	r1, r3, #19
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	d504      	bpl.n	800a522 <__sflush_r+0x7a>
 800a518:	1c42      	adds	r2, r0, #1
 800a51a:	d101      	bne.n	800a520 <__sflush_r+0x78>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b903      	cbnz	r3, 800a522 <__sflush_r+0x7a>
 800a520:	6560      	str	r0, [r4, #84]	; 0x54
 800a522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a524:	602f      	str	r7, [r5, #0]
 800a526:	2900      	cmp	r1, #0
 800a528:	d0ca      	beq.n	800a4c0 <__sflush_r+0x18>
 800a52a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a52e:	4299      	cmp	r1, r3
 800a530:	d002      	beq.n	800a538 <__sflush_r+0x90>
 800a532:	4628      	mov	r0, r5
 800a534:	f7fe f8e8 	bl	8008708 <_free_r>
 800a538:	2000      	movs	r0, #0
 800a53a:	6360      	str	r0, [r4, #52]	; 0x34
 800a53c:	e7c1      	b.n	800a4c2 <__sflush_r+0x1a>
 800a53e:	2301      	movs	r3, #1
 800a540:	4628      	mov	r0, r5
 800a542:	47b0      	blx	r6
 800a544:	1c41      	adds	r1, r0, #1
 800a546:	d1c8      	bne.n	800a4da <__sflush_r+0x32>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c5      	beq.n	800a4da <__sflush_r+0x32>
 800a54e:	2b1d      	cmp	r3, #29
 800a550:	d001      	beq.n	800a556 <__sflush_r+0xae>
 800a552:	2b16      	cmp	r3, #22
 800a554:	d101      	bne.n	800a55a <__sflush_r+0xb2>
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	e7b2      	b.n	800a4c0 <__sflush_r+0x18>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	e7ae      	b.n	800a4c2 <__sflush_r+0x1a>
 800a564:	690f      	ldr	r7, [r1, #16]
 800a566:	2f00      	cmp	r7, #0
 800a568:	d0aa      	beq.n	800a4c0 <__sflush_r+0x18>
 800a56a:	0793      	lsls	r3, r2, #30
 800a56c:	bf18      	it	ne
 800a56e:	2300      	movne	r3, #0
 800a570:	680e      	ldr	r6, [r1, #0]
 800a572:	bf08      	it	eq
 800a574:	694b      	ldreq	r3, [r1, #20]
 800a576:	1bf6      	subs	r6, r6, r7
 800a578:	600f      	str	r7, [r1, #0]
 800a57a:	608b      	str	r3, [r1, #8]
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	dd9f      	ble.n	800a4c0 <__sflush_r+0x18>
 800a580:	4633      	mov	r3, r6
 800a582:	463a      	mov	r2, r7
 800a584:	4628      	mov	r0, r5
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a58c:	47e0      	blx	ip
 800a58e:	2800      	cmp	r0, #0
 800a590:	dc06      	bgt.n	800a5a0 <__sflush_r+0xf8>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	e790      	b.n	800a4c2 <__sflush_r+0x1a>
 800a5a0:	4407      	add	r7, r0
 800a5a2:	1a36      	subs	r6, r6, r0
 800a5a4:	e7ea      	b.n	800a57c <__sflush_r+0xd4>
 800a5a6:	bf00      	nop
 800a5a8:	dfbffffe 	.word	0xdfbffffe

0800a5ac <_fflush_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b913      	cbnz	r3, 800a5bc <_fflush_r+0x10>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	b118      	cbz	r0, 800a5c6 <_fflush_r+0x1a>
 800a5be:	6a03      	ldr	r3, [r0, #32]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <_fflush_r+0x1a>
 800a5c2:	f7fc ff19 	bl	80073f8 <__sinit>
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0f3      	beq.n	800a5b6 <_fflush_r+0xa>
 800a5ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5d0:	07d0      	lsls	r0, r2, #31
 800a5d2:	d404      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d4:	0599      	lsls	r1, r3, #22
 800a5d6:	d402      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5da:	f7fd fa04 	bl	80079e6 <__retarget_lock_acquire_recursive>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f7ff ff61 	bl	800a4a8 <__sflush_r>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	07da      	lsls	r2, r3, #31
 800a5ec:	d4e4      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d4e1      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5f6:	f7fd f9f7 	bl	80079e8 <__retarget_lock_release_recursive>
 800a5fa:	e7dd      	b.n	800a5b8 <_fflush_r+0xc>

0800a5fc <__swhatbuf_r>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a604:	4615      	mov	r5, r2
 800a606:	2900      	cmp	r1, #0
 800a608:	461e      	mov	r6, r3
 800a60a:	b096      	sub	sp, #88	; 0x58
 800a60c:	da0c      	bge.n	800a628 <__swhatbuf_r+0x2c>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	2100      	movs	r1, #0
 800a612:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a616:	bf0c      	ite	eq
 800a618:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a61c:	2340      	movne	r3, #64	; 0x40
 800a61e:	2000      	movs	r0, #0
 800a620:	6031      	str	r1, [r6, #0]
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	b016      	add	sp, #88	; 0x58
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	466a      	mov	r2, sp
 800a62a:	f000 f897 	bl	800a75c <_fstat_r>
 800a62e:	2800      	cmp	r0, #0
 800a630:	dbed      	blt.n	800a60e <__swhatbuf_r+0x12>
 800a632:	9901      	ldr	r1, [sp, #4]
 800a634:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a638:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a63c:	4259      	negs	r1, r3
 800a63e:	4159      	adcs	r1, r3
 800a640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a644:	e7eb      	b.n	800a61e <__swhatbuf_r+0x22>

0800a646 <__smakebuf_r>:
 800a646:	898b      	ldrh	r3, [r1, #12]
 800a648:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a64a:	079d      	lsls	r5, r3, #30
 800a64c:	4606      	mov	r6, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	d507      	bpl.n	800a662 <__smakebuf_r+0x1c>
 800a652:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	6123      	str	r3, [r4, #16]
 800a65a:	2301      	movs	r3, #1
 800a65c:	6163      	str	r3, [r4, #20]
 800a65e:	b002      	add	sp, #8
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	466a      	mov	r2, sp
 800a664:	ab01      	add	r3, sp, #4
 800a666:	f7ff ffc9 	bl	800a5fc <__swhatbuf_r>
 800a66a:	9900      	ldr	r1, [sp, #0]
 800a66c:	4605      	mov	r5, r0
 800a66e:	4630      	mov	r0, r6
 800a670:	f7fe f8ba 	bl	80087e8 <_malloc_r>
 800a674:	b948      	cbnz	r0, 800a68a <__smakebuf_r+0x44>
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	059a      	lsls	r2, r3, #22
 800a67c:	d4ef      	bmi.n	800a65e <__smakebuf_r+0x18>
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	f043 0302 	orr.w	r3, r3, #2
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	e7e3      	b.n	800a652 <__smakebuf_r+0xc>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	6020      	str	r0, [r4, #0]
 800a68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	6120      	str	r0, [r4, #16]
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	b15b      	cbz	r3, 800a6b6 <__smakebuf_r+0x70>
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	f000 f86c 	bl	800a780 <_isatty_r>
 800a6a8:	b128      	cbz	r0, 800a6b6 <__smakebuf_r+0x70>
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	f023 0303 	bic.w	r3, r3, #3
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	431d      	orrs	r5, r3
 800a6ba:	81a5      	strh	r5, [r4, #12]
 800a6bc:	e7cf      	b.n	800a65e <__smakebuf_r+0x18>

0800a6be <_putc_r>:
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	4614      	mov	r4, r2
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_putc_r+0x12>
 800a6c8:	6a03      	ldr	r3, [r0, #32]
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_putc_r+0x12>
 800a6cc:	f7fc fe94 	bl	80073f8 <__sinit>
 800a6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6d2:	07d8      	lsls	r0, r3, #31
 800a6d4:	d405      	bmi.n	800a6e2 <_putc_r+0x24>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	0599      	lsls	r1, r3, #22
 800a6da:	d402      	bmi.n	800a6e2 <_putc_r+0x24>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6de:	f7fd f982 	bl	80079e6 <__retarget_lock_acquire_recursive>
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	da05      	bge.n	800a6f8 <_putc_r+0x3a>
 800a6ec:	69a2      	ldr	r2, [r4, #24]
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	db12      	blt.n	800a718 <_putc_r+0x5a>
 800a6f2:	b2eb      	uxtb	r3, r5
 800a6f4:	2b0a      	cmp	r3, #10
 800a6f6:	d00f      	beq.n	800a718 <_putc_r+0x5a>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	6022      	str	r2, [r4, #0]
 800a6fe:	701d      	strb	r5, [r3, #0]
 800a700:	b2ed      	uxtb	r5, r5
 800a702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a704:	07da      	lsls	r2, r3, #31
 800a706:	d405      	bmi.n	800a714 <_putc_r+0x56>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	059b      	lsls	r3, r3, #22
 800a70c:	d402      	bmi.n	800a714 <_putc_r+0x56>
 800a70e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a710:	f7fd f96a 	bl	80079e8 <__retarget_lock_release_recursive>
 800a714:	4628      	mov	r0, r5
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	4629      	mov	r1, r5
 800a71a:	4622      	mov	r2, r4
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7fd f828 	bl	8007772 <__swbuf_r>
 800a722:	4605      	mov	r5, r0
 800a724:	e7ed      	b.n	800a702 <_putc_r+0x44>

0800a726 <memmove>:
 800a726:	4288      	cmp	r0, r1
 800a728:	b510      	push	{r4, lr}
 800a72a:	eb01 0402 	add.w	r4, r1, r2
 800a72e:	d902      	bls.n	800a736 <memmove+0x10>
 800a730:	4284      	cmp	r4, r0
 800a732:	4623      	mov	r3, r4
 800a734:	d807      	bhi.n	800a746 <memmove+0x20>
 800a736:	1e43      	subs	r3, r0, #1
 800a738:	42a1      	cmp	r1, r4
 800a73a:	d008      	beq.n	800a74e <memmove+0x28>
 800a73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a740:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a744:	e7f8      	b.n	800a738 <memmove+0x12>
 800a746:	4601      	mov	r1, r0
 800a748:	4402      	add	r2, r0
 800a74a:	428a      	cmp	r2, r1
 800a74c:	d100      	bne.n	800a750 <memmove+0x2a>
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a754:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a758:	e7f7      	b.n	800a74a <memmove+0x24>
	...

0800a75c <_fstat_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	2300      	movs	r3, #0
 800a760:	4d06      	ldr	r5, [pc, #24]	; (800a77c <_fstat_r+0x20>)
 800a762:	4604      	mov	r4, r0
 800a764:	4608      	mov	r0, r1
 800a766:	4611      	mov	r1, r2
 800a768:	602b      	str	r3, [r5, #0]
 800a76a:	f7f7 f819 	bl	80017a0 <_fstat>
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	d102      	bne.n	800a778 <_fstat_r+0x1c>
 800a772:	682b      	ldr	r3, [r5, #0]
 800a774:	b103      	cbz	r3, 800a778 <_fstat_r+0x1c>
 800a776:	6023      	str	r3, [r4, #0]
 800a778:	bd38      	pop	{r3, r4, r5, pc}
 800a77a:	bf00      	nop
 800a77c:	20000cf0 	.word	0x20000cf0

0800a780 <_isatty_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	2300      	movs	r3, #0
 800a784:	4d05      	ldr	r5, [pc, #20]	; (800a79c <_isatty_r+0x1c>)
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f7 f817 	bl	80017be <_isatty>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_isatty_r+0x1a>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_isatty_r+0x1a>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20000cf0 	.word	0x20000cf0

0800a7a0 <_sbrk_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	4d05      	ldr	r5, [pc, #20]	; (800a7bc <_sbrk_r+0x1c>)
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	f7f7 f81e 	bl	80017ec <_sbrk>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_sbrk_r+0x1a>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_sbrk_r+0x1a>
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	20000cf0 	.word	0x20000cf0

0800a7c0 <nan>:
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	4901      	ldr	r1, [pc, #4]	; (800a7c8 <nan+0x8>)
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	7ff80000 	.word	0x7ff80000

0800a7cc <__assert_func>:
 800a7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <__assert_func+0x2c>)
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68d8      	ldr	r0, [r3, #12]
 800a7da:	b14c      	cbz	r4, 800a7f0 <__assert_func+0x24>
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <__assert_func+0x30>)
 800a7de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7e2:	9100      	str	r1, [sp, #0]
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	4906      	ldr	r1, [pc, #24]	; (800a800 <__assert_func+0x34>)
 800a7e8:	f000 fbca 	bl	800af80 <fiprintf>
 800a7ec:	f000 fbda 	bl	800afa4 <abort>
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <__assert_func+0x38>)
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	e7f3      	b.n	800a7de <__assert_func+0x12>
 800a7f6:	bf00      	nop
 800a7f8:	20000068 	.word	0x20000068
 800a7fc:	0800b6b2 	.word	0x0800b6b2
 800a800:	0800b6bf 	.word	0x0800b6bf
 800a804:	0800b6ed 	.word	0x0800b6ed

0800a808 <_calloc_r>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	fba1 5402 	umull	r5, r4, r1, r2
 800a80e:	b934      	cbnz	r4, 800a81e <_calloc_r+0x16>
 800a810:	4629      	mov	r1, r5
 800a812:	f7fd ffe9 	bl	80087e8 <_malloc_r>
 800a816:	4606      	mov	r6, r0
 800a818:	b928      	cbnz	r0, 800a826 <_calloc_r+0x1e>
 800a81a:	4630      	mov	r0, r6
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	220c      	movs	r2, #12
 800a820:	2600      	movs	r6, #0
 800a822:	6002      	str	r2, [r0, #0]
 800a824:	e7f9      	b.n	800a81a <_calloc_r+0x12>
 800a826:	462a      	mov	r2, r5
 800a828:	4621      	mov	r1, r4
 800a82a:	f7fd f837 	bl	800789c <memset>
 800a82e:	e7f4      	b.n	800a81a <_calloc_r+0x12>

0800a830 <rshift>:
 800a830:	6903      	ldr	r3, [r0, #16]
 800a832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a83a:	f100 0414 	add.w	r4, r0, #20
 800a83e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a842:	dd46      	ble.n	800a8d2 <rshift+0xa2>
 800a844:	f011 011f 	ands.w	r1, r1, #31
 800a848:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a84c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a850:	d10c      	bne.n	800a86c <rshift+0x3c>
 800a852:	4629      	mov	r1, r5
 800a854:	f100 0710 	add.w	r7, r0, #16
 800a858:	42b1      	cmp	r1, r6
 800a85a:	d335      	bcc.n	800a8c8 <rshift+0x98>
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	1eea      	subs	r2, r5, #3
 800a862:	4296      	cmp	r6, r2
 800a864:	bf38      	it	cc
 800a866:	2300      	movcc	r3, #0
 800a868:	4423      	add	r3, r4
 800a86a:	e015      	b.n	800a898 <rshift+0x68>
 800a86c:	46a1      	mov	r9, r4
 800a86e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a872:	f1c1 0820 	rsb	r8, r1, #32
 800a876:	40cf      	lsrs	r7, r1
 800a878:	f105 0e04 	add.w	lr, r5, #4
 800a87c:	4576      	cmp	r6, lr
 800a87e:	46f4      	mov	ip, lr
 800a880:	d816      	bhi.n	800a8b0 <rshift+0x80>
 800a882:	1a9a      	subs	r2, r3, r2
 800a884:	0092      	lsls	r2, r2, #2
 800a886:	3a04      	subs	r2, #4
 800a888:	3501      	adds	r5, #1
 800a88a:	42ae      	cmp	r6, r5
 800a88c:	bf38      	it	cc
 800a88e:	2200      	movcc	r2, #0
 800a890:	18a3      	adds	r3, r4, r2
 800a892:	50a7      	str	r7, [r4, r2]
 800a894:	b107      	cbz	r7, 800a898 <rshift+0x68>
 800a896:	3304      	adds	r3, #4
 800a898:	42a3      	cmp	r3, r4
 800a89a:	eba3 0204 	sub.w	r2, r3, r4
 800a89e:	bf08      	it	eq
 800a8a0:	2300      	moveq	r3, #0
 800a8a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8a6:	6102      	str	r2, [r0, #16]
 800a8a8:	bf08      	it	eq
 800a8aa:	6143      	streq	r3, [r0, #20]
 800a8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b0:	f8dc c000 	ldr.w	ip, [ip]
 800a8b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8b8:	ea4c 0707 	orr.w	r7, ip, r7
 800a8bc:	f849 7b04 	str.w	r7, [r9], #4
 800a8c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8c4:	40cf      	lsrs	r7, r1
 800a8c6:	e7d9      	b.n	800a87c <rshift+0x4c>
 800a8c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8d0:	e7c2      	b.n	800a858 <rshift+0x28>
 800a8d2:	4623      	mov	r3, r4
 800a8d4:	e7e0      	b.n	800a898 <rshift+0x68>

0800a8d6 <__hexdig_fun>:
 800a8d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d802      	bhi.n	800a8e4 <__hexdig_fun+0xe>
 800a8de:	3820      	subs	r0, #32
 800a8e0:	b2c0      	uxtb	r0, r0
 800a8e2:	4770      	bx	lr
 800a8e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8e8:	2b05      	cmp	r3, #5
 800a8ea:	d801      	bhi.n	800a8f0 <__hexdig_fun+0x1a>
 800a8ec:	3847      	subs	r0, #71	; 0x47
 800a8ee:	e7f7      	b.n	800a8e0 <__hexdig_fun+0xa>
 800a8f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8f4:	2b05      	cmp	r3, #5
 800a8f6:	d801      	bhi.n	800a8fc <__hexdig_fun+0x26>
 800a8f8:	3827      	subs	r0, #39	; 0x27
 800a8fa:	e7f1      	b.n	800a8e0 <__hexdig_fun+0xa>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	4770      	bx	lr

0800a900 <__gethex>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	4681      	mov	r9, r0
 800a906:	468a      	mov	sl, r1
 800a908:	4617      	mov	r7, r2
 800a90a:	680a      	ldr	r2, [r1, #0]
 800a90c:	b085      	sub	sp, #20
 800a90e:	f102 0b02 	add.w	fp, r2, #2
 800a912:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a916:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a91a:	9302      	str	r3, [sp, #8]
 800a91c:	32fe      	adds	r2, #254	; 0xfe
 800a91e:	eb02 030b 	add.w	r3, r2, fp
 800a922:	46d8      	mov	r8, fp
 800a924:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	2830      	cmp	r0, #48	; 0x30
 800a92c:	d0f7      	beq.n	800a91e <__gethex+0x1e>
 800a92e:	f7ff ffd2 	bl	800a8d6 <__hexdig_fun>
 800a932:	4604      	mov	r4, r0
 800a934:	2800      	cmp	r0, #0
 800a936:	d138      	bne.n	800a9aa <__gethex+0xaa>
 800a938:	2201      	movs	r2, #1
 800a93a:	4640      	mov	r0, r8
 800a93c:	49a7      	ldr	r1, [pc, #668]	; (800abdc <__gethex+0x2dc>)
 800a93e:	f7fc ffb5 	bl	80078ac <strncmp>
 800a942:	4606      	mov	r6, r0
 800a944:	2800      	cmp	r0, #0
 800a946:	d169      	bne.n	800aa1c <__gethex+0x11c>
 800a948:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a94c:	465d      	mov	r5, fp
 800a94e:	f7ff ffc2 	bl	800a8d6 <__hexdig_fun>
 800a952:	2800      	cmp	r0, #0
 800a954:	d064      	beq.n	800aa20 <__gethex+0x120>
 800a956:	465a      	mov	r2, fp
 800a958:	7810      	ldrb	r0, [r2, #0]
 800a95a:	4690      	mov	r8, r2
 800a95c:	2830      	cmp	r0, #48	; 0x30
 800a95e:	f102 0201 	add.w	r2, r2, #1
 800a962:	d0f9      	beq.n	800a958 <__gethex+0x58>
 800a964:	f7ff ffb7 	bl	800a8d6 <__hexdig_fun>
 800a968:	2301      	movs	r3, #1
 800a96a:	fab0 f480 	clz	r4, r0
 800a96e:	465e      	mov	r6, fp
 800a970:	0964      	lsrs	r4, r4, #5
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	4642      	mov	r2, r8
 800a976:	4615      	mov	r5, r2
 800a978:	7828      	ldrb	r0, [r5, #0]
 800a97a:	3201      	adds	r2, #1
 800a97c:	f7ff ffab 	bl	800a8d6 <__hexdig_fun>
 800a980:	2800      	cmp	r0, #0
 800a982:	d1f8      	bne.n	800a976 <__gethex+0x76>
 800a984:	2201      	movs	r2, #1
 800a986:	4628      	mov	r0, r5
 800a988:	4994      	ldr	r1, [pc, #592]	; (800abdc <__gethex+0x2dc>)
 800a98a:	f7fc ff8f 	bl	80078ac <strncmp>
 800a98e:	b978      	cbnz	r0, 800a9b0 <__gethex+0xb0>
 800a990:	b946      	cbnz	r6, 800a9a4 <__gethex+0xa4>
 800a992:	1c6e      	adds	r6, r5, #1
 800a994:	4632      	mov	r2, r6
 800a996:	4615      	mov	r5, r2
 800a998:	7828      	ldrb	r0, [r5, #0]
 800a99a:	3201      	adds	r2, #1
 800a99c:	f7ff ff9b 	bl	800a8d6 <__hexdig_fun>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d1f8      	bne.n	800a996 <__gethex+0x96>
 800a9a4:	1b73      	subs	r3, r6, r5
 800a9a6:	009e      	lsls	r6, r3, #2
 800a9a8:	e004      	b.n	800a9b4 <__gethex+0xb4>
 800a9aa:	2400      	movs	r4, #0
 800a9ac:	4626      	mov	r6, r4
 800a9ae:	e7e1      	b.n	800a974 <__gethex+0x74>
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	d1f7      	bne.n	800a9a4 <__gethex+0xa4>
 800a9b4:	782b      	ldrb	r3, [r5, #0]
 800a9b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9ba:	2b50      	cmp	r3, #80	; 0x50
 800a9bc:	d13d      	bne.n	800aa3a <__gethex+0x13a>
 800a9be:	786b      	ldrb	r3, [r5, #1]
 800a9c0:	2b2b      	cmp	r3, #43	; 0x2b
 800a9c2:	d02f      	beq.n	800aa24 <__gethex+0x124>
 800a9c4:	2b2d      	cmp	r3, #45	; 0x2d
 800a9c6:	d031      	beq.n	800aa2c <__gethex+0x12c>
 800a9c8:	f04f 0b00 	mov.w	fp, #0
 800a9cc:	1c69      	adds	r1, r5, #1
 800a9ce:	7808      	ldrb	r0, [r1, #0]
 800a9d0:	f7ff ff81 	bl	800a8d6 <__hexdig_fun>
 800a9d4:	1e42      	subs	r2, r0, #1
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	2a18      	cmp	r2, #24
 800a9da:	d82e      	bhi.n	800aa3a <__gethex+0x13a>
 800a9dc:	f1a0 0210 	sub.w	r2, r0, #16
 800a9e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9e4:	f7ff ff77 	bl	800a8d6 <__hexdig_fun>
 800a9e8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9ec:	fa5f fc8c 	uxtb.w	ip, ip
 800a9f0:	f1bc 0f18 	cmp.w	ip, #24
 800a9f4:	d91d      	bls.n	800aa32 <__gethex+0x132>
 800a9f6:	f1bb 0f00 	cmp.w	fp, #0
 800a9fa:	d000      	beq.n	800a9fe <__gethex+0xfe>
 800a9fc:	4252      	negs	r2, r2
 800a9fe:	4416      	add	r6, r2
 800aa00:	f8ca 1000 	str.w	r1, [sl]
 800aa04:	b1dc      	cbz	r4, 800aa3e <__gethex+0x13e>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bf14      	ite	ne
 800aa0c:	f04f 0800 	movne.w	r8, #0
 800aa10:	f04f 0806 	moveq.w	r8, #6
 800aa14:	4640      	mov	r0, r8
 800aa16:	b005      	add	sp, #20
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	4645      	mov	r5, r8
 800aa1e:	4626      	mov	r6, r4
 800aa20:	2401      	movs	r4, #1
 800aa22:	e7c7      	b.n	800a9b4 <__gethex+0xb4>
 800aa24:	f04f 0b00 	mov.w	fp, #0
 800aa28:	1ca9      	adds	r1, r5, #2
 800aa2a:	e7d0      	b.n	800a9ce <__gethex+0xce>
 800aa2c:	f04f 0b01 	mov.w	fp, #1
 800aa30:	e7fa      	b.n	800aa28 <__gethex+0x128>
 800aa32:	230a      	movs	r3, #10
 800aa34:	fb03 0002 	mla	r0, r3, r2, r0
 800aa38:	e7d0      	b.n	800a9dc <__gethex+0xdc>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	e7e0      	b.n	800aa00 <__gethex+0x100>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	eba5 0308 	sub.w	r3, r5, r8
 800aa44:	3b01      	subs	r3, #1
 800aa46:	2b07      	cmp	r3, #7
 800aa48:	dc0a      	bgt.n	800aa60 <__gethex+0x160>
 800aa4a:	4648      	mov	r0, r9
 800aa4c:	f7fd ff58 	bl	8008900 <_Balloc>
 800aa50:	4604      	mov	r4, r0
 800aa52:	b940      	cbnz	r0, 800aa66 <__gethex+0x166>
 800aa54:	4602      	mov	r2, r0
 800aa56:	21e4      	movs	r1, #228	; 0xe4
 800aa58:	4b61      	ldr	r3, [pc, #388]	; (800abe0 <__gethex+0x2e0>)
 800aa5a:	4862      	ldr	r0, [pc, #392]	; (800abe4 <__gethex+0x2e4>)
 800aa5c:	f7ff feb6 	bl	800a7cc <__assert_func>
 800aa60:	3101      	adds	r1, #1
 800aa62:	105b      	asrs	r3, r3, #1
 800aa64:	e7ef      	b.n	800aa46 <__gethex+0x146>
 800aa66:	2300      	movs	r3, #0
 800aa68:	469b      	mov	fp, r3
 800aa6a:	f100 0a14 	add.w	sl, r0, #20
 800aa6e:	f8cd a004 	str.w	sl, [sp, #4]
 800aa72:	45a8      	cmp	r8, r5
 800aa74:	d344      	bcc.n	800ab00 <__gethex+0x200>
 800aa76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa7a:	4658      	mov	r0, fp
 800aa7c:	f848 bb04 	str.w	fp, [r8], #4
 800aa80:	eba8 080a 	sub.w	r8, r8, sl
 800aa84:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800aa88:	6122      	str	r2, [r4, #16]
 800aa8a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800aa8e:	f7fe f829 	bl	8008ae4 <__hi0bits>
 800aa92:	683d      	ldr	r5, [r7, #0]
 800aa94:	eba8 0800 	sub.w	r8, r8, r0
 800aa98:	45a8      	cmp	r8, r5
 800aa9a:	dd59      	ble.n	800ab50 <__gethex+0x250>
 800aa9c:	eba8 0805 	sub.w	r8, r8, r5
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f7fe fba7 	bl	80091f6 <__any_on>
 800aaa8:	4683      	mov	fp, r0
 800aaaa:	b1b8      	cbz	r0, 800aadc <__gethex+0x1dc>
 800aaac:	f04f 0b01 	mov.w	fp, #1
 800aab0:	f108 33ff 	add.w	r3, r8, #4294967295
 800aab4:	1159      	asrs	r1, r3, #5
 800aab6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aaba:	f003 021f 	and.w	r2, r3, #31
 800aabe:	fa0b f202 	lsl.w	r2, fp, r2
 800aac2:	420a      	tst	r2, r1
 800aac4:	d00a      	beq.n	800aadc <__gethex+0x1dc>
 800aac6:	455b      	cmp	r3, fp
 800aac8:	dd06      	ble.n	800aad8 <__gethex+0x1d8>
 800aaca:	4620      	mov	r0, r4
 800aacc:	f1a8 0102 	sub.w	r1, r8, #2
 800aad0:	f7fe fb91 	bl	80091f6 <__any_on>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d138      	bne.n	800ab4a <__gethex+0x24a>
 800aad8:	f04f 0b02 	mov.w	fp, #2
 800aadc:	4641      	mov	r1, r8
 800aade:	4620      	mov	r0, r4
 800aae0:	f7ff fea6 	bl	800a830 <rshift>
 800aae4:	4446      	add	r6, r8
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	42b3      	cmp	r3, r6
 800aaea:	da41      	bge.n	800ab70 <__gethex+0x270>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4648      	mov	r0, r9
 800aaf0:	f7fd ff46 	bl	8008980 <_Bfree>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaf8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	e789      	b.n	800aa14 <__gethex+0x114>
 800ab00:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ab04:	2a2e      	cmp	r2, #46	; 0x2e
 800ab06:	d014      	beq.n	800ab32 <__gethex+0x232>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d106      	bne.n	800ab1a <__gethex+0x21a>
 800ab0c:	9b01      	ldr	r3, [sp, #4]
 800ab0e:	f843 bb04 	str.w	fp, [r3], #4
 800ab12:	f04f 0b00 	mov.w	fp, #0
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	465b      	mov	r3, fp
 800ab1a:	7828      	ldrb	r0, [r5, #0]
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	f7ff feda 	bl	800a8d6 <__hexdig_fun>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	f000 000f 	and.w	r0, r0, #15
 800ab28:	4098      	lsls	r0, r3
 800ab2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab2e:	3304      	adds	r3, #4
 800ab30:	e79f      	b.n	800aa72 <__gethex+0x172>
 800ab32:	45a8      	cmp	r8, r5
 800ab34:	d8e8      	bhi.n	800ab08 <__gethex+0x208>
 800ab36:	2201      	movs	r2, #1
 800ab38:	4628      	mov	r0, r5
 800ab3a:	4928      	ldr	r1, [pc, #160]	; (800abdc <__gethex+0x2dc>)
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	f7fc feb5 	bl	80078ac <strncmp>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d1df      	bne.n	800ab08 <__gethex+0x208>
 800ab48:	e793      	b.n	800aa72 <__gethex+0x172>
 800ab4a:	f04f 0b03 	mov.w	fp, #3
 800ab4e:	e7c5      	b.n	800aadc <__gethex+0x1dc>
 800ab50:	da0b      	bge.n	800ab6a <__gethex+0x26a>
 800ab52:	eba5 0808 	sub.w	r8, r5, r8
 800ab56:	4621      	mov	r1, r4
 800ab58:	4642      	mov	r2, r8
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	f7fe f928 	bl	8008db0 <__lshift>
 800ab60:	4604      	mov	r4, r0
 800ab62:	eba6 0608 	sub.w	r6, r6, r8
 800ab66:	f100 0a14 	add.w	sl, r0, #20
 800ab6a:	f04f 0b00 	mov.w	fp, #0
 800ab6e:	e7ba      	b.n	800aae6 <__gethex+0x1e6>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	42b3      	cmp	r3, r6
 800ab74:	dd74      	ble.n	800ac60 <__gethex+0x360>
 800ab76:	1b9e      	subs	r6, r3, r6
 800ab78:	42b5      	cmp	r5, r6
 800ab7a:	dc35      	bgt.n	800abe8 <__gethex+0x2e8>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d023      	beq.n	800abca <__gethex+0x2ca>
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d025      	beq.n	800abd2 <__gethex+0x2d2>
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d115      	bne.n	800abb6 <__gethex+0x2b6>
 800ab8a:	42b5      	cmp	r5, r6
 800ab8c:	d113      	bne.n	800abb6 <__gethex+0x2b6>
 800ab8e:	2d01      	cmp	r5, #1
 800ab90:	d10b      	bne.n	800abaa <__gethex+0x2aa>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	9a02      	ldr	r2, [sp, #8]
 800ab96:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	6123      	str	r3, [r4, #16]
 800aba0:	f8ca 3000 	str.w	r3, [sl]
 800aba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba6:	601c      	str	r4, [r3, #0]
 800aba8:	e734      	b.n	800aa14 <__gethex+0x114>
 800abaa:	4620      	mov	r0, r4
 800abac:	1e69      	subs	r1, r5, #1
 800abae:	f7fe fb22 	bl	80091f6 <__any_on>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1ed      	bne.n	800ab92 <__gethex+0x292>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4648      	mov	r0, r9
 800abba:	f7fd fee1 	bl	8008980 <_Bfree>
 800abbe:	2300      	movs	r3, #0
 800abc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abc2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	e724      	b.n	800aa14 <__gethex+0x114>
 800abca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f2      	bne.n	800abb6 <__gethex+0x2b6>
 800abd0:	e7df      	b.n	800ab92 <__gethex+0x292>
 800abd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1dc      	bne.n	800ab92 <__gethex+0x292>
 800abd8:	e7ed      	b.n	800abb6 <__gethex+0x2b6>
 800abda:	bf00      	nop
 800abdc:	0800b544 	.word	0x0800b544
 800abe0:	0800b3db 	.word	0x0800b3db
 800abe4:	0800b6ee 	.word	0x0800b6ee
 800abe8:	f106 38ff 	add.w	r8, r6, #4294967295
 800abec:	f1bb 0f00 	cmp.w	fp, #0
 800abf0:	d133      	bne.n	800ac5a <__gethex+0x35a>
 800abf2:	f1b8 0f00 	cmp.w	r8, #0
 800abf6:	d004      	beq.n	800ac02 <__gethex+0x302>
 800abf8:	4641      	mov	r1, r8
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7fe fafb 	bl	80091f6 <__any_on>
 800ac00:	4683      	mov	fp, r0
 800ac02:	2301      	movs	r3, #1
 800ac04:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ac08:	f008 081f 	and.w	r8, r8, #31
 800ac0c:	fa03 f308 	lsl.w	r3, r3, r8
 800ac10:	f04f 0802 	mov.w	r8, #2
 800ac14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4213      	tst	r3, r2
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bf18      	it	ne
 800ac20:	f04b 0b02 	orrne.w	fp, fp, #2
 800ac24:	1bad      	subs	r5, r5, r6
 800ac26:	f7ff fe03 	bl	800a830 <rshift>
 800ac2a:	687e      	ldr	r6, [r7, #4]
 800ac2c:	f1bb 0f00 	cmp.w	fp, #0
 800ac30:	d04a      	beq.n	800acc8 <__gethex+0x3c8>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d016      	beq.n	800ac66 <__gethex+0x366>
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d018      	beq.n	800ac6e <__gethex+0x36e>
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d109      	bne.n	800ac54 <__gethex+0x354>
 800ac40:	f01b 0f02 	tst.w	fp, #2
 800ac44:	d006      	beq.n	800ac54 <__gethex+0x354>
 800ac46:	f8da 3000 	ldr.w	r3, [sl]
 800ac4a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ac4e:	f01b 0f01 	tst.w	fp, #1
 800ac52:	d10f      	bne.n	800ac74 <__gethex+0x374>
 800ac54:	f048 0810 	orr.w	r8, r8, #16
 800ac58:	e036      	b.n	800acc8 <__gethex+0x3c8>
 800ac5a:	f04f 0b01 	mov.w	fp, #1
 800ac5e:	e7d0      	b.n	800ac02 <__gethex+0x302>
 800ac60:	f04f 0801 	mov.w	r8, #1
 800ac64:	e7e2      	b.n	800ac2c <__gethex+0x32c>
 800ac66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac68:	f1c3 0301 	rsb	r3, r3, #1
 800ac6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0ef      	beq.n	800ac54 <__gethex+0x354>
 800ac74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac78:	f104 0214 	add.w	r2, r4, #20
 800ac7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	2300      	movs	r3, #0
 800ac84:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ac88:	4694      	mov	ip, r2
 800ac8a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ac8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ac92:	d01e      	beq.n	800acd2 <__gethex+0x3d2>
 800ac94:	3101      	adds	r1, #1
 800ac96:	f8cc 1000 	str.w	r1, [ip]
 800ac9a:	f1b8 0f02 	cmp.w	r8, #2
 800ac9e:	f104 0214 	add.w	r2, r4, #20
 800aca2:	d13d      	bne.n	800ad20 <__gethex+0x420>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	42ab      	cmp	r3, r5
 800acaa:	d10b      	bne.n	800acc4 <__gethex+0x3c4>
 800acac:	2301      	movs	r3, #1
 800acae:	1169      	asrs	r1, r5, #5
 800acb0:	f005 051f 	and.w	r5, r5, #31
 800acb4:	fa03 f505 	lsl.w	r5, r3, r5
 800acb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acbc:	421d      	tst	r5, r3
 800acbe:	bf18      	it	ne
 800acc0:	f04f 0801 	movne.w	r8, #1
 800acc4:	f048 0820 	orr.w	r8, r8, #32
 800acc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acca:	601c      	str	r4, [r3, #0]
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	601e      	str	r6, [r3, #0]
 800acd0:	e6a0      	b.n	800aa14 <__gethex+0x114>
 800acd2:	4290      	cmp	r0, r2
 800acd4:	f842 3c04 	str.w	r3, [r2, #-4]
 800acd8:	d8d6      	bhi.n	800ac88 <__gethex+0x388>
 800acda:	68a2      	ldr	r2, [r4, #8]
 800acdc:	4593      	cmp	fp, r2
 800acde:	db17      	blt.n	800ad10 <__gethex+0x410>
 800ace0:	6861      	ldr	r1, [r4, #4]
 800ace2:	4648      	mov	r0, r9
 800ace4:	3101      	adds	r1, #1
 800ace6:	f7fd fe0b 	bl	8008900 <_Balloc>
 800acea:	4682      	mov	sl, r0
 800acec:	b918      	cbnz	r0, 800acf6 <__gethex+0x3f6>
 800acee:	4602      	mov	r2, r0
 800acf0:	2184      	movs	r1, #132	; 0x84
 800acf2:	4b1a      	ldr	r3, [pc, #104]	; (800ad5c <__gethex+0x45c>)
 800acf4:	e6b1      	b.n	800aa5a <__gethex+0x15a>
 800acf6:	6922      	ldr	r2, [r4, #16]
 800acf8:	f104 010c 	add.w	r1, r4, #12
 800acfc:	3202      	adds	r2, #2
 800acfe:	0092      	lsls	r2, r2, #2
 800ad00:	300c      	adds	r0, #12
 800ad02:	f7fc fe80 	bl	8007a06 <memcpy>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4648      	mov	r0, r9
 800ad0a:	f7fd fe39 	bl	8008980 <_Bfree>
 800ad0e:	4654      	mov	r4, sl
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	1c51      	adds	r1, r2, #1
 800ad14:	6121      	str	r1, [r4, #16]
 800ad16:	2101      	movs	r1, #1
 800ad18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad1c:	6151      	str	r1, [r2, #20]
 800ad1e:	e7bc      	b.n	800ac9a <__gethex+0x39a>
 800ad20:	6921      	ldr	r1, [r4, #16]
 800ad22:	4559      	cmp	r1, fp
 800ad24:	dd0b      	ble.n	800ad3e <__gethex+0x43e>
 800ad26:	2101      	movs	r1, #1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f7ff fd81 	bl	800a830 <rshift>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	3601      	adds	r6, #1
 800ad32:	42b3      	cmp	r3, r6
 800ad34:	f6ff aeda 	blt.w	800aaec <__gethex+0x1ec>
 800ad38:	f04f 0801 	mov.w	r8, #1
 800ad3c:	e7c2      	b.n	800acc4 <__gethex+0x3c4>
 800ad3e:	f015 051f 	ands.w	r5, r5, #31
 800ad42:	d0f9      	beq.n	800ad38 <__gethex+0x438>
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	f1c5 0520 	rsb	r5, r5, #32
 800ad4a:	441a      	add	r2, r3
 800ad4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ad50:	f7fd fec8 	bl	8008ae4 <__hi0bits>
 800ad54:	42a8      	cmp	r0, r5
 800ad56:	dbe6      	blt.n	800ad26 <__gethex+0x426>
 800ad58:	e7ee      	b.n	800ad38 <__gethex+0x438>
 800ad5a:	bf00      	nop
 800ad5c:	0800b3db 	.word	0x0800b3db

0800ad60 <L_shift>:
 800ad60:	f1c2 0208 	rsb	r2, r2, #8
 800ad64:	0092      	lsls	r2, r2, #2
 800ad66:	b570      	push	{r4, r5, r6, lr}
 800ad68:	f1c2 0620 	rsb	r6, r2, #32
 800ad6c:	6843      	ldr	r3, [r0, #4]
 800ad6e:	6804      	ldr	r4, [r0, #0]
 800ad70:	fa03 f506 	lsl.w	r5, r3, r6
 800ad74:	432c      	orrs	r4, r5
 800ad76:	40d3      	lsrs	r3, r2
 800ad78:	6004      	str	r4, [r0, #0]
 800ad7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad7e:	4288      	cmp	r0, r1
 800ad80:	d3f4      	bcc.n	800ad6c <L_shift+0xc>
 800ad82:	bd70      	pop	{r4, r5, r6, pc}

0800ad84 <__match>:
 800ad84:	b530      	push	{r4, r5, lr}
 800ad86:	6803      	ldr	r3, [r0, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad8e:	b914      	cbnz	r4, 800ad96 <__match+0x12>
 800ad90:	6003      	str	r3, [r0, #0]
 800ad92:	2001      	movs	r0, #1
 800ad94:	bd30      	pop	{r4, r5, pc}
 800ad96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad9e:	2d19      	cmp	r5, #25
 800ada0:	bf98      	it	ls
 800ada2:	3220      	addls	r2, #32
 800ada4:	42a2      	cmp	r2, r4
 800ada6:	d0f0      	beq.n	800ad8a <__match+0x6>
 800ada8:	2000      	movs	r0, #0
 800adaa:	e7f3      	b.n	800ad94 <__match+0x10>

0800adac <__hexnan>:
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	2500      	movs	r5, #0
 800adb2:	680b      	ldr	r3, [r1, #0]
 800adb4:	4682      	mov	sl, r0
 800adb6:	115e      	asrs	r6, r3, #5
 800adb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adbc:	f013 031f 	ands.w	r3, r3, #31
 800adc0:	bf18      	it	ne
 800adc2:	3604      	addne	r6, #4
 800adc4:	1f37      	subs	r7, r6, #4
 800adc6:	4690      	mov	r8, r2
 800adc8:	46b9      	mov	r9, r7
 800adca:	463c      	mov	r4, r7
 800adcc:	46ab      	mov	fp, r5
 800adce:	b087      	sub	sp, #28
 800add0:	6801      	ldr	r1, [r0, #0]
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	f846 5c04 	str.w	r5, [r6, #-4]
 800add8:	9502      	str	r5, [sp, #8]
 800adda:	784a      	ldrb	r2, [r1, #1]
 800addc:	1c4b      	adds	r3, r1, #1
 800adde:	9303      	str	r3, [sp, #12]
 800ade0:	b342      	cbz	r2, 800ae34 <__hexnan+0x88>
 800ade2:	4610      	mov	r0, r2
 800ade4:	9105      	str	r1, [sp, #20]
 800ade6:	9204      	str	r2, [sp, #16]
 800ade8:	f7ff fd75 	bl	800a8d6 <__hexdig_fun>
 800adec:	2800      	cmp	r0, #0
 800adee:	d14f      	bne.n	800ae90 <__hexnan+0xe4>
 800adf0:	9a04      	ldr	r2, [sp, #16]
 800adf2:	9905      	ldr	r1, [sp, #20]
 800adf4:	2a20      	cmp	r2, #32
 800adf6:	d818      	bhi.n	800ae2a <__hexnan+0x7e>
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	459b      	cmp	fp, r3
 800adfc:	dd13      	ble.n	800ae26 <__hexnan+0x7a>
 800adfe:	454c      	cmp	r4, r9
 800ae00:	d206      	bcs.n	800ae10 <__hexnan+0x64>
 800ae02:	2d07      	cmp	r5, #7
 800ae04:	dc04      	bgt.n	800ae10 <__hexnan+0x64>
 800ae06:	462a      	mov	r2, r5
 800ae08:	4649      	mov	r1, r9
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff ffa8 	bl	800ad60 <L_shift>
 800ae10:	4544      	cmp	r4, r8
 800ae12:	d950      	bls.n	800aeb6 <__hexnan+0x10a>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f1a4 0904 	sub.w	r9, r4, #4
 800ae1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae1e:	461d      	mov	r5, r3
 800ae20:	464c      	mov	r4, r9
 800ae22:	f8cd b008 	str.w	fp, [sp, #8]
 800ae26:	9903      	ldr	r1, [sp, #12]
 800ae28:	e7d7      	b.n	800adda <__hexnan+0x2e>
 800ae2a:	2a29      	cmp	r2, #41	; 0x29
 800ae2c:	d155      	bne.n	800aeda <__hexnan+0x12e>
 800ae2e:	3102      	adds	r1, #2
 800ae30:	f8ca 1000 	str.w	r1, [sl]
 800ae34:	f1bb 0f00 	cmp.w	fp, #0
 800ae38:	d04f      	beq.n	800aeda <__hexnan+0x12e>
 800ae3a:	454c      	cmp	r4, r9
 800ae3c:	d206      	bcs.n	800ae4c <__hexnan+0xa0>
 800ae3e:	2d07      	cmp	r5, #7
 800ae40:	dc04      	bgt.n	800ae4c <__hexnan+0xa0>
 800ae42:	462a      	mov	r2, r5
 800ae44:	4649      	mov	r1, r9
 800ae46:	4620      	mov	r0, r4
 800ae48:	f7ff ff8a 	bl	800ad60 <L_shift>
 800ae4c:	4544      	cmp	r4, r8
 800ae4e:	d934      	bls.n	800aeba <__hexnan+0x10e>
 800ae50:	4623      	mov	r3, r4
 800ae52:	f1a8 0204 	sub.w	r2, r8, #4
 800ae56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae5a:	429f      	cmp	r7, r3
 800ae5c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae60:	d2f9      	bcs.n	800ae56 <__hexnan+0xaa>
 800ae62:	1b3b      	subs	r3, r7, r4
 800ae64:	f023 0303 	bic.w	r3, r3, #3
 800ae68:	3304      	adds	r3, #4
 800ae6a:	3e03      	subs	r6, #3
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	bf38      	it	cc
 800ae72:	2304      	movcc	r3, #4
 800ae74:	2200      	movs	r2, #0
 800ae76:	4443      	add	r3, r8
 800ae78:	f843 2b04 	str.w	r2, [r3], #4
 800ae7c:	429f      	cmp	r7, r3
 800ae7e:	d2fb      	bcs.n	800ae78 <__hexnan+0xcc>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	b91b      	cbnz	r3, 800ae8c <__hexnan+0xe0>
 800ae84:	4547      	cmp	r7, r8
 800ae86:	d126      	bne.n	800aed6 <__hexnan+0x12a>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	2005      	movs	r0, #5
 800ae8e:	e025      	b.n	800aedc <__hexnan+0x130>
 800ae90:	3501      	adds	r5, #1
 800ae92:	2d08      	cmp	r5, #8
 800ae94:	f10b 0b01 	add.w	fp, fp, #1
 800ae98:	dd06      	ble.n	800aea8 <__hexnan+0xfc>
 800ae9a:	4544      	cmp	r4, r8
 800ae9c:	d9c3      	bls.n	800ae26 <__hexnan+0x7a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2501      	movs	r5, #1
 800aea2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aea6:	3c04      	subs	r4, #4
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	f000 000f 	and.w	r0, r0, #15
 800aeae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aeb2:	6020      	str	r0, [r4, #0]
 800aeb4:	e7b7      	b.n	800ae26 <__hexnan+0x7a>
 800aeb6:	2508      	movs	r5, #8
 800aeb8:	e7b5      	b.n	800ae26 <__hexnan+0x7a>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0df      	beq.n	800ae80 <__hexnan+0xd4>
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	f1c3 0320 	rsb	r3, r3, #32
 800aec8:	40da      	lsrs	r2, r3
 800aeca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aece:	4013      	ands	r3, r2
 800aed0:	f846 3c04 	str.w	r3, [r6, #-4]
 800aed4:	e7d4      	b.n	800ae80 <__hexnan+0xd4>
 800aed6:	3f04      	subs	r7, #4
 800aed8:	e7d2      	b.n	800ae80 <__hexnan+0xd4>
 800aeda:	2004      	movs	r0, #4
 800aedc:	b007      	add	sp, #28
 800aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aee2 <__ascii_mbtowc>:
 800aee2:	b082      	sub	sp, #8
 800aee4:	b901      	cbnz	r1, 800aee8 <__ascii_mbtowc+0x6>
 800aee6:	a901      	add	r1, sp, #4
 800aee8:	b142      	cbz	r2, 800aefc <__ascii_mbtowc+0x1a>
 800aeea:	b14b      	cbz	r3, 800af00 <__ascii_mbtowc+0x1e>
 800aeec:	7813      	ldrb	r3, [r2, #0]
 800aeee:	600b      	str	r3, [r1, #0]
 800aef0:	7812      	ldrb	r2, [r2, #0]
 800aef2:	1e10      	subs	r0, r2, #0
 800aef4:	bf18      	it	ne
 800aef6:	2001      	movne	r0, #1
 800aef8:	b002      	add	sp, #8
 800aefa:	4770      	bx	lr
 800aefc:	4610      	mov	r0, r2
 800aefe:	e7fb      	b.n	800aef8 <__ascii_mbtowc+0x16>
 800af00:	f06f 0001 	mvn.w	r0, #1
 800af04:	e7f8      	b.n	800aef8 <__ascii_mbtowc+0x16>

0800af06 <_realloc_r>:
 800af06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0a:	4680      	mov	r8, r0
 800af0c:	4614      	mov	r4, r2
 800af0e:	460e      	mov	r6, r1
 800af10:	b921      	cbnz	r1, 800af1c <_realloc_r+0x16>
 800af12:	4611      	mov	r1, r2
 800af14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	f7fd bc66 	b.w	80087e8 <_malloc_r>
 800af1c:	b92a      	cbnz	r2, 800af2a <_realloc_r+0x24>
 800af1e:	f7fd fbf3 	bl	8008708 <_free_r>
 800af22:	4625      	mov	r5, r4
 800af24:	4628      	mov	r0, r5
 800af26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2a:	f000 f842 	bl	800afb2 <_malloc_usable_size_r>
 800af2e:	4284      	cmp	r4, r0
 800af30:	4607      	mov	r7, r0
 800af32:	d802      	bhi.n	800af3a <_realloc_r+0x34>
 800af34:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af38:	d812      	bhi.n	800af60 <_realloc_r+0x5a>
 800af3a:	4621      	mov	r1, r4
 800af3c:	4640      	mov	r0, r8
 800af3e:	f7fd fc53 	bl	80087e8 <_malloc_r>
 800af42:	4605      	mov	r5, r0
 800af44:	2800      	cmp	r0, #0
 800af46:	d0ed      	beq.n	800af24 <_realloc_r+0x1e>
 800af48:	42bc      	cmp	r4, r7
 800af4a:	4622      	mov	r2, r4
 800af4c:	4631      	mov	r1, r6
 800af4e:	bf28      	it	cs
 800af50:	463a      	movcs	r2, r7
 800af52:	f7fc fd58 	bl	8007a06 <memcpy>
 800af56:	4631      	mov	r1, r6
 800af58:	4640      	mov	r0, r8
 800af5a:	f7fd fbd5 	bl	8008708 <_free_r>
 800af5e:	e7e1      	b.n	800af24 <_realloc_r+0x1e>
 800af60:	4635      	mov	r5, r6
 800af62:	e7df      	b.n	800af24 <_realloc_r+0x1e>

0800af64 <__ascii_wctomb>:
 800af64:	4603      	mov	r3, r0
 800af66:	4608      	mov	r0, r1
 800af68:	b141      	cbz	r1, 800af7c <__ascii_wctomb+0x18>
 800af6a:	2aff      	cmp	r2, #255	; 0xff
 800af6c:	d904      	bls.n	800af78 <__ascii_wctomb+0x14>
 800af6e:	228a      	movs	r2, #138	; 0x8a
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	4770      	bx	lr
 800af78:	2001      	movs	r0, #1
 800af7a:	700a      	strb	r2, [r1, #0]
 800af7c:	4770      	bx	lr
	...

0800af80 <fiprintf>:
 800af80:	b40e      	push	{r1, r2, r3}
 800af82:	b503      	push	{r0, r1, lr}
 800af84:	4601      	mov	r1, r0
 800af86:	ab03      	add	r3, sp, #12
 800af88:	4805      	ldr	r0, [pc, #20]	; (800afa0 <fiprintf+0x20>)
 800af8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8e:	6800      	ldr	r0, [r0, #0]
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	f7ff f96f 	bl	800a274 <_vfiprintf_r>
 800af96:	b002      	add	sp, #8
 800af98:	f85d eb04 	ldr.w	lr, [sp], #4
 800af9c:	b003      	add	sp, #12
 800af9e:	4770      	bx	lr
 800afa0:	20000068 	.word	0x20000068

0800afa4 <abort>:
 800afa4:	2006      	movs	r0, #6
 800afa6:	b508      	push	{r3, lr}
 800afa8:	f000 f834 	bl	800b014 <raise>
 800afac:	2001      	movs	r0, #1
 800afae:	f7f6 fbe2 	bl	8001776 <_exit>

0800afb2 <_malloc_usable_size_r>:
 800afb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb6:	1f18      	subs	r0, r3, #4
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfbc      	itt	lt
 800afbc:	580b      	ldrlt	r3, [r1, r0]
 800afbe:	18c0      	addlt	r0, r0, r3
 800afc0:	4770      	bx	lr

0800afc2 <_raise_r>:
 800afc2:	291f      	cmp	r1, #31
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4604      	mov	r4, r0
 800afc8:	460d      	mov	r5, r1
 800afca:	d904      	bls.n	800afd6 <_raise_r+0x14>
 800afcc:	2316      	movs	r3, #22
 800afce:	6003      	str	r3, [r0, #0]
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afd8:	b112      	cbz	r2, 800afe0 <_raise_r+0x1e>
 800afda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afde:	b94b      	cbnz	r3, 800aff4 <_raise_r+0x32>
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 f831 	bl	800b048 <_getpid_r>
 800afe6:	462a      	mov	r2, r5
 800afe8:	4601      	mov	r1, r0
 800afea:	4620      	mov	r0, r4
 800afec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff0:	f000 b818 	b.w	800b024 <_kill_r>
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d00a      	beq.n	800b00e <_raise_r+0x4c>
 800aff8:	1c59      	adds	r1, r3, #1
 800affa:	d103      	bne.n	800b004 <_raise_r+0x42>
 800affc:	2316      	movs	r3, #22
 800affe:	6003      	str	r3, [r0, #0]
 800b000:	2001      	movs	r0, #1
 800b002:	e7e7      	b.n	800afd4 <_raise_r+0x12>
 800b004:	2400      	movs	r4, #0
 800b006:	4628      	mov	r0, r5
 800b008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b00c:	4798      	blx	r3
 800b00e:	2000      	movs	r0, #0
 800b010:	e7e0      	b.n	800afd4 <_raise_r+0x12>
	...

0800b014 <raise>:
 800b014:	4b02      	ldr	r3, [pc, #8]	; (800b020 <raise+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f7ff bfd2 	b.w	800afc2 <_raise_r>
 800b01e:	bf00      	nop
 800b020:	20000068 	.word	0x20000068

0800b024 <_kill_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	2300      	movs	r3, #0
 800b028:	4d06      	ldr	r5, [pc, #24]	; (800b044 <_kill_r+0x20>)
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	4611      	mov	r1, r2
 800b030:	602b      	str	r3, [r5, #0]
 800b032:	f7f6 fb90 	bl	8001756 <_kill>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	d102      	bne.n	800b040 <_kill_r+0x1c>
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	b103      	cbz	r3, 800b040 <_kill_r+0x1c>
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	bd38      	pop	{r3, r4, r5, pc}
 800b042:	bf00      	nop
 800b044:	20000cf0 	.word	0x20000cf0

0800b048 <_getpid_r>:
 800b048:	f7f6 bb7e 	b.w	8001748 <_getpid>

0800b04c <_init>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr

0800b058 <_fini>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr
